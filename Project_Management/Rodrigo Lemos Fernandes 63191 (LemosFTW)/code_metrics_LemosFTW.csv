Javadoc coverage metrics,terça, 21 nov. 2023 21:43:07 WET
Method,JLOC
accept(File),0
"accept(File, String)",0
"compare(AIUnit, AIUnit)",0
"compare(Destination, Destination)",0
"compare(FreeColObject, FreeColObject)",0
"compare(Location, Location)",0
"compare(Scope, Scope)",0
"getCost(Unit, Location, Location, int)",0
getLocationData(UnitData),0
getMovesLeft(),0
getNewTurns(),0
mousePressed(MouseEvent),0
net.sf.freecol.AllTests.suite(),0
net.sf.freecol.FreeCol.FreeCol(),0
"net.sf.freecol.FreeCol.LogLevel.LogLevel(String, Level)",0
net.sf.freecol.FreeCol.LogLevel.buildLogger(),0
"net.sf.freecol.FreeCol.badFile(String, File)",7
net.sf.freecol.FreeCol.checkServerIntegrity(FreeColServer),5
net.sf.freecol.FreeCol.createSplashScreen(),0
"net.sf.freecol.FreeCol.errorFromException(Exception, String)",8
"net.sf.freecol.FreeCol.errorFromException(Exception, StringTemplate)",8
"net.sf.freecol.FreeCol.fatal(Logger, String)",6
net.sf.freecol.FreeCol.fatal(String),5
net.sf.freecol.FreeCol.fatal(StringTemplate),5
"net.sf.freecol.FreeCol.findArg(String, String[])",8
net.sf.freecol.FreeCol.getAdvantages(),6
net.sf.freecol.FreeCol.getAdvantagesDescription(),5
net.sf.freecol.FreeCol.getConfiguration(),7
net.sf.freecol.FreeCol.getDebugDescription(),5
net.sf.freecol.FreeCol.getDefaultSplashStream(JarURLConnection),10
net.sf.freecol.FreeCol.getDifficulty(),5
net.sf.freecol.FreeCol.getEuropeanCount(),5
net.sf.freecol.FreeCol.getFreeColProtocolVersion(),5
net.sf.freecol.FreeCol.getHeadless(),6
net.sf.freecol.FreeCol.getJarURLConnection(Class),7
net.sf.freecol.FreeCol.getLocale(),5
net.sf.freecol.FreeCol.getMetaServerAddress(),5
net.sf.freecol.FreeCol.getMetaServerPort(),5
net.sf.freecol.FreeCol.getName(),6
net.sf.freecol.FreeCol.getRevision(),5
net.sf.freecol.FreeCol.getRules(),5
net.sf.freecol.FreeCol.getRulesFile(),5
net.sf.freecol.FreeCol.getRulesSpecification(),5
net.sf.freecol.FreeCol.getServerHost(),5
net.sf.freecol.FreeCol.getServerName(),5
net.sf.freecol.FreeCol.getServerPort(),5
net.sf.freecol.FreeCol.getTc(),5
net.sf.freecol.FreeCol.getTimeout(boolean),9
net.sf.freecol.FreeCol.getValidAdvantages(),5
net.sf.freecol.FreeCol.getValidDifficulties(),5
net.sf.freecol.FreeCol.getValidGUIScales(),5
net.sf.freecol.FreeCol.getVersion(),6
net.sf.freecol.FreeCol.gripe(String),5
net.sf.freecol.FreeCol.gripe(StringTemplate),5
net.sf.freecol.FreeCol.handleArgs(String[]),6
"net.sf.freecol.FreeCol.loadSpecification(FreeColModFile, Advantages, String)",8
net.sf.freecol.FreeCol.main(String[]),5
"net.sf.freecol.FreeCol.printUsage(Options, int)",6
net.sf.freecol.FreeCol.processSpecialOptions(),3
net.sf.freecol.FreeCol.quit(int),5
net.sf.freecol.FreeCol.readVersion(JarURLConnection),7
net.sf.freecol.FreeCol.selectAdvantages(String),8
net.sf.freecol.FreeCol.selectDifficulty(String),6
net.sf.freecol.FreeCol.selectEuropeanCount(String),6
net.sf.freecol.FreeCol.setAdvantages(Advantages),5
net.sf.freecol.FreeCol.setDifficulty(OptionGroup),6
net.sf.freecol.FreeCol.setDifficulty(String),5
net.sf.freecol.FreeCol.setEuropeanCount(int),5
net.sf.freecol.FreeCol.setHeadless(boolean),7
net.sf.freecol.FreeCol.setLocale(String),9
net.sf.freecol.FreeCol.setMetaServer(String),6
net.sf.freecol.FreeCol.setName(String),5
net.sf.freecol.FreeCol.setRules(String),7
net.sf.freecol.FreeCol.setServerAddress(String),6
net.sf.freecol.FreeCol.setServerPort(String),6
net.sf.freecol.FreeCol.setTc(String),7
net.sf.freecol.FreeCol.setTimeout(String),5
net.sf.freecol.FreeCol.setWindowSize(String),8
net.sf.freecol.FreeCol.startClient(),3
net.sf.freecol.FreeCol.startServer(),3
net.sf.freecol.FreeCol.startTestClient(Specification),6
"net.sf.freecol.FreeCol.trace(Logger, String)",6
net.sf.freecol.client.AllTests.suite(),0
net.sf.freecol.client.ClientOptions.ClientOptions(),6
"net.sf.freecol.client.ClientOptions.addBooleanOption(String, String, boolean)",0
"net.sf.freecol.client.ClientOptions.addIntegerOption(String, String, int)",0
"net.sf.freecol.client.ClientOptions.addOptionGroup(String, String)",0
"net.sf.freecol.client.ClientOptions.addPercentageOption(String, String, int)",0
"net.sf.freecol.client.ClientOptions.addRangeOption(String, String, int, Map<Integer, String>)",8
"net.sf.freecol.client.ClientOptions.addTextOption(String, String, String)",7
net.sf.freecol.client.ClientOptions.fixClientOptions(),5
net.sf.freecol.client.ClientOptions.getActiveMods(),5
net.sf.freecol.client.ClientOptions.getColonyComparator(),5
net.sf.freecol.client.ClientOptions.getColonyComparatorInternal(int),6
net.sf.freecol.client.ClientOptions.getDisplayTileText(),5
net.sf.freecol.client.ClientOptions.getModelMessageComparator(Game),6
net.sf.freecol.client.ClientOptions.getPanelPosition(String),7
net.sf.freecol.client.ClientOptions.getPanelSize(String),7
net.sf.freecol.client.ClientOptions.getSpecialOptions(),8
net.sf.freecol.client.ClientOptions.getXMLTagName(),3
net.sf.freecol.client.ClientOptions.isRiverAnimationEnabled(),0
net.sf.freecol.client.ClientOptions.isTerrainAnimationsEnabled(),0
net.sf.freecol.client.ClientOptions.load(FreeColSavegameFile),6
net.sf.freecol.client.ClientOptions.merge(File),6
net.sf.freecol.client.ClientOptions.merge(FreeColSavegameFile),7
"net.sf.freecol.client.ClientOptions.regroup(String, String)",6
"net.sf.freecol.client.ClientTestHelper.startClient(FreeColServer, Specification)",0
net.sf.freecol.client.ClientTestHelper.stopClient(FreeColClient),0
"net.sf.freecol.client.FreeColClient.FreeColClient(SplashScreen, String, Dimension, String, boolean, boolean, File, ...)",17
net.sf.freecol.client.FreeColClient.addSpecificationActions(Specification),5
net.sf.freecol.client.FreeColClient.askServer(),5
net.sf.freecol.client.FreeColClient.askToQuit(),3
net.sf.freecol.client.FreeColClient.canSaveCurrentGame(),9
net.sf.freecol.client.FreeColClient.changeClientState(boolean),5
net.sf.freecol.client.FreeColClient.continuePlaying(),3
net.sf.freecol.client.FreeColClient.currentPlayerIsMyPlayer(),5
"net.sf.freecol.client.FreeColClient.failToMain(Exception, String)",8
"net.sf.freecol.client.FreeColClient.failToMain(Exception, StringTemplate)",8
net.sf.freecol.client.FreeColClient.getActionManager(),5
net.sf.freecol.client.FreeColClient.getAnimationSpeed(Player),6
net.sf.freecol.client.FreeColClient.getClientOptions(),6
net.sf.freecol.client.FreeColClient.getConnectController(),6
net.sf.freecol.client.FreeColClient.getFreeColServer(),6
net.sf.freecol.client.FreeColClient.getGUI(),5
net.sf.freecol.client.FreeColClient.getGame(),6
net.sf.freecol.client.FreeColClient.getInGameController(),5
net.sf.freecol.client.FreeColClient.getMapEditorController(),5
net.sf.freecol.client.FreeColClient.getMyPlayer(),6
net.sf.freecol.client.FreeColClient.getPreGameController(),5
net.sf.freecol.client.FreeColClient.getServerState(),5
net.sf.freecol.client.FreeColClient.getSinglePlayer(),6
net.sf.freecol.client.FreeColClient.getSoundController(),5
net.sf.freecol.client.FreeColClient.getVacantPlayerNames(),5
net.sf.freecol.client.FreeColClient.isAdmin(),5
net.sf.freecol.client.FreeColClient.isInGame(),5
net.sf.freecol.client.FreeColClient.isLoggedIn(),5
net.sf.freecol.client.FreeColClient.isMapEditor(),5
net.sf.freecol.client.FreeColClient.isReadyToStart(),5
net.sf.freecol.client.FreeColClient.loadClientOptions(File),17
"net.sf.freecol.client.FreeColClient.login(boolean, Game, Player, boolean)",10
net.sf.freecol.client.FreeColClient.logout(boolean),7
net.sf.freecol.client.FreeColClient.overrideDefaultUncaughtExceptionHandler(),0
net.sf.freecol.client.FreeColClient.quit(),3
net.sf.freecol.client.FreeColClient.restoreGUI(Player),5
net.sf.freecol.client.FreeColClient.retire(),3
net.sf.freecol.client.FreeColClient.setFreeColServer(FreeColServer),7
net.sf.freecol.client.FreeColClient.setGame(Game),6
net.sf.freecol.client.FreeColClient.setMapEditor(boolean),5
net.sf.freecol.client.FreeColClient.setMessageHandler(MessageHandler),6
net.sf.freecol.client.FreeColClient.setMyPlayer(Player),7
net.sf.freecol.client.FreeColClient.setServerState(ServerState),5
net.sf.freecol.client.FreeColClient.setSinglePlayer(boolean),5
net.sf.freecol.client.FreeColClient.setVacantPlayerNames(List<String>),5
net.sf.freecol.client.FreeColClient.skipTurns(int),5
"net.sf.freecol.client.FreeColClient.startFirstTaskInGui(String, boolean, File, Specification)",0
"net.sf.freecol.client.FreeColClient.startServer(boolean, boolean, File, InetAddress, int, String)",11
"net.sf.freecol.client.FreeColClient.startServer(boolean, boolean, Specification, InetAddress, int)",11
net.sf.freecol.client.FreeColClient.stopServer(),5
net.sf.freecol.client.FreeColClient.toggleClientOption(String),5
net.sf.freecol.client.FreeColClient.tutorialMode(),5
net.sf.freecol.client.FreeColClient.unblockServer(int),6
net.sf.freecol.client.FreeColClient.updateActions(),4
net.sf.freecol.client.control.AllTests.suite(),0
net.sf.freecol.client.control.ClientInputHandler.ClientInputHandler(FreeColClient),5
"net.sf.freecol.client.control.ClientInputHandler.handle(Connection, Message)",3
net.sf.freecol.client.control.ClientInputHandler.read(Connection),3
net.sf.freecol.client.control.ConnectController.ConnectController(FreeColClient),5
"net.sf.freecol.client.control.ConnectController.connect(String, String, int)",9
"net.sf.freecol.client.control.ConnectController.joinMultiplayerGame(String, int)",7
"net.sf.freecol.client.control.ConnectController.login(ServerState, Game, String, boolean, boolean)",28
net.sf.freecol.client.control.ConnectController.logout(LogoutReason),6
net.sf.freecol.client.control.ConnectController.mainTitle(),5
net.sf.freecol.client.control.ConnectController.newGame(),3
"net.sf.freecol.client.control.ConnectController.requestLogin(String, String, String, int)",12
net.sf.freecol.client.control.ConnectController.requestLogout(LogoutReason),7
"net.sf.freecol.client.control.ConnectController.startMultiplayerGame(Specification, boolean, InetAddress, int)",9
net.sf.freecol.client.control.ConnectController.startSavedGame(File),6
net.sf.freecol.client.control.ConnectController.startSinglePlayerGame(Specification),8
net.sf.freecol.client.control.FreeColClientHolder.FreeColClientHolder(FreeColClient),5
net.sf.freecol.client.control.FreeColClientHolder.askServer(),5
net.sf.freecol.client.control.FreeColClientHolder.currentPlayerIsMyPlayer(),5
net.sf.freecol.client.control.FreeColClientHolder.getClientOptions(),5
net.sf.freecol.client.control.FreeColClientHolder.getConnectController(),5
net.sf.freecol.client.control.FreeColClientHolder.getFreeColClient(),5
net.sf.freecol.client.control.FreeColClientHolder.getFreeColServer(),5
net.sf.freecol.client.control.FreeColClientHolder.getGUI(),5
net.sf.freecol.client.control.FreeColClientHolder.getGame(),5
net.sf.freecol.client.control.FreeColClientHolder.getMap(),5
net.sf.freecol.client.control.FreeColClientHolder.getMyPlayer(),5
net.sf.freecol.client.control.FreeColClientHolder.getSpecification(),5
net.sf.freecol.client.control.FreeColClientHolder.igc(),5
net.sf.freecol.client.control.FreeColClientHolder.pgc(),5
net.sf.freecol.client.control.InGameController.InGameController(FreeColClient),5
net.sf.freecol.client.control.InGameController.MoveMode.maximize(MoveMode),0
net.sf.freecol.client.control.InGameController.MoveMode.minimize(MoveMode),0
net.sf.freecol.client.control.InGameController.abandonColony(Colony),8
net.sf.freecol.client.control.InGameController.addPlayerHandler(List<Player>),5
"net.sf.freecol.client.control.InGameController.animateAttackHandler(Unit, Unit, Tile, Tile, boolean)",9
"net.sf.freecol.client.control.InGameController.animateMoveHandler(Unit, Tile, Tile)",7
"net.sf.freecol.client.control.InGameController.askAssignTradeRoute(Unit, TradeRoute)",7
"net.sf.freecol.client.control.InGameController.askClaimTile(Player, Tile, FreeColGameObject, int)",9
net.sf.freecol.client.control.InGameController.askClearGotoOrders(Unit),7
"net.sf.freecol.client.control.InGameController.askEmbark(Unit, Unit)",7
"net.sf.freecol.client.control.InGameController.askEmigrate(Europe, int)",10
"net.sf.freecol.client.control.InGameController.askLoadGoods(Location, GoodsType, int, Unit)",9
"net.sf.freecol.client.control.InGameController.askSetDestination(Unit, Location)",7
"net.sf.freecol.client.control.InGameController.askUnloadGoods(GoodsType, int, Unit)",8
"net.sf.freecol.client.control.InGameController.assignTeacher(Unit, Unit)",9
"net.sf.freecol.client.control.InGameController.assignTradeRoute(Unit, TradeRoute)",10
"net.sf.freecol.client.control.InGameController.attackRanged(Unit, Tile)",0
net.sf.freecol.client.control.InGameController.autoSaveGame(),5
"net.sf.freecol.client.control.InGameController.boardShip(Unit, Unit)",10
net.sf.freecol.client.control.InGameController.buildColony(Unit),8
"net.sf.freecol.client.control.InGameController.buyGoods(GoodsType, int, Unit)",11
"net.sf.freecol.client.control.InGameController.changeState(Unit, UnitState)",9
net.sf.freecol.client.control.InGameController.changeView(Tile),5
"net.sf.freecol.client.control.InGameController.changeView(Unit, boolean)",7
"net.sf.freecol.client.control.InGameController.changeWorkImprovementType(Unit, TileImprovementType)",9
"net.sf.freecol.client.control.InGameController.changeWorkType(Unit, GoodsType)",9
net.sf.freecol.client.control.InGameController.chat(String),8
"net.sf.freecol.client.control.InGameController.chatHandler(String, String, Color, boolean)",8
net.sf.freecol.client.control.InGameController.checkCashInTreasureTrain(Unit),9
"net.sf.freecol.client.control.InGameController.chooseFoundingFather(List<FoundingFather>, FoundingFather)",7
net.sf.freecol.client.control.InGameController.chooseFoundingFatherHandler(List<FoundingFather>),5
"net.sf.freecol.client.control.InGameController.claimTile(Tile, FreeColGameObject)",9
net.sf.freecol.client.control.InGameController.clearGotoOrders(Unit),9
net.sf.freecol.client.control.InGameController.clearOrders(Unit),9
net.sf.freecol.client.control.InGameController.clearSpeciality(Unit),8
"net.sf.freecol.client.control.InGameController.closeColony(Colony, boolean)",6
net.sf.freecol.client.control.InGameController.closeHandler(String),5
"net.sf.freecol.client.control.InGameController.continueIgnoreMessage(String, Turn)",8
net.sf.freecol.client.control.InGameController.declareIndependence(),7
net.sf.freecol.client.control.InGameController.deleteTradeRoute(TradeRoute),8
"net.sf.freecol.client.control.InGameController.diplomacyHandler(FreeColGameObject, FreeColGameObject, DiplomaticTrade)",7
net.sf.freecol.client.control.InGameController.disbandUnit(Unit),8
"net.sf.freecol.client.control.InGameController.displayChat(String, String, Color, boolean)",8
"net.sf.freecol.client.control.InGameController.displayModelMessages(boolean, boolean)",7
net.sf.freecol.client.control.InGameController.displayTurnReportMessages(),3
net.sf.freecol.client.control.InGameController.doEndTurn(boolean),5
net.sf.freecol.client.control.InGameController.doExecuteGotoOrders(),6
"net.sf.freecol.client.control.InGameController.emigrate(Player, int, int, boolean)",8
"net.sf.freecol.client.control.InGameController.emigration(Player, int, boolean)",14
net.sf.freecol.client.control.InGameController.endTurn(boolean),7
"net.sf.freecol.client.control.InGameController.equipUnitForRole(Unit, Role, int)",10
"net.sf.freecol.client.control.InGameController.error(StringTemplate, String)",6
"net.sf.freecol.client.control.InGameController.errorHandler(StringTemplate, String)",6
net.sf.freecol.client.control.InGameController.executeGotoOrders(),8
"net.sf.freecol.client.control.InGameController.featureChangeHandler(FreeColGameObject, List<FreeColObject>, boolean)",7
net.sf.freecol.client.control.InGameController.fireChanges(ObjectWas...),5
"net.sf.freecol.client.control.InGameController.firstContact(Player, Player, Tile, boolean)",10
"net.sf.freecol.client.control.InGameController.firstContactHandler(Player, Player, Tile, int)",9
"net.sf.freecol.client.control.InGameController.followTradeRoute(Unit, List<ModelMessage>)",9
net.sf.freecol.client.control.InGameController.fountainOfYouthHandler(int),5
net.sf.freecol.client.control.InGameController.gameEndedHandler(String),5
"net.sf.freecol.client.control.InGameController.getMissionaryChoice(Unit, IndianSettlement, Direction)",7
"net.sf.freecol.client.control.InGameController.getNationAt(Tile, Direction)",11
net.sf.freecol.client.control.InGameController.getSaveGameString(Game),6
"net.sf.freecol.client.control.InGameController.getSettlementAt(Tile, Direction)",9
"net.sf.freecol.client.control.InGameController.goToTile(Unit, PathNode)",9
net.sf.freecol.client.control.InGameController.highScore(Boolean),9
"net.sf.freecol.client.control.InGameController.highScoresHandler(String, List<HighScore>)",6
"net.sf.freecol.client.control.InGameController.ignoreMessage(ModelMessage, boolean)",10
"net.sf.freecol.client.control.InGameController.inciteHandler(Unit, IndianSettlement, Player, int)",8
"net.sf.freecol.client.control.InGameController.indianDemandHandler(Unit, Colony, GoodsType, int)",8
net.sf.freecol.client.control.InGameController.invokeLater(Runnable),5
net.sf.freecol.client.control.InGameController.joinColony(Unit),6
net.sf.freecol.client.control.InGameController.leaveShip(Unit),9
"net.sf.freecol.client.control.InGameController.loadCargo(Goods, Unit)",9
net.sf.freecol.client.control.InGameController.loadGame(),8
"net.sf.freecol.client.control.InGameController.loadUnitAtStop(Unit, LogBuilder)",7
"net.sf.freecol.client.control.InGameController.logoutHandler(Player, LogoutReason)",6
"net.sf.freecol.client.control.InGameController.lootCargo(Unit, List<Goods>, String)",10
"net.sf.freecol.client.control.InGameController.lootCargoHandler(Unit, List<Goods>, String)",7
"net.sf.freecol.client.control.InGameController.monarchAction(MonarchAction, boolean)",9
"net.sf.freecol.client.control.InGameController.monarchActionHandler(MonarchAction, StringTemplate, String)",7
"net.sf.freecol.client.control.InGameController.moveAttack(Unit, Direction)",8
"net.sf.freecol.client.control.InGameController.moveAttackSettlement(Unit, Direction)",8
"net.sf.freecol.client.control.InGameController.moveAutoload(Unit, List<Unit>)",7
"net.sf.freecol.client.control.InGameController.moveAwayFromEurope(Unit, Location)",7
"net.sf.freecol.client.control.InGameController.moveDiplomacy(Unit, Direction, DiplomaticTrade)",9
"net.sf.freecol.client.control.InGameController.moveDirection(Unit, Direction, boolean)",10
"net.sf.freecol.client.control.InGameController.moveDisembark(Unit, Direction)",10
"net.sf.freecol.client.control.InGameController.moveEmbark(Unit, Direction)",8
"net.sf.freecol.client.control.InGameController.moveExplore(Unit, Direction)",8
"net.sf.freecol.client.control.InGameController.moveHighSeas(Unit, Direction)",9
"net.sf.freecol.client.control.InGameController.moveLearnSkill(Unit, Direction)",10
"net.sf.freecol.client.control.InGameController.movePath(Unit, PathNode)",7
"net.sf.freecol.client.control.InGameController.moveScoutColony(Unit, Direction)",11
"net.sf.freecol.client.control.InGameController.moveScoutIndianSettlement(Unit, Direction)",11
"net.sf.freecol.client.control.InGameController.moveSpy(Unit, Direction)",7
"net.sf.freecol.client.control.InGameController.moveTile(Unit, Direction)",8
"net.sf.freecol.client.control.InGameController.moveTo(Unit, Location)",10
"net.sf.freecol.client.control.InGameController.moveToDestination(Unit, List<ModelMessage>)",9
"net.sf.freecol.client.control.InGameController.moveTowardEurope(Unit, Europe)",7
"net.sf.freecol.client.control.InGameController.moveTrade(Unit, Direction)",8
"net.sf.freecol.client.control.InGameController.moveTribute(Unit, int, Direction)",8
"net.sf.freecol.client.control.InGameController.moveUnit(Unit, Direction)",10
"net.sf.freecol.client.control.InGameController.moveUseMissionary(Unit, Direction)",8
"net.sf.freecol.client.control.InGameController.nameNewRegion(Tile, Unit, Region, String)",11
net.sf.freecol.client.control.InGameController.nationSummary(Player),9
"net.sf.freecol.client.control.InGameController.nationSummaryHandler(Player, NationSummary)",6
"net.sf.freecol.client.control.InGameController.nativeTrade(NativeTrade, TradeAction, NativeTradeItem, StringTemplate)",8
"net.sf.freecol.client.control.InGameController.nativeTradeHandler(NativeTradeAction, NativeTrade)",6
"net.sf.freecol.client.control.InGameController.newLandName(Unit, String)",9
"net.sf.freecol.client.control.InGameController.newLandNameHandler(Unit, String)",6
"net.sf.freecol.client.control.InGameController.newRegionName(Region, Tile, Unit, String)",9
"net.sf.freecol.client.control.InGameController.newRegionNameHandler(Region, Tile, Unit, String)",8
net.sf.freecol.client.control.InGameController.newTradeRoute(Player),9
net.sf.freecol.client.control.InGameController.newTradeRouteHandler(TradeRoute),5
net.sf.freecol.client.control.InGameController.newTurn(int),6
net.sf.freecol.client.control.InGameController.newTurnHandler(int),5
net.sf.freecol.client.control.InGameController.nextActiveUnit(),7
net.sf.freecol.client.control.InGameController.nextModelMessage(),9
"net.sf.freecol.client.control.InGameController.partialHandler(FreeColGameObject, Map<String, String>)",6
net.sf.freecol.client.control.InGameController.payArrears(GoodsType),9
net.sf.freecol.client.control.InGameController.payForBuilding(Colony),10
net.sf.freecol.client.control.InGameController.putOutsideColony(Unit),8
net.sf.freecol.client.control.InGameController.reapIgnoredMessages(Turn),5
net.sf.freecol.client.control.InGameController.reconnect(),7
net.sf.freecol.client.control.InGameController.reconnectHandler(),3
net.sf.freecol.client.control.InGameController.recruitUnitInEurope(int),8
"net.sf.freecol.client.control.InGameController.removeHandler(List<FreeColGameObject>, FreeColGameObject)",6
net.sf.freecol.client.control.InGameController.rename(Nameable),10
net.sf.freecol.client.control.InGameController.requireOurTurn(),6
net.sf.freecol.client.control.InGameController.saveAndQuit(),7
net.sf.freecol.client.control.InGameController.saveGame(),8
net.sf.freecol.client.control.InGameController.saveGame(File),6
"net.sf.freecol.client.control.InGameController.scoutSpeakToChiefHandler(Unit, IndianSettlement, String)",7
net.sf.freecol.client.control.InGameController.selectDestination(Unit),9
net.sf.freecol.client.control.InGameController.sellGoods(Goods),9
"net.sf.freecol.client.control.InGameController.setAIHandler(Player, boolean)",6
"net.sf.freecol.client.control.InGameController.setBuildQueue(Colony, List<BuildableType>)",9
net.sf.freecol.client.control.InGameController.setCurrentPlayer(Player),6
net.sf.freecol.client.control.InGameController.setCurrentPlayerHandler(Player),5
net.sf.freecol.client.control.InGameController.setDead(),5
net.sf.freecol.client.control.InGameController.setDeadHandler(Player),5
net.sf.freecol.client.control.InGameController.setGameConnected(),7
"net.sf.freecol.client.control.InGameController.setGoodsLevels(Colony, GoodsType)",9
net.sf.freecol.client.control.InGameController.setInDebugMode(),7
"net.sf.freecol.client.control.InGameController.setStanceHandler(Stance, Player, Player)",8
"net.sf.freecol.client.control.InGameController.showColonyPanel(Colony, Unit)",6
"net.sf.freecol.client.control.InGameController.showColonyPanelWithCarrier(Colony, Unit)",7
"net.sf.freecol.client.control.InGameController.showEmigrationDialog(Player, boolean, int)",7
"net.sf.freecol.client.control.InGameController.showEventPanel(String, String, String)",7
"net.sf.freecol.client.control.InGameController.showInformationPanel(FreeColObject, String)",6
"net.sf.freecol.client.control.InGameController.showInformationPanel(FreeColObject, StringTemplate)",6
"net.sf.freecol.client.control.InGameController.showNamingDialog(StringTemplate, String, Unit, DialogHandler<String>)",8
"net.sf.freecol.client.control.InGameController.showNegotiationDialog(Unit, Settlement, DiplomaticTrade, StringTemplate, Direction)",11
net.sf.freecol.client.control.InGameController.showStatusPanel(String),5
net.sf.freecol.client.control.InGameController.sound(String),5
net.sf.freecol.client.control.InGameController.spySettlementHandler(Tile),5
"net.sf.freecol.client.control.InGameController.startIgnoringMessage(String, Turn)",6
net.sf.freecol.client.control.InGameController.stopIgnoringMessage(String),5
net.sf.freecol.client.control.InGameController.trainUnitInEurope(UnitType),8
net.sf.freecol.client.control.InGameController.unload(Unit),8
"net.sf.freecol.client.control.InGameController.unloadCargo(Goods, boolean)",12
"net.sf.freecol.client.control.InGameController.unloadUnitAtStop(Unit, LogBuilder)",7
net.sf.freecol.client.control.InGameController.updateActiveUnit(Tile),11
"net.sf.freecol.client.control.InGameController.updateGUI(Tile, boolean)",7
net.sf.freecol.client.control.InGameController.updateHandler(List<FreeColObject>),5
net.sf.freecol.client.control.InGameController.updateTradeRoute(TradeRoute),8
net.sf.freecol.client.control.InGameController.victory(Boolean),6
net.sf.freecol.client.control.InGameController.waitUnit(),7
"net.sf.freecol.client.control.InGameController.work(Unit, WorkLocation)",9
net.sf.freecol.client.control.MapEditorController.MapEditorController(FreeColClient),5
net.sf.freecol.client.control.MapEditorController.createMiniMapThumbNail(),12
net.sf.freecol.client.control.MapEditorController.getDefaultSpecification(),5
net.sf.freecol.client.control.MapEditorController.getMapTransform(),6
net.sf.freecol.client.control.MapEditorController.loadGame(),4
net.sf.freecol.client.control.MapEditorController.loadGame(File),5
net.sf.freecol.client.control.MapEditorController.newMap(),7
net.sf.freecol.client.control.MapEditorController.requireNativeNations(Game),5
net.sf.freecol.client.control.MapEditorController.saveMapEditorGame(),4
net.sf.freecol.client.control.MapEditorController.saveMapEditorGame(File),5
net.sf.freecol.client.control.MapEditorController.setMapTransform(MapTransform),6
net.sf.freecol.client.control.MapEditorController.startMapEditor(),6
net.sf.freecol.client.control.MapEditorController.transform(Tile),6
net.sf.freecol.client.control.MapTransform.getDescriptionPanel(),9
net.sf.freecol.client.control.MapTransform.setDescriptionPanel(JPanel),6
net.sf.freecol.client.control.MoveTest.tearDown(),0
net.sf.freecol.client.control.MoveTest.testSimpleMove(),0
net.sf.freecol.client.control.PreGameController.PreGameController(FreeColClient),5
net.sf.freecol.client.control.PreGameController.addPlayerHandler(List<Player>),5
"net.sf.freecol.client.control.PreGameController.chatHandler(String, String, Color, boolean)",8
"net.sf.freecol.client.control.PreGameController.errorHandler(StringTemplate, String)",6
"net.sf.freecol.client.control.PreGameController.logoutHandler(Player, LogoutReason)",6
"net.sf.freecol.client.control.PreGameController.readyHandler(Player, boolean)",6
net.sf.freecol.client.control.PreGameController.requestLaunch(),4
net.sf.freecol.client.control.PreGameController.sendChat(String),5
"net.sf.freecol.client.control.PreGameController.setAvailable(Nation, NationState)",6
"net.sf.freecol.client.control.PreGameController.setAvailableHandler(Nation, NationState)",6
"net.sf.freecol.client.control.PreGameController.setColor(Nation, Color)",6
"net.sf.freecol.client.control.PreGameController.setColorHandler(Nation, Color)",6
net.sf.freecol.client.control.PreGameController.setNation(Nation),5
net.sf.freecol.client.control.PreGameController.setNationType(NationType),5
net.sf.freecol.client.control.PreGameController.setNationTypeHandler(NationType),5
net.sf.freecol.client.control.PreGameController.setReady(boolean),6
net.sf.freecol.client.control.PreGameController.startGameHandler(),8
net.sf.freecol.client.control.PreGameController.startGameInternal(),6
net.sf.freecol.client.control.PreGameController.updateGameOptions(),4
net.sf.freecol.client.control.PreGameController.updateGameOptionsHandler(OptionGroup),5
net.sf.freecol.client.control.PreGameController.updateHandler(List<FreeColObject>),5
net.sf.freecol.client.control.PreGameController.updateMapGeneratorOptions(),4
net.sf.freecol.client.control.PreGameController.updateMapGeneratorOptionsHandler(OptionGroup),5
"net.sf.freecol.client.control.SoundController.SoundController(FreeColClient, boolean)",6
net.sf.freecol.client.control.SoundController.canPlaySound(),5
net.sf.freecol.client.control.SoundController.getSoundMixerLabelText(),7
"net.sf.freecol.client.control.SoundController.play(SoundPlayer, String)",0
net.sf.freecol.client.control.SoundController.playMusic(String),5
net.sf.freecol.client.control.SoundController.playSound(String),5
net.sf.freecol.client.control.SoundController.setDefaultPlaylist(List<File>),6
net.sf.freecol.client.gui.AllTests.suite(),0
"net.sf.freecol.client.gui.Canvas.Canvas(FreeColClient, GraphicsDevice, Dimension, MapViewer, MapControls)",9
"net.sf.freecol.client.gui.Canvas.addAsFrame(JComponent, boolean, PopupPosition, boolean)",11
"net.sf.freecol.client.gui.Canvas.addCentered(Component, Integer)",6
net.sf.freecol.client.gui.Canvas.addMapControls(),5
"net.sf.freecol.client.gui.Canvas.addToCanvas(Component, Integer)",6
"net.sf.freecol.client.gui.Canvas.addToLayer(Component, Integer)",6
"net.sf.freecol.client.gui.Canvas.adjustLocationForClearSpace(Point, int, int)",0
"net.sf.freecol.client.gui.Canvas.animationLabel(JLabel, boolean)",6
"net.sf.freecol.client.gui.Canvas.capSizeToMaximum(JInternalFrame, Dimension)",0
"net.sf.freecol.client.gui.Canvas.checkWindowed(GraphicsDevice, Dimension)",7
"net.sf.freecol.client.gui.Canvas.chooseLocation(Component, int, int, PopupPosition)",9
net.sf.freecol.client.gui.Canvas.closeMainPanel(),3
net.sf.freecol.client.gui.Canvas.closeMenus(),3
net.sf.freecol.client.gui.Canvas.closePanel(String),5
"net.sf.freecol.client.gui.Canvas.createFrame(JMenuBar, Rectangle)",7
net.sf.freecol.client.gui.Canvas.destroyFrame(),3
net.sf.freecol.client.gui.Canvas.dialogAdd(FreeColDialog<?>),5
net.sf.freecol.client.gui.Canvas.dialogRemove(FreeColDialog<?>),5
"net.sf.freecol.client.gui.Canvas.getClearSpace(int, int, int, int, int)",12
net.sf.freecol.client.gui.Canvas.getExistingFreeColDialog(Class<?>),6
net.sf.freecol.client.gui.Canvas.getExistingFreeColPanel(Class<T>),8
net.sf.freecol.client.gui.Canvas.getInternalFrame(Component),8
net.sf.freecol.client.gui.Canvas.getMatchingComponent(Predicate<Component>),6
net.sf.freecol.client.gui.Canvas.getParentFrame(),8
net.sf.freecol.client.gui.Canvas.getSavedPosition(Component),7
net.sf.freecol.client.gui.Canvas.getSavedSize(Component),7
net.sf.freecol.client.gui.Canvas.getShowingPanel(),6
net.sf.freecol.client.gui.Canvas.initializeInGame(),3
net.sf.freecol.client.gui.Canvas.isWindowed(),5
net.sf.freecol.client.gui.Canvas.mainTitle(),3
net.sf.freecol.client.gui.Canvas.mainTitleIfMainPanelIsAlreadyShowing(),0
net.sf.freecol.client.gui.Canvas.nothingShowing(),5
"net.sf.freecol.client.gui.Canvas.notifyClose(Component, JInternalFrame)",7
net.sf.freecol.client.gui.Canvas.paintComponent(Graphics),3
net.sf.freecol.client.gui.Canvas.paintJustTheMapImmediately(),0
"net.sf.freecol.client.gui.Canvas.playVideo(String, boolean, Runnable)",7
net.sf.freecol.client.gui.Canvas.prepareShowingMainMenu(),0
net.sf.freecol.client.gui.Canvas.quit(),3
net.sf.freecol.client.gui.Canvas.remove(Component),3
net.sf.freecol.client.gui.Canvas.removeFromCanvas(Component),6
net.sf.freecol.client.gui.Canvas.removeInGameComponents(),3
net.sf.freecol.client.gui.Canvas.removeKeyAndMouseListeners(),0
net.sf.freecol.client.gui.Canvas.removeMapControls(),5
net.sf.freecol.client.gui.Canvas.resetMenuBar(),3
"net.sf.freecol.client.gui.Canvas.restoreSavedSize(Component, Dimension)",9
"net.sf.freecol.client.gui.Canvas.saveInteger(String, String, int)",9
"net.sf.freecol.client.gui.Canvas.savePosition(Component, Point)",6
"net.sf.freecol.client.gui.Canvas.saveSize(Component, Dimension)",6
"net.sf.freecol.client.gui.Canvas.showFreeColDialog(FreeColDialog<T>, PopupPosition)",9
"net.sf.freecol.client.gui.Canvas.showFreeColPanel(FreeColPanel, PopupPosition, boolean)",9
net.sf.freecol.client.gui.Canvas.showMainPanel(),5
net.sf.freecol.client.gui.Canvas.showMapEditorTransformPanel(),3
net.sf.freecol.client.gui.Canvas.startMapEditorGUI(),3
net.sf.freecol.client.gui.Canvas.toggleFrame(),3
net.sf.freecol.client.gui.Canvas.toggleWindowed(),3
net.sf.freecol.client.gui.Canvas.updateFrameSizesAndPositions(Dimension),0
net.sf.freecol.client.gui.Canvas.updateMenuBar(),3
net.sf.freecol.client.gui.Canvas.updateRepaintTimer(boolean),6
net.sf.freecol.client.gui.Canvas.updateSize(),0
"net.sf.freecol.client.gui.Canvas.viewFreeColDialog(FreeColDialog<T>, PopupPosition)",7
"net.sf.freecol.client.gui.CanvasMapEditorMouseListener.CanvasMapEditorMouseListener(FreeColClient, Scrolling)",5
"net.sf.freecol.client.gui.CanvasMapEditorMouseListener.drawBox(JComponent, Point, Point)",7
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseClicked(MouseEvent),3
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseDragged(MouseEvent),3
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseEntered(MouseEvent),3
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseExited(MouseEvent),3
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseMoved(MouseEvent),3
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mousePressed(MouseEvent),3
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseReleased(MouseEvent),3
net.sf.freecol.client.gui.CanvasMouseListener.CanvasMouseListener(FreeColClient),5
net.sf.freecol.client.gui.CanvasMouseListener.mouseClicked(MouseEvent),3
net.sf.freecol.client.gui.CanvasMouseListener.mouseEntered(MouseEvent),3
net.sf.freecol.client.gui.CanvasMouseListener.mouseExited(MouseEvent),3
net.sf.freecol.client.gui.CanvasMouseListener.mousePressed(MouseEvent),3
net.sf.freecol.client.gui.CanvasMouseListener.mouseReleased(MouseEvent),3
"net.sf.freecol.client.gui.CanvasMouseMotionListener.CanvasMouseMotionListener(FreeColClient, Scrolling)",5
net.sf.freecol.client.gui.CanvasMouseMotionListener.mouseDragged(MouseEvent),3
net.sf.freecol.client.gui.CanvasMouseMotionListener.mouseMoved(MouseEvent),3
"net.sf.freecol.client.gui.ChoiceItem.ChoiceItem(String, T)",7
"net.sf.freecol.client.gui.ChoiceItem.ChoiceItem(String, T, boolean)",8
net.sf.freecol.client.gui.ChoiceItem.ChoiceItem(T),6
net.sf.freecol.client.gui.ChoiceItem.cancelOption(),5
net.sf.freecol.client.gui.ChoiceItem.compareTo(ChoiceItem<T>),3
net.sf.freecol.client.gui.ChoiceItem.defaultOption(),5
net.sf.freecol.client.gui.ChoiceItem.equals(Object),3
net.sf.freecol.client.gui.ChoiceItem.getChoice(),7
net.sf.freecol.client.gui.ChoiceItem.getIcon(),5
net.sf.freecol.client.gui.ChoiceItem.getObject(),5
net.sf.freecol.client.gui.ChoiceItem.hashCode(),3
net.sf.freecol.client.gui.ChoiceItem.isCancel(),5
net.sf.freecol.client.gui.ChoiceItem.isDefault(),5
net.sf.freecol.client.gui.ChoiceItem.isEnabled(),5
net.sf.freecol.client.gui.ChoiceItem.isOK(),5
net.sf.freecol.client.gui.ChoiceItem.okOption(),5
net.sf.freecol.client.gui.ChoiceItem.setEnabled(boolean),6
net.sf.freecol.client.gui.ChoiceItem.setIcon(ImageIcon),6
net.sf.freecol.client.gui.ChoiceItem.toString(),3
net.sf.freecol.client.gui.FontLibrary.createMainFont(String),7
"net.sf.freecol.client.gui.FontLibrary.displayTest(Font, String)",7
net.sf.freecol.client.gui.FontLibrary.getFontKey(FontType),6
net.sf.freecol.client.gui.FontLibrary.getFontScaling(),6
net.sf.freecol.client.gui.FontLibrary.getMainFont(),0
net.sf.freecol.client.gui.FontLibrary.getMainFontSize(),0
net.sf.freecol.client.gui.FontLibrary.getScaledFont(String),8
"net.sf.freecol.client.gui.FontLibrary.getScaledFont(String, String)",9
"net.sf.freecol.client.gui.FontLibrary.getScaledFont(String, float, String)",10
"net.sf.freecol.client.gui.FontLibrary.getScaledSize(Size, float)",7
net.sf.freecol.client.gui.FontLibrary.getUnscaledFont(String),6
"net.sf.freecol.client.gui.FontLibrary.getUnscaledFont(String, String)",21
net.sf.freecol.client.gui.FontLibrary.setMainFontSize(float),0
"net.sf.freecol.client.gui.FontLibrary.tryFont(FontType, String)",7
net.sf.freecol.client.gui.FontTest.testLogicalSerif(),0
net.sf.freecol.client.gui.FrameMotionListener.FrameMotionListener(JInternalFrame),5
net.sf.freecol.client.gui.FrameMotionListener.mouseDragged(MouseEvent),3
net.sf.freecol.client.gui.FrameMotionListener.mousePressed(MouseEvent),3
net.sf.freecol.client.gui.FrameMotionListener.mouseReleased(MouseEvent),3
"net.sf.freecol.client.gui.FreeColFrame.FreeColFrame(FreeColClient, GraphicsDevice, JMenuBar, boolean, Rectangle)",9
net.sf.freecol.client.gui.FreeColFrame.exitFullScreen(),0
net.sf.freecol.client.gui.FreeColFrame.getFrameName(),5
net.sf.freecol.client.gui.FreeColFrame.removeMenuBar(),0
net.sf.freecol.client.gui.FreeColFrame.resetMenuBar(),0
net.sf.freecol.client.gui.FreeColFrame.setMenuBar(FreeColMenuBar),0
net.sf.freecol.client.gui.FreeColFrame.updateMenuBar(),0
"net.sf.freecol.client.gui.FullScreenFrameListener.FullScreenFrameListener(FreeColClient, FreeColFrame)",6
net.sf.freecol.client.gui.FullScreenFrameListener.windowActivated(WindowEvent),5
net.sf.freecol.client.gui.FullScreenFrameListener.windowClosed(WindowEvent),5
net.sf.freecol.client.gui.FullScreenFrameListener.windowClosing(WindowEvent),5
net.sf.freecol.client.gui.FullScreenFrameListener.windowDeactivated(WindowEvent),5
net.sf.freecol.client.gui.FullScreenFrameListener.windowDeiconified(WindowEvent),5
net.sf.freecol.client.gui.FullScreenFrameListener.windowIconified(WindowEvent),5
net.sf.freecol.client.gui.FullScreenFrameListener.windowOpened(WindowEvent),5
net.sf.freecol.client.gui.GUI.GUI(FreeColClient),5
net.sf.freecol.client.gui.GUI.activateGotoPath(),5
"net.sf.freecol.client.gui.GUI.animateUnitAttack(Unit, Unit, Tile, Tile, boolean)",11
"net.sf.freecol.client.gui.GUI.animateUnitMove(Unit, Tile, Tile)",9
net.sf.freecol.client.gui.GUI.canGameChangingModsBeAdded(),3
net.sf.freecol.client.gui.GUI.canZoomInMap(),7
net.sf.freecol.client.gui.GUI.canZoomInMapControls(),7
net.sf.freecol.client.gui.GUI.canZoomOutMap(),7
net.sf.freecol.client.gui.GUI.canZoomOutMapControls(),7
net.sf.freecol.client.gui.GUI.changeView(),5
net.sf.freecol.client.gui.GUI.changeView(MapTransform),7
net.sf.freecol.client.gui.GUI.changeView(Tile),8
"net.sf.freecol.client.gui.GUI.changeView(Unit, boolean)",11
net.sf.freecol.client.gui.GUI.changeWindowedMode(),5
net.sf.freecol.client.gui.GUI.clearGotoPath(),5
"net.sf.freecol.client.gui.GUI.clickAt(int, int, int)",9
net.sf.freecol.client.gui.GUI.closeMainPanel(),5
net.sf.freecol.client.gui.GUI.closeMenus(),7
net.sf.freecol.client.gui.GUI.closePanel(String),7
net.sf.freecol.client.gui.GUI.closeStatusPanel(),6
"net.sf.freecol.client.gui.GUI.confirm(String, String, String)",8
"net.sf.freecol.client.gui.GUI.confirm(StringTemplate, String, String)",8
"net.sf.freecol.client.gui.GUI.confirm(Tile, StringTemplate, GoodsType, String, String)",10
"net.sf.freecol.client.gui.GUI.confirm(Tile, StringTemplate, ImageIcon, String, String)",10
"net.sf.freecol.client.gui.GUI.confirm(Tile, StringTemplate, Settlement, String, String)",10
"net.sf.freecol.client.gui.GUI.confirm(Tile, StringTemplate, Unit, String, String)",10
"net.sf.freecol.client.gui.GUI.confirmAbandonEducation(Unit, boolean)",8
net.sf.freecol.client.gui.GUI.confirmClearTradeRoute(Unit),7
"net.sf.freecol.client.gui.GUI.confirmEuropeanTribute(Unit, Colony, NationSummary)",9
"net.sf.freecol.client.gui.GUI.confirmHostileAction(Unit, Tile)",8
net.sf.freecol.client.gui.GUI.confirmLeaveColony(Unit),8
"net.sf.freecol.client.gui.GUI.confirmNativeTribute(Unit, IndianSettlement)",9
"net.sf.freecol.client.gui.GUI.confirmPreCombat(Unit, Tile)",8
net.sf.freecol.client.gui.GUI.confirmStopGame(),5
"net.sf.freecol.client.gui.GUI.createColonyTileImage(Tile, Colony)",0
"net.sf.freecol.client.gui.GUI.createTileImage(Tile, Player)",0
net.sf.freecol.client.gui.GUI.createTileImageWithBeachBorderAndItems(Tile),0
"net.sf.freecol.client.gui.GUI.displayChat(String, String, Color, boolean)",10
"net.sf.freecol.client.gui.GUI.displayColonyTiles(Graphics2D, Tile[][], Colony)",9
net.sf.freecol.client.gui.GUI.displayObject(FreeColObject),5
"net.sf.freecol.client.gui.GUI.displayStartChat(String, String, boolean)",9
net.sf.freecol.client.gui.GUI.emergencyPurge(),5
net.sf.freecol.client.gui.GUI.enableMapControls(boolean),7
net.sf.freecol.client.gui.GUI.getActiveUnit(),7
net.sf.freecol.client.gui.GUI.getArmedUnitSettlementChoice(Settlement),7
"net.sf.freecol.client.gui.GUI.getBoycottChoice(Goods, Europe)",8
"net.sf.freecol.client.gui.GUI.getBuyChoice(Unit, Settlement, Goods, int, boolean)",10
"net.sf.freecol.client.gui.GUI.getChoice(StringTemplate, String, List<ChoiceItem<T>>)",10
"net.sf.freecol.client.gui.GUI.getChoice(Tile, StringTemplate, GoodsType, String, List<ChoiceItem<T>>)",12
"net.sf.freecol.client.gui.GUI.getChoice(Tile, StringTemplate, ImageIcon, String, List<ChoiceItem<T>>)",12
"net.sf.freecol.client.gui.GUI.getChoice(Tile, StringTemplate, Nation, String, List<ChoiceItem<T>>)",12
"net.sf.freecol.client.gui.GUI.getChoice(Tile, StringTemplate, Settlement, String, List<ChoiceItem<T>>)",12
"net.sf.freecol.client.gui.GUI.getChoice(Tile, StringTemplate, Unit, String, List<ChoiceItem<T>>)",12
"net.sf.freecol.client.gui.GUI.getClaimChoice(Tile, Player, int, Player)",9
net.sf.freecol.client.gui.GUI.getFixedImageLibrary(),7
net.sf.freecol.client.gui.GUI.getFocus(),7
net.sf.freecol.client.gui.GUI.getFocusMapPoint(),6
"net.sf.freecol.client.gui.GUI.getIndianSettlementTradeChoice(Settlement, StringTemplate, boolean, boolean, boolean)",11
"net.sf.freecol.client.gui.GUI.getInput(Tile, StringTemplate, String, String, String)",10
net.sf.freecol.client.gui.GUI.getMapViewDimension(),0
"net.sf.freecol.client.gui.GUI.getMissionaryChoice(Unit, IndianSettlement, boolean, boolean)",11
"net.sf.freecol.client.gui.GUI.getNewColonyName(Player, Tile)",7
net.sf.freecol.client.gui.GUI.getScaledImageLibrary(),5
"net.sf.freecol.client.gui.GUI.getScoutForeignColonyChoice(Colony, Unit, boolean)",8
"net.sf.freecol.client.gui.GUI.getScoutIndianSettlementChoice(IndianSettlement, String)",8
"net.sf.freecol.client.gui.GUI.getScrollDirection(int, int, int, boolean)",10
net.sf.freecol.client.gui.GUI.getSelectedTile(),7
"net.sf.freecol.client.gui.GUI.getSellChoice(Unit, Settlement, Goods, int)",9
net.sf.freecol.client.gui.GUI.getSoundMixerLabelText(),7
net.sf.freecol.client.gui.GUI.getViewMode(),7
net.sf.freecol.client.gui.GUI.installLookAndFeel(String),8
net.sf.freecol.client.gui.GUI.invokeNowOrLater(Runnable),5
net.sf.freecol.client.gui.GUI.invokeNowOrWait(Runnable),5
net.sf.freecol.client.gui.GUI.isClientOptionsDialogShowing(),7
net.sf.freecol.client.gui.GUI.isGotoStarted(),7
net.sf.freecol.client.gui.GUI.isPanelShowing(),7
net.sf.freecol.client.gui.GUI.isWindowed(),7
net.sf.freecol.client.gui.GUI.miniMapToggleFogOfWarControls(),5
net.sf.freecol.client.gui.GUI.miniMapToggleViewControls(),5
net.sf.freecol.client.gui.GUI.paintImmediately(),6
net.sf.freecol.client.gui.GUI.performGoto(Tile),7
"net.sf.freecol.client.gui.GUI.performGoto(int, int)",8
net.sf.freecol.client.gui.GUI.playSound(String),5
"net.sf.freecol.client.gui.GUI.prepareDrag(int, int)",9
net.sf.freecol.client.gui.GUI.prepareShowingMainMenu(),3
net.sf.freecol.client.gui.GUI.quitGUI(),5
"net.sf.freecol.client.gui.GUI.reconnectGUI(Unit, Tile)",9
net.sf.freecol.client.gui.GUI.refresh(),9
net.sf.freecol.client.gui.GUI.refreshGuiUsingClientOptions(),3
net.sf.freecol.client.gui.GUI.refreshPlayersTable(),5
net.sf.freecol.client.gui.GUI.refreshTile(Tile),0
net.sf.freecol.client.gui.GUI.reloadResources(),3
net.sf.freecol.client.gui.GUI.removeComponent(Component),7
net.sf.freecol.client.gui.GUI.removeDialog(FreeColDialog<?>),7
net.sf.freecol.client.gui.GUI.removeInGameComponents(),6
net.sf.freecol.client.gui.GUI.removeTradeRoutePanel(FreeColPanel),8
net.sf.freecol.client.gui.GUI.repaint(),9
net.sf.freecol.client.gui.GUI.resetMapControls(),4
net.sf.freecol.client.gui.GUI.resetMenuBar(),4
net.sf.freecol.client.gui.GUI.resetScrollSpeed(),4
"net.sf.freecol.client.gui.GUI.restoreSavedSize(Component, Dimension)",12
"net.sf.freecol.client.gui.GUI.scrollMap(Direction, boolean)",8
net.sf.freecol.client.gui.GUI.setFocus(Tile),9
net.sf.freecol.client.gui.GUI.setFocusMapPoint(Point),8
net.sf.freecol.client.gui.GUI.setRangedAttackMode(boolean),6
net.sf.freecol.client.gui.GUI.setUnitPath(PathNode),7
net.sf.freecol.client.gui.GUI.showAboutPanel(),5
net.sf.freecol.client.gui.GUI.showBuildQueuePanel(Colony),6
"net.sf.freecol.client.gui.GUI.showCaptureGoodsDialog(Unit, List<Goods>, DialogHandler<List<Goods>>)",7
net.sf.freecol.client.gui.GUI.showChatPanel(),5
"net.sf.freecol.client.gui.GUI.showChooseFoundingFatherDialog(List<FoundingFather>, DialogHandler<FoundingFather>)",6
net.sf.freecol.client.gui.GUI.showClientOptionsDialog(),3
"net.sf.freecol.client.gui.GUI.showColonyPanel(Colony, Unit)",7
net.sf.freecol.client.gui.GUI.showColopediaPanel(String),6
net.sf.freecol.client.gui.GUI.showColorChooserPanel(ActionListener),6
net.sf.freecol.client.gui.GUI.showCompactLabourReport(),5
net.sf.freecol.client.gui.GUI.showCompactLabourReport(UnitData),6
net.sf.freecol.client.gui.GUI.showConfirmDeclarationDialog(),5
net.sf.freecol.client.gui.GUI.showDeclarationPanel(Runnable),6
net.sf.freecol.client.gui.GUI.showDifficultyDialog(),3
"net.sf.freecol.client.gui.GUI.showDifficultyDialog(Specification, OptionGroup, boolean, DialogHandler<OptionGroup>)",8
"net.sf.freecol.client.gui.GUI.showDumpCargoDialog(Unit, DialogHandler<List<Goods>>)",6
net.sf.freecol.client.gui.GUI.showEditOptionDialog(Option),6
net.sf.freecol.client.gui.GUI.showEditSettlementDialog(IndianSettlement),6
"net.sf.freecol.client.gui.GUI.showEmigrationDialog(Player, boolean, DialogHandler<Integer>)",7
"net.sf.freecol.client.gui.GUI.showEndTurnDialog(List<Unit>, DialogHandler<Boolean>)",6
"net.sf.freecol.client.gui.GUI.showErrorPanel(Exception, StringTemplate)",8
"net.sf.freecol.client.gui.GUI.showErrorPanel(String, Runnable)",7
net.sf.freecol.client.gui.GUI.showErrorPanel(StringTemplate),6
"net.sf.freecol.client.gui.GUI.showErrorPanel(StringTemplate, String)",8
"net.sf.freecol.client.gui.GUI.showErrorPanel(StringTemplate, String, Runnable)",9
net.sf.freecol.client.gui.GUI.showEuropePanel(),5
"net.sf.freecol.client.gui.GUI.showEventPanel(String, String, String)",8
net.sf.freecol.client.gui.GUI.showFindSettlementPanel(),5
"net.sf.freecol.client.gui.GUI.showFirstContactDialog(Player, Player, Tile, int, DialogHandler<Boolean>)",10
"net.sf.freecol.client.gui.GUI.showGameOptionsDialog(boolean, DialogHandler<OptionGroup>)",6
"net.sf.freecol.client.gui.GUI.showHighScoresPanel(String, List<HighScore>)",7
net.sf.freecol.client.gui.GUI.showIndianSettlementPanel(IndianSettlement),6
"net.sf.freecol.client.gui.GUI.showInformationPanel(FreeColObject, String)",7
"net.sf.freecol.client.gui.GUI.showInformationPanel(FreeColObject, StringTemplate)",7
net.sf.freecol.client.gui.GUI.showInformationPanel(String),6
net.sf.freecol.client.gui.GUI.showInformationPanel(StringTemplate),6
"net.sf.freecol.client.gui.GUI.showLoadDialog(File, String...)",7
"net.sf.freecol.client.gui.GUI.showLoadSaveFileDialog(File, String...)",7
"net.sf.freecol.client.gui.GUI.showLoadingSavegameDialog(boolean, boolean)",7
net.sf.freecol.client.gui.GUI.showLogFilePanel(),5
net.sf.freecol.client.gui.GUI.showMainPanel(String),6
net.sf.freecol.client.gui.GUI.showMainTitle(),3
"net.sf.freecol.client.gui.GUI.showMapGeneratorOptionsDialog(boolean, DialogHandler<OptionGroup>)",5
net.sf.freecol.client.gui.GUI.showMapSizeDialog(),5
net.sf.freecol.client.gui.GUI.showModelMessages(List<ModelMessage>),6
"net.sf.freecol.client.gui.GUI.showMonarchDialog(MonarchAction, StringTemplate, String, DialogHandler<Boolean>)",9
"net.sf.freecol.client.gui.GUI.showNamingDialog(StringTemplate, String, Unit, DialogHandler<String>)",8
"net.sf.freecol.client.gui.GUI.showNativeDemandDialog(Unit, Colony, GoodsType, int, DialogHandler<Boolean>)",9
"net.sf.freecol.client.gui.GUI.showNegotiationDialog(FreeColGameObject, FreeColGameObject, DiplomaticTrade, StringTemplate)",10
net.sf.freecol.client.gui.GUI.showNewPanel(),3
net.sf.freecol.client.gui.GUI.showNewPanel(Specification),6
"net.sf.freecol.client.gui.GUI.showOpeningVideo(String, Runnable)",8
net.sf.freecol.client.gui.GUI.showParametersDialog(),5
"net.sf.freecol.client.gui.GUI.showPopupMenu(JPopupMenu, int, int)",9
"net.sf.freecol.client.gui.GUI.showPreCombatDialog(Unit, FreeColGameObject, Tile)",8
net.sf.freecol.client.gui.GUI.showPurchasePanel(),5
net.sf.freecol.client.gui.GUI.showRecruitPanel(),5
net.sf.freecol.client.gui.GUI.showReportCargoPanel(),5
net.sf.freecol.client.gui.GUI.showReportColonyPanel(),5
net.sf.freecol.client.gui.GUI.showReportContinentalCongressPanel(),5
net.sf.freecol.client.gui.GUI.showReportEducationPanel(),5
net.sf.freecol.client.gui.GUI.showReportExplorationPanel(),5
net.sf.freecol.client.gui.GUI.showReportForeignAffairPanel(),5
net.sf.freecol.client.gui.GUI.showReportHistoryPanel(),5
net.sf.freecol.client.gui.GUI.showReportIndianPanel(),5
"net.sf.freecol.client.gui.GUI.showReportLabourDetailPanel(UnitType, Map<UnitType, Map<Location, Integer>>, TypeCountMap<UnitType>, List<Colony>)",9
net.sf.freecol.client.gui.GUI.showReportLabourPanel(),5
net.sf.freecol.client.gui.GUI.showReportMilitaryPanel(),5
net.sf.freecol.client.gui.GUI.showReportNavalPanel(),5
net.sf.freecol.client.gui.GUI.showReportProductionPanel(),5
net.sf.freecol.client.gui.GUI.showReportReligiousPanel(),5
net.sf.freecol.client.gui.GUI.showReportRequirementsPanel(),5
net.sf.freecol.client.gui.GUI.showReportTradePanel(),5
net.sf.freecol.client.gui.GUI.showReportTurnPanel(List<ModelMessage>),6
net.sf.freecol.client.gui.GUI.showRiverStyleDialog(List<String>),6
"net.sf.freecol.client.gui.GUI.showSaveDialog(File, String)",7
net.sf.freecol.client.gui.GUI.showScaleMapSizeDialog(),5
"net.sf.freecol.client.gui.GUI.showSelectAmountDialog(GoodsType, int, int, boolean)",9
net.sf.freecol.client.gui.GUI.showSelectDestinationDialog(Unit),7
"net.sf.freecol.client.gui.GUI.showSelectTributeAmountDialog(StringTemplate, int)",8
net.sf.freecol.client.gui.GUI.showServerListPanel(List<ServerInfo>),7
"net.sf.freecol.client.gui.GUI.showStartGamePanel(Game, Player, boolean)",8
"net.sf.freecol.client.gui.GUI.showStatisticsPanel(Map<String, String>, Map<String, String>)",7
net.sf.freecol.client.gui.GUI.showStatusPanel(String),6
net.sf.freecol.client.gui.GUI.showTilePanel(Tile),6
net.sf.freecol.client.gui.GUI.showTilePopup(Tile),5
net.sf.freecol.client.gui.GUI.showTradeRouteInputPanel(TradeRoute),6
net.sf.freecol.client.gui.GUI.showTradeRoutePanel(Unit),6
net.sf.freecol.client.gui.GUI.showTrainPanel(),5
net.sf.freecol.client.gui.GUI.showVictoryDialog(DialogHandler<Boolean>),5
"net.sf.freecol.client.gui.GUI.showWarehouseDialog(Colony, DialogHandler<Boolean>)",8
net.sf.freecol.client.gui.GUI.showWorkProductionPanel(Unit),6
net.sf.freecol.client.gui.GUI.startGUI(Dimension),7
net.sf.freecol.client.gui.GUI.startMapEditorGUI(),5
net.sf.freecol.client.gui.GUI.stopMapAsyncPainter(),5
"net.sf.freecol.client.gui.GUI.tileAt(int, int)",7
net.sf.freecol.client.gui.GUI.toggleRangedAttackMode(),5
net.sf.freecol.client.gui.GUI.traverseGotoPath(),5
net.sf.freecol.client.gui.GUI.updateEuropeanSubpanels(),5
"net.sf.freecol.client.gui.GUI.updateGoto(int, int, boolean)",9
net.sf.freecol.client.gui.GUI.updateMapControls(),6
net.sf.freecol.client.gui.GUI.updateMenuBar(),6
net.sf.freecol.client.gui.GUI.useMapAsyncPainter(),10
net.sf.freecol.client.gui.GUI.zoomInMap(),5
net.sf.freecol.client.gui.GUI.zoomInMapControls(),5
net.sf.freecol.client.gui.GUI.zoomOutMap(),5
net.sf.freecol.client.gui.GUI.zoomOutMapControls(),5
net.sf.freecol.client.gui.GrayLayer.GrayLayer(FreeColClient),5
net.sf.freecol.client.gui.GrayLayer.paintComponent(Graphics),6
net.sf.freecol.client.gui.GrayLayer.setPlayer(Player),6
net.sf.freecol.client.gui.ImageLibrary.ImageLibrary(ImageCache),5
"net.sf.freecol.client.gui.ImageLibrary.ImageLibrary(float, ImageCache)",14
net.sf.freecol.client.gui.ImageLibrary.PathType.getImageKey(),0
net.sf.freecol.client.gui.ImageLibrary.PathType.getKey(),5
net.sf.freecol.client.gui.ImageLibrary.PathType.getNextTurnImageKey(),0
net.sf.freecol.client.gui.ImageLibrary.PathType.getPathType(Unit),6
net.sf.freecol.client.gui.ImageLibrary.changeScaleFactor(float),7
"net.sf.freecol.client.gui.ImageLibrary.createChip(Graphics2D, String, Color, Color, double, Color, Color, ...)",13
"net.sf.freecol.client.gui.ImageLibrary.createStringImage(String, Color, Font, FontMetrics)",9
net.sf.freecol.client.gui.ImageLibrary.determineInformationPanelSkinKey(Player),0
"net.sf.freecol.client.gui.ImageLibrary.getAboveTileImageInternal(TileType, int, Dimension)",9
"net.sf.freecol.client.gui.ImageLibrary.getAlarmChip(Graphics2D, IndianSettlement, Player)",10
"net.sf.freecol.client.gui.ImageLibrary.getAnimatedScaledRiverDeltaTerrainImage(Direction, long)",7
"net.sf.freecol.client.gui.ImageLibrary.getAnimatedScaledRiverTerrainImage(Tile, long)",7
"net.sf.freecol.client.gui.ImageLibrary.getAnimatedScaledTerrainImage(TileType, long)",0
"net.sf.freecol.client.gui.ImageLibrary.getAnimatedScaledWaterAndBeachTerrainImage(TileType, List<Direction>, long)",8
"net.sf.freecol.client.gui.ImageLibrary.getBaseTileTransitionImage(Tile, Direction, boolean, boolean)",12
net.sf.freecol.client.gui.ImageLibrary.getBeachCenterImageResource(),0
"net.sf.freecol.client.gui.ImageLibrary.getBeachCornerImage(int, int, int)",8
"net.sf.freecol.client.gui.ImageLibrary.getBeachEdgeImage(int, int, int)",8
"net.sf.freecol.client.gui.ImageLibrary.getBorderImage(TileType, Direction, int, int)",9
net.sf.freecol.client.gui.ImageLibrary.getBrightPanelBackground(),0
"net.sf.freecol.client.gui.ImageLibrary.getBuildableTypeImage(BuildableType, Dimension)",0
"net.sf.freecol.client.gui.ImageLibrary.getBuildingTypeImage(BuildingType, Dimension)",0
net.sf.freecol.client.gui.ImageLibrary.getBuildingTypeKey(BuildingType),0
net.sf.freecol.client.gui.ImageLibrary.getButtonBackground(),0
net.sf.freecol.client.gui.ImageLibrary.getButtonImages(String),6
net.sf.freecol.client.gui.ImageLibrary.getCanvasBackgroundImage(),0
net.sf.freecol.client.gui.ImageLibrary.getColopediaCellImage(boolean),0
net.sf.freecol.client.gui.ImageLibrary.getColopediaConceptImage(),0
net.sf.freecol.client.gui.ImageLibrary.getColor(String),6
"net.sf.freecol.client.gui.ImageLibrary.getColor(String, Color)",8
net.sf.freecol.client.gui.ImageLibrary.getColorCellRendererBackground(),0
net.sf.freecol.client.gui.ImageLibrary.getCompassRose(),0
net.sf.freecol.client.gui.ImageLibrary.getCursor(),5
"net.sf.freecol.client.gui.ImageLibrary.getForestCornerImage(TileType, Direction)",0
"net.sf.freecol.client.gui.ImageLibrary.getForestImage(TileType, Dimension)",0
"net.sf.freecol.client.gui.ImageLibrary.getForestImageInternal(TileType, TileImprovementStyle, Dimension)",8
net.sf.freecol.client.gui.ImageLibrary.getForestedTileSize(),5
"net.sf.freecol.client.gui.ImageLibrary.getFoundingFatherImage(FoundingFather, boolean)",7
"net.sf.freecol.client.gui.ImageLibrary.getGoodsColor(GoodsType, int, Location)",9
"net.sf.freecol.client.gui.ImageLibrary.getGoodsTypeImage(GoodsType, Dimension)",0
net.sf.freecol.client.gui.ImageLibrary.getGoodsTypeKey(GoodsType),0
"net.sf.freecol.client.gui.ImageLibrary.getIndianSettlementChip(Graphics2D, IndianSettlement)",7
net.sf.freecol.client.gui.ImageLibrary.getInformationPanelSkin(Player),0
net.sf.freecol.client.gui.ImageLibrary.getInformationPanelSkinTopInset(Player),0
net.sf.freecol.client.gui.ImageLibrary.getLCRImage(Dimension),0
net.sf.freecol.client.gui.ImageLibrary.getLibertyImage(),0
net.sf.freecol.client.gui.ImageLibrary.getListBackground(),0
net.sf.freecol.client.gui.ImageLibrary.getLockLabel(),0
net.sf.freecol.client.gui.ImageLibrary.getMeetingImage(Player),0
net.sf.freecol.client.gui.ImageLibrary.getMenuBackground(),0
net.sf.freecol.client.gui.ImageLibrary.getMenuBarBackground(),0
net.sf.freecol.client.gui.ImageLibrary.getMercenaryLeaderKey(int),0
net.sf.freecol.client.gui.ImageLibrary.getMiniMapBackground(),0
net.sf.freecol.client.gui.ImageLibrary.getMiniMapSkin(),0
net.sf.freecol.client.gui.ImageLibrary.getMinimapBackgroundColor(),0
net.sf.freecol.client.gui.ImageLibrary.getMinimapBorderColor(),0
net.sf.freecol.client.gui.ImageLibrary.getMinimapEconomicColor(TileType),0
net.sf.freecol.client.gui.ImageLibrary.getMinimapPoliticsColor(TileType),0
"net.sf.freecol.client.gui.ImageLibrary.getMissionChip(Graphics2D, Player, boolean)",8
net.sf.freecol.client.gui.ImageLibrary.getMonarchImage(Nation),6
net.sf.freecol.client.gui.ImageLibrary.getMonarchImage(String),9
net.sf.freecol.client.gui.ImageLibrary.getMonarchKey(String),0
"net.sf.freecol.client.gui.ImageLibrary.getNationImage(Nation, Dimension)",0
"net.sf.freecol.client.gui.ImageLibrary.getNationImage(Nation, float)",0
net.sf.freecol.client.gui.ImageLibrary.getNationKey(Nation),0
net.sf.freecol.client.gui.ImageLibrary.getObjectImage(FreeColObject),8
"net.sf.freecol.client.gui.ImageLibrary.getObjectImage(FreeColObject, Dimension)",9
net.sf.freecol.client.gui.ImageLibrary.getObjectImageIcon(FreeColObject),6
"net.sf.freecol.client.gui.ImageLibrary.getObjectImageInternal(FreeColObject, Dimension)",7
"net.sf.freecol.client.gui.ImageLibrary.getOccupationIndicatorChip(Graphics2D, Unit, String)",9
net.sf.freecol.client.gui.ImageLibrary.getOptionPaneBackground(),0
"net.sf.freecol.client.gui.ImageLibrary.getOverlayImageInternal(TileType, int, Dimension)",8
net.sf.freecol.client.gui.ImageLibrary.getPanelBackground(),5
net.sf.freecol.client.gui.ImageLibrary.getPanelBackground(Class<?>),7
net.sf.freecol.client.gui.ImageLibrary.getPathImage(PathType),6
net.sf.freecol.client.gui.ImageLibrary.getPathImage(Unit),6
net.sf.freecol.client.gui.ImageLibrary.getPathNextTurnImage(PathType),6
net.sf.freecol.client.gui.ImageLibrary.getPathNextTurnImage(Unit),6
net.sf.freecol.client.gui.ImageLibrary.getPlaceholderImage(),5
net.sf.freecol.client.gui.ImageLibrary.getPopupMenuBackground(),0
net.sf.freecol.client.gui.ImageLibrary.getProgressBarBackground(),0
net.sf.freecol.client.gui.ImageLibrary.getRangedTargetCrosshair(),0
"net.sf.freecol.client.gui.ImageLibrary.getResourceTypeImage(ResourceType, Dimension, boolean)",0
"net.sf.freecol.client.gui.ImageLibrary.getResourceTypeImage(ResourceType, float, boolean)",0
net.sf.freecol.client.gui.ImageLibrary.getResourceTypeKey(ResourceType),0
"net.sf.freecol.client.gui.ImageLibrary.getRiverImage(String, Dimension)",0
"net.sf.freecol.client.gui.ImageLibrary.getRiverImageInternal(String, Dimension)",7
"net.sf.freecol.client.gui.ImageLibrary.getRiverMouthImage(Direction, int, int, int)",11
net.sf.freecol.client.gui.ImageLibrary.getRiverStyleKey(String),0
net.sf.freecol.client.gui.ImageLibrary.getRiverStyleKeys(boolean),6
net.sf.freecol.client.gui.ImageLibrary.getRoadColor(),5
"net.sf.freecol.client.gui.ImageLibrary.getSZA(String, float)",0
net.sf.freecol.client.gui.ImageLibrary.getScaleFactor(),8
net.sf.freecol.client.gui.ImageLibrary.getScaledAboveTileImage(Tile),0
net.sf.freecol.client.gui.ImageLibrary.getScaledBuildingImage(Building),0
"net.sf.freecol.client.gui.ImageLibrary.getScaledBuildingTypeImage(BuildingType, Player, float)",0
"net.sf.freecol.client.gui.ImageLibrary.getScaledBuildingTypeImage(BuildingType, float)",0
"net.sf.freecol.client.gui.ImageLibrary.getScaledFont(String, String)",14
net.sf.freecol.client.gui.ImageLibrary.getScaledForestImage(TileType),0
"net.sf.freecol.client.gui.ImageLibrary.getScaledForestImage(TileType, TileImprovementStyle)",0
net.sf.freecol.client.gui.ImageLibrary.getScaledGoodsTypeImage(GoodsType),0
net.sf.freecol.client.gui.ImageLibrary.getScaledImage(String),6
net.sf.freecol.client.gui.ImageLibrary.getScaledNationImage(Nation),0
net.sf.freecol.client.gui.ImageLibrary.getScaledOverlayImage(Tile),0
net.sf.freecol.client.gui.ImageLibrary.getScaledResourceImage(Resource),0
net.sf.freecol.client.gui.ImageLibrary.getScaledResourceTypeImage(ResourceType),0
net.sf.freecol.client.gui.ImageLibrary.getScaledRiverImage(String),0
"net.sf.freecol.client.gui.ImageLibrary.getScaledRiverImage(String, float)",7
net.sf.freecol.client.gui.ImageLibrary.getScaledRiverImage(TileImprovementStyle),6
net.sf.freecol.client.gui.ImageLibrary.getScaledSettlementImage(Settlement),6
net.sf.freecol.client.gui.ImageLibrary.getScaledSettlementTypeImage(SettlementType),7
"net.sf.freecol.client.gui.ImageLibrary.getScaledTerrainImage(TileType, int, int)",0
net.sf.freecol.client.gui.ImageLibrary.getScaledUnitImage(Unit),0
"net.sf.freecol.client.gui.ImageLibrary.getScaledUnitImage(Unit, boolean)",0
net.sf.freecol.client.gui.ImageLibrary.getScaledUnitTypeImage(UnitType),0
"net.sf.freecol.client.gui.ImageLibrary.getSettlementImage(Settlement, Dimension)",0
"net.sf.freecol.client.gui.ImageLibrary.getSettlementImage(Settlement, float)",7
net.sf.freecol.client.gui.ImageLibrary.getSettlementKey(Settlement),6
"net.sf.freecol.client.gui.ImageLibrary.getSettlementTypeImage(SettlementType, Dimension)",0
"net.sf.freecol.client.gui.ImageLibrary.getSettlementTypeImage(SettlementType, float)",0
net.sf.freecol.client.gui.ImageLibrary.getSettlementTypeKey(SettlementType),0
"net.sf.freecol.client.gui.ImageLibrary.getSizedImage(String, Dimension)",7
"net.sf.freecol.client.gui.ImageLibrary.getSizedOverlayImage(TileType, Dimension)",0
"net.sf.freecol.client.gui.ImageLibrary.getSmallBuildableTypeImage(BuildableType, Player)",0
net.sf.freecol.client.gui.ImageLibrary.getSmallBuildingImage(Building),0
net.sf.freecol.client.gui.ImageLibrary.getSmallGoodsTypeImage(GoodsType),0
net.sf.freecol.client.gui.ImageLibrary.getSmallNationImage(Nation),0
net.sf.freecol.client.gui.ImageLibrary.getSmallResourceTypeImage(ResourceType),0
net.sf.freecol.client.gui.ImageLibrary.getSmallSettlementImage(Settlement),0
net.sf.freecol.client.gui.ImageLibrary.getSmallUnitImage(Unit),0
"net.sf.freecol.client.gui.ImageLibrary.getSmallUnitImage(Unit, boolean)",0
net.sf.freecol.client.gui.ImageLibrary.getSmallUnitTypeImage(UnitType),0
"net.sf.freecol.client.gui.ImageLibrary.getSmallUnitTypeImage(UnitType, String, boolean)",0
"net.sf.freecol.client.gui.ImageLibrary.getSmallUnitTypeImage(UnitType, boolean)",0
net.sf.freecol.client.gui.ImageLibrary.getSmallerGoodsTypeImage(GoodsType),0
net.sf.freecol.client.gui.ImageLibrary.getSmallerNationImage(Nation),0
net.sf.freecol.client.gui.ImageLibrary.getSmallerRiverImage(String),0
net.sf.freecol.client.gui.ImageLibrary.getSmallerSettlementImage(Settlement),0
net.sf.freecol.client.gui.ImageLibrary.getSmallerSettlementTypeImage(SettlementType),0
net.sf.freecol.client.gui.ImageLibrary.getSmallerUnitImage(Unit),0
net.sf.freecol.client.gui.ImageLibrary.getSmallerUnitTypeImage(UnitType),0
"net.sf.freecol.client.gui.ImageLibrary.getStringImage(Graphics, String, Color, Font)",10
"net.sf.freecol.client.gui.ImageLibrary.getTerrainImage(TileType, int, int, Dimension)",0
"net.sf.freecol.client.gui.ImageLibrary.getTerrainImageInternal(TileType, int, int, Dimension)",11
net.sf.freecol.client.gui.ImageLibrary.getTerrainImageKey(TileType),0
net.sf.freecol.client.gui.ImageLibrary.getTerrainMask(Direction),0
net.sf.freecol.client.gui.ImageLibrary.getTerrainMaskKey(Direction),0
net.sf.freecol.client.gui.ImageLibrary.getTerrainMaskResource(Direction),0
net.sf.freecol.client.gui.ImageLibrary.getTextAreaBackground(),0
net.sf.freecol.client.gui.ImageLibrary.getTextFieldBackground(),0
"net.sf.freecol.client.gui.ImageLibrary.getTileImageWithOverlayAndForest(TileType, Dimension)",9
net.sf.freecol.client.gui.ImageLibrary.getTileImprovementImage(String),6
net.sf.freecol.client.gui.ImageLibrary.getTileSize(),5
net.sf.freecol.client.gui.ImageLibrary.getTinyUnitImage(Unit),0
net.sf.freecol.client.gui.ImageLibrary.getTinyUnitTypeImage(UnitType),0
"net.sf.freecol.client.gui.ImageLibrary.getTinyUnitTypeImage(UnitType, boolean)",0
net.sf.freecol.client.gui.ImageLibrary.getToolTipBackground(),0
"net.sf.freecol.client.gui.ImageLibrary.getUnitImage(Unit, boolean, float)",0
"net.sf.freecol.client.gui.ImageLibrary.getUnitTypeImage(UnitType, Dimension)",0
"net.sf.freecol.client.gui.ImageLibrary.getUnitTypeImage(UnitType, Player, String, boolean, boolean, float)",11
"net.sf.freecol.client.gui.ImageLibrary.getUnitTypeImage(UnitType, String, boolean, Dimension)",0
"net.sf.freecol.client.gui.ImageLibrary.getUnitTypeImage(UnitType, float)",0
"net.sf.freecol.client.gui.ImageLibrary.getUnitTypeImageKey(UnitType, Player, String, boolean)",9
net.sf.freecol.client.gui.ImageLibrary.getUnscaledImage(String),10
net.sf.freecol.client.gui.ImageLibrary.getUnscaledSmallerNationImage(Nation),0
net.sf.freecol.client.gui.ImageLibrary.getVideo(String),0
net.sf.freecol.client.gui.ImageLibrary.makeForegroundColor(Color),9
net.sf.freecol.client.gui.ImageLibrary.makeStringBorderColor(Color),7
net.sf.freecol.client.gui.ImageLibrary.scale(Dimension),6
"net.sf.freecol.client.gui.ImageLibrary.scale(Dimension, float)",7
"net.sf.freecol.client.gui.ImageLibrary.scaleDimension(Dimension, float)",7
net.sf.freecol.client.gui.ImageLibrary.scaleInt(int),6
"net.sf.freecol.client.gui.ImageLibrary.variationSeedUsing(int, int)",10
"net.sf.freecol.client.gui.LoadingSavegameInfo.LoadingSavegameInfo(boolean, InetAddress, int, String, boolean)",0
net.sf.freecol.client.gui.LoadingSavegameInfo.getAddress(),5
net.sf.freecol.client.gui.LoadingSavegameInfo.getPort(),5
net.sf.freecol.client.gui.LoadingSavegameInfo.getServerName(),5
net.sf.freecol.client.gui.LoadingSavegameInfo.isPublicServer(),5
net.sf.freecol.client.gui.LoadingSavegameInfo.isSinglePlayer(),5
net.sf.freecol.client.gui.ModifierFormat.format(float),0
net.sf.freecol.client.gui.ModifierFormat.getFeatureAsString(Feature),0
net.sf.freecol.client.gui.ModifierFormat.getModifierAsString(Modifier),0
"net.sf.freecol.client.gui.ModifierFormat.getModifierLabels(Modifier, FreeColSpecObjectType, Turn)",0
net.sf.freecol.client.gui.ModifierFormat.getModifierStrings(Modifier),0
"net.sf.freecol.client.gui.ModifierFormat.getModifierStrings(float, ModifierType)",0
net.sf.freecol.client.gui.ModifierFormat.getSourceName(FreeColObject),0
net.sf.freecol.client.gui.ModifierFormat.getUnknownValue(),0
net.sf.freecol.client.gui.ScrollThread.ScrollThread(FreeColClient),5
net.sf.freecol.client.gui.ScrollThread.abort(),0
net.sf.freecol.client.gui.ScrollThread.isAborted(),0
net.sf.freecol.client.gui.ScrollThread.normalScrolling(GUI),0
net.sf.freecol.client.gui.ScrollThread.run(),4
net.sf.freecol.client.gui.ScrollThread.setDirection(Direction),6
"net.sf.freecol.client.gui.Scrolling.Scrolling(FreeColClient, Canvas)",0
net.sf.freecol.client.gui.Scrolling.getRootComponent(),0
"net.sf.freecol.client.gui.Scrolling.getScrollDirection(int, int, int)",9
net.sf.freecol.client.gui.Scrolling.isAsyncPainterEnabled(),0
net.sf.freecol.client.gui.Scrolling.performAutoScrollIfActive(MouseEvent),5
net.sf.freecol.client.gui.Scrolling.performDragScrollIfActive(MouseEvent),5
"net.sf.freecol.client.gui.Scrolling.scroll(MouseEvent, int)",6
net.sf.freecol.client.gui.Scrolling.stopScrollIfScrollIsActive(),3
"net.sf.freecol.client.gui.Size.Size(float, float)",0
net.sf.freecol.client.gui.Size.down(),0
net.sf.freecol.client.gui.Size.forFont(),0
net.sf.freecol.client.gui.Size.forImage(),0
net.sf.freecol.client.gui.Size.scaled(float),0
net.sf.freecol.client.gui.Size.up(),0
"net.sf.freecol.client.gui.SplashScreen.SplashScreen(GraphicsDevice, InputStream)",7
net.sf.freecol.client.gui.SwingGUI.SwingGUI(FreeColClient),5
net.sf.freecol.client.gui.SwingGUI.activateGotoPath(),3
"net.sf.freecol.client.gui.SwingGUI.animate(Animation, JLabel)",6
"net.sf.freecol.client.gui.SwingGUI.animateUnitAttack(Unit, Unit, Tile, Tile, boolean)",3
"net.sf.freecol.client.gui.SwingGUI.animateUnitMove(Unit, Tile, Tile)",3
net.sf.freecol.client.gui.SwingGUI.animations(List<Animation>),5
net.sf.freecol.client.gui.SwingGUI.canGameChangingModsBeAdded(),3
net.sf.freecol.client.gui.SwingGUI.canZoomInMap(),3
net.sf.freecol.client.gui.SwingGUI.canZoomInMapControls(),3
net.sf.freecol.client.gui.SwingGUI.canZoomOutMap(),3
net.sf.freecol.client.gui.SwingGUI.canZoomOutMapControls(),3
net.sf.freecol.client.gui.SwingGUI.changeActiveUnit(Unit),8
net.sf.freecol.client.gui.SwingGUI.changeDone(boolean),5
net.sf.freecol.client.gui.SwingGUI.changeMapScale(float),0
"net.sf.freecol.client.gui.SwingGUI.changeSelectedTile(Tile, boolean)",13
net.sf.freecol.client.gui.SwingGUI.changeView(),3
net.sf.freecol.client.gui.SwingGUI.changeView(MapTransform),3
net.sf.freecol.client.gui.SwingGUI.changeView(Tile),3
"net.sf.freecol.client.gui.SwingGUI.changeView(Unit, boolean)",3
net.sf.freecol.client.gui.SwingGUI.changeViewMode(ViewMode),10
net.sf.freecol.client.gui.SwingGUI.changeWindowedMode(),3
net.sf.freecol.client.gui.SwingGUI.clearDrag(),0
net.sf.freecol.client.gui.SwingGUI.clearGotoPath(),3
"net.sf.freecol.client.gui.SwingGUI.clickAt(int, int, int)",3
net.sf.freecol.client.gui.SwingGUI.closeMainPanel(),3
net.sf.freecol.client.gui.SwingGUI.closeMenus(),3
net.sf.freecol.client.gui.SwingGUI.closePanel(String),3
net.sf.freecol.client.gui.SwingGUI.closeStatusPanel(),3
net.sf.freecol.client.gui.SwingGUI.configureMigLayout(float),0
"net.sf.freecol.client.gui.SwingGUI.confirm(Tile, StringTemplate, ImageIcon, String, String)",3
"net.sf.freecol.client.gui.SwingGUI.createColonyTileImage(Tile, Colony)",3
"net.sf.freecol.client.gui.SwingGUI.createTileImage(Tile, Player)",3
net.sf.freecol.client.gui.SwingGUI.createTileImageWithBeachBorderAndItems(Tile),3
net.sf.freecol.client.gui.SwingGUI.determineMainFontSizeUsingClientOptions(int),0
net.sf.freecol.client.gui.SwingGUI.determineScaleFactorUsingClientOptions(int),0
"net.sf.freecol.client.gui.SwingGUI.displayChat(String, String, Color, boolean)",3
"net.sf.freecol.client.gui.SwingGUI.displayColonyTiles(Graphics2D, Tile[][], Colony)",3
net.sf.freecol.client.gui.SwingGUI.displayObject(FreeColObject),3
"net.sf.freecol.client.gui.SwingGUI.displayStartChat(String, String, boolean)",3
net.sf.freecol.client.gui.SwingGUI.emergencyPurge(),3
net.sf.freecol.client.gui.SwingGUI.enableMapControls(boolean),3
net.sf.freecol.client.gui.SwingGUI.getActiveUnit(),3
"net.sf.freecol.client.gui.SwingGUI.getChoice(Tile, StringTemplate, ImageIcon, String, List<ChoiceItem<T>>)",3
net.sf.freecol.client.gui.SwingGUI.getDragPoint(),5
net.sf.freecol.client.gui.SwingGUI.getFixedImageLibrary(),3
net.sf.freecol.client.gui.SwingGUI.getFocus(),3
net.sf.freecol.client.gui.SwingGUI.getFocusMapPoint(),3
"net.sf.freecol.client.gui.SwingGUI.getInput(Tile, StringTemplate, String, String, String)",3
net.sf.freecol.client.gui.SwingGUI.getMapScale(),7
net.sf.freecol.client.gui.SwingGUI.getMapViewDimension(),0
net.sf.freecol.client.gui.SwingGUI.getPopupPosition(Tile),7
net.sf.freecol.client.gui.SwingGUI.getScaledImageLibrary(),3
net.sf.freecol.client.gui.SwingGUI.getSelectedTile(),3
net.sf.freecol.client.gui.SwingGUI.getViewMode(),3
net.sf.freecol.client.gui.SwingGUI.installLookAndFeel(String),3
net.sf.freecol.client.gui.SwingGUI.invokeNowOrLater(Runnable),3
net.sf.freecol.client.gui.SwingGUI.invokeNowOrWait(Runnable),3
net.sf.freecol.client.gui.SwingGUI.isClientOptionsDialogShowing(),3
"net.sf.freecol.client.gui.SwingGUI.isDrag(int, int)",7
net.sf.freecol.client.gui.SwingGUI.isGotoStarted(),3
net.sf.freecol.client.gui.SwingGUI.isPanelShowing(),3
net.sf.freecol.client.gui.SwingGUI.isWindowed(),3
net.sf.freecol.client.gui.SwingGUI.miniMapToggleFogOfWarControls(),3
net.sf.freecol.client.gui.SwingGUI.miniMapToggleViewControls(),3
net.sf.freecol.client.gui.SwingGUI.paintImmediately(),3
net.sf.freecol.client.gui.SwingGUI.performGoto(Tile),3
"net.sf.freecol.client.gui.SwingGUI.performGoto(int, int)",3
"net.sf.freecol.client.gui.SwingGUI.prepareDrag(int, int)",3
net.sf.freecol.client.gui.SwingGUI.prepareResources(),0
net.sf.freecol.client.gui.SwingGUI.prepareShowingMainMenu(),3
net.sf.freecol.client.gui.SwingGUI.prepareUnitLabelsForAnimation(List<Animation>),0
net.sf.freecol.client.gui.SwingGUI.quitGUI(),3
"net.sf.freecol.client.gui.SwingGUI.reconnectGUI(Unit, Tile)",3
net.sf.freecol.client.gui.SwingGUI.refresh(),3
net.sf.freecol.client.gui.SwingGUI.refreshGuiUsingClientOptions(),3
net.sf.freecol.client.gui.SwingGUI.refreshPlayersTable(),3
net.sf.freecol.client.gui.SwingGUI.refreshTile(Tile),5
"net.sf.freecol.client.gui.SwingGUI.refreshTilesForUnit(Unit, Tile, Tile)",8
"net.sf.freecol.client.gui.SwingGUI.releaseUnitOutForAnimation(Unit, JLabel)",0
net.sf.freecol.client.gui.SwingGUI.reloadResources(),3
net.sf.freecol.client.gui.SwingGUI.removeComponent(Component),3
net.sf.freecol.client.gui.SwingGUI.removeDialog(FreeColDialog<?>),3
net.sf.freecol.client.gui.SwingGUI.removeInGameComponents(),3
net.sf.freecol.client.gui.SwingGUI.removeTradeRoutePanel(FreeColPanel),3
net.sf.freecol.client.gui.SwingGUI.repaint(),3
net.sf.freecol.client.gui.SwingGUI.resetMapControls(),3
net.sf.freecol.client.gui.SwingGUI.resetMapZoom(),3
net.sf.freecol.client.gui.SwingGUI.resetMenuBar(),3
net.sf.freecol.client.gui.SwingGUI.resetScrollSpeed(),3
"net.sf.freecol.client.gui.SwingGUI.restoreSavedSize(Component, Dimension)",3
"net.sf.freecol.client.gui.SwingGUI.scrollMap(Direction, boolean)",3
"net.sf.freecol.client.gui.SwingGUI.setDragPoint(int, int)",6
net.sf.freecol.client.gui.SwingGUI.setFocus(Tile),3
net.sf.freecol.client.gui.SwingGUI.setFocusMapPoint(Point),3
net.sf.freecol.client.gui.SwingGUI.setRangedAttackMode(boolean),3
net.sf.freecol.client.gui.SwingGUI.setUnitPath(PathNode),3
net.sf.freecol.client.gui.SwingGUI.showAboutPanel(),3
net.sf.freecol.client.gui.SwingGUI.showBuildQueuePanel(Colony),3
"net.sf.freecol.client.gui.SwingGUI.showCaptureGoodsDialog(Unit, List<Goods>, DialogHandler<List<Goods>>)",3
net.sf.freecol.client.gui.SwingGUI.showChatPanel(),3
"net.sf.freecol.client.gui.SwingGUI.showChooseFoundingFatherDialog(List<FoundingFather>, DialogHandler<FoundingFather>)",3
net.sf.freecol.client.gui.SwingGUI.showClientOptionsDialog(),3
"net.sf.freecol.client.gui.SwingGUI.showColonyPanel(Colony, Unit)",3
net.sf.freecol.client.gui.SwingGUI.showColopediaPanel(String),3
net.sf.freecol.client.gui.SwingGUI.showColorChooserPanel(ActionListener),3
net.sf.freecol.client.gui.SwingGUI.showCompactLabourReport(),3
net.sf.freecol.client.gui.SwingGUI.showCompactLabourReport(UnitData),3
net.sf.freecol.client.gui.SwingGUI.showConfirmDeclarationDialog(),3
net.sf.freecol.client.gui.SwingGUI.showDeclarationPanel(Runnable),3
"net.sf.freecol.client.gui.SwingGUI.showDifficultyDialog(Specification, OptionGroup, boolean, DialogHandler<OptionGroup>)",3
"net.sf.freecol.client.gui.SwingGUI.showDumpCargoDialog(Unit, DialogHandler<List<Goods>>)",3
net.sf.freecol.client.gui.SwingGUI.showEditOptionDialog(Option),3
net.sf.freecol.client.gui.SwingGUI.showEditSettlementDialog(IndianSettlement),3
"net.sf.freecol.client.gui.SwingGUI.showEmigrationDialog(Player, boolean, DialogHandler<Integer>)",3
"net.sf.freecol.client.gui.SwingGUI.showEndTurnDialog(List<Unit>, DialogHandler<Boolean>)",3
"net.sf.freecol.client.gui.SwingGUI.showErrorPanel(String, Runnable)",3
net.sf.freecol.client.gui.SwingGUI.showEuropePanel(),3
"net.sf.freecol.client.gui.SwingGUI.showEventPanel(String, String, String)",3
net.sf.freecol.client.gui.SwingGUI.showFindSettlementPanel(),3
"net.sf.freecol.client.gui.SwingGUI.showFirstContactDialog(Player, Player, Tile, int, DialogHandler<Boolean>)",3
"net.sf.freecol.client.gui.SwingGUI.showGameOptionsDialog(boolean, DialogHandler<OptionGroup>)",3
"net.sf.freecol.client.gui.SwingGUI.showHighScoresPanel(String, List<HighScore>)",3
net.sf.freecol.client.gui.SwingGUI.showIndianSettlementPanel(IndianSettlement),3
"net.sf.freecol.client.gui.SwingGUI.showInformationPanel(FreeColObject, StringTemplate)",3
"net.sf.freecol.client.gui.SwingGUI.showLoadDialog(File, String...)",3
"net.sf.freecol.client.gui.SwingGUI.showLoadingSavegameDialog(boolean, boolean)",3
net.sf.freecol.client.gui.SwingGUI.showLogFilePanel(),3
net.sf.freecol.client.gui.SwingGUI.showMainPanel(String),3
net.sf.freecol.client.gui.SwingGUI.showMainTitle(),3
"net.sf.freecol.client.gui.SwingGUI.showMapGeneratorOptionsDialog(boolean, DialogHandler<OptionGroup>)",3
net.sf.freecol.client.gui.SwingGUI.showMapSizeDialog(),3
net.sf.freecol.client.gui.SwingGUI.showModelMessages(List<ModelMessage>),3
"net.sf.freecol.client.gui.SwingGUI.showMonarchDialog(MonarchAction, StringTemplate, String, DialogHandler<Boolean>)",3
"net.sf.freecol.client.gui.SwingGUI.showNamingDialog(StringTemplate, String, Unit, DialogHandler<String>)",3
"net.sf.freecol.client.gui.SwingGUI.showNativeDemandDialog(Unit, Colony, GoodsType, int, DialogHandler<Boolean>)",3
"net.sf.freecol.client.gui.SwingGUI.showNegotiationDialog(FreeColGameObject, FreeColGameObject, DiplomaticTrade, StringTemplate)",3
net.sf.freecol.client.gui.SwingGUI.showNewPanel(Specification),3
"net.sf.freecol.client.gui.SwingGUI.showOpeningVideo(String, Runnable)",3
net.sf.freecol.client.gui.SwingGUI.showParametersDialog(),3
"net.sf.freecol.client.gui.SwingGUI.showPopupMenu(JPopupMenu, int, int)",3
"net.sf.freecol.client.gui.SwingGUI.showPreCombatDialog(Unit, FreeColGameObject, Tile)",3
net.sf.freecol.client.gui.SwingGUI.showPurchasePanel(),3
net.sf.freecol.client.gui.SwingGUI.showRecruitPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportCargoPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportColonyPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportContinentalCongressPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportEducationPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportExplorationPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportForeignAffairPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportHistoryPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportIndianPanel(),3
"net.sf.freecol.client.gui.SwingGUI.showReportLabourDetailPanel(UnitType, Map<UnitType, Map<Location, Integer>>, TypeCountMap<UnitType>, List<Colony>)",3
net.sf.freecol.client.gui.SwingGUI.showReportLabourPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportMilitaryPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportNavalPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportProductionPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportReligiousPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportRequirementsPanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportTradePanel(),3
net.sf.freecol.client.gui.SwingGUI.showReportTurnPanel(List<ModelMessage>),3
net.sf.freecol.client.gui.SwingGUI.showRiverStyleDialog(List<String>),3
"net.sf.freecol.client.gui.SwingGUI.showSaveDialog(File, String)",3
net.sf.freecol.client.gui.SwingGUI.showScaleMapSizeDialog(),3
"net.sf.freecol.client.gui.SwingGUI.showSelectAmountDialog(GoodsType, int, int, boolean)",3
net.sf.freecol.client.gui.SwingGUI.showSelectDestinationDialog(Unit),3
"net.sf.freecol.client.gui.SwingGUI.showSelectTributeAmountDialog(StringTemplate, int)",3
net.sf.freecol.client.gui.SwingGUI.showServerListPanel(List<ServerInfo>),3
"net.sf.freecol.client.gui.SwingGUI.showStartGamePanel(Game, Player, boolean)",3
"net.sf.freecol.client.gui.SwingGUI.showStatisticsPanel(Map<String, String>, Map<String, String>)",3
net.sf.freecol.client.gui.SwingGUI.showStatusPanel(String),3
net.sf.freecol.client.gui.SwingGUI.showTilePanel(Tile),3
net.sf.freecol.client.gui.SwingGUI.showTilePopup(Tile),3
net.sf.freecol.client.gui.SwingGUI.showTradeRouteInputPanel(TradeRoute),3
net.sf.freecol.client.gui.SwingGUI.showTradeRoutePanel(Unit),3
net.sf.freecol.client.gui.SwingGUI.showTrainPanel(),3
net.sf.freecol.client.gui.SwingGUI.showVictoryDialog(DialogHandler<Boolean>),3
"net.sf.freecol.client.gui.SwingGUI.showWarehouseDialog(Colony, DialogHandler<Boolean>)",3
net.sf.freecol.client.gui.SwingGUI.showWorkProductionPanel(Unit),3
net.sf.freecol.client.gui.SwingGUI.startGUI(Dimension),3
net.sf.freecol.client.gui.SwingGUI.startGoto(),3
net.sf.freecol.client.gui.SwingGUI.startMapEditorGUI(),3
net.sf.freecol.client.gui.SwingGUI.stopGoto(),5
net.sf.freecol.client.gui.SwingGUI.stopMapAsyncPainter(),3
"net.sf.freecol.client.gui.SwingGUI.tileAt(int, int)",3
net.sf.freecol.client.gui.SwingGUI.toNonDiagonalDirections(Direction),0
net.sf.freecol.client.gui.SwingGUI.toggleRangedAttackMode(),3
net.sf.freecol.client.gui.SwingGUI.traverseGotoPath(),3
net.sf.freecol.client.gui.SwingGUI.updateEuropeanSubpanels(),3
"net.sf.freecol.client.gui.SwingGUI.updateGoto(int, int, boolean)",3
net.sf.freecol.client.gui.SwingGUI.updateGotoTile(Tile),5
net.sf.freecol.client.gui.SwingGUI.updateMapControls(),3
net.sf.freecol.client.gui.SwingGUI.updateMenuBar(),3
net.sf.freecol.client.gui.SwingGUI.updateUnitPath(),3
net.sf.freecol.client.gui.SwingGUI.useMapAsyncPainter(),3
net.sf.freecol.client.gui.SwingGUI.zoomInMap(),3
net.sf.freecol.client.gui.SwingGUI.zoomInMapControls(),3
net.sf.freecol.client.gui.SwingGUI.zoomOutMap(),3
net.sf.freecol.client.gui.SwingGUI.zoomOutMapControls(),3
"net.sf.freecol.client.gui.TilePopup.TilePopup(FreeColClient, Tile)",7
net.sf.freecol.client.gui.TilePopup.addColony(Colony),5
"net.sf.freecol.client.gui.TilePopup.addDebugItems(FreeColClient, Tile)",6
net.sf.freecol.client.gui.TilePopup.addIndianSettlement(IndianSettlement),6
net.sf.freecol.client.gui.TilePopup.addTile(Tile),9
"net.sf.freecol.client.gui.TilePopup.addUnit(Container, Unit, boolean, boolean)",10
net.sf.freecol.client.gui.TilePopup.hasItem(),7
"net.sf.freecol.client.gui.Widgets.DialogCallback.DialogCallback(FreeColDialog<T>, PopupPosition, DialogHandler<T>)",7
net.sf.freecol.client.gui.Widgets.DialogCallback.run(),3
"net.sf.freecol.client.gui.Widgets.Widgets(FreeColClient, Canvas)",6
"net.sf.freecol.client.gui.Widgets.confirm(StringTemplate, ImageIcon, String, String, PopupPosition)",10
"net.sf.freecol.client.gui.Widgets.getChoice(StringTemplate, ImageIcon, String, List<ChoiceItem<T>>, PopupPosition)",13
net.sf.freecol.client.gui.Widgets.getFrame(),0
"net.sf.freecol.client.gui.Widgets.getInput(StringTemplate, String, String, String, PopupPosition)",11
net.sf.freecol.client.gui.Widgets.showAboutPanel(),5
net.sf.freecol.client.gui.Widgets.showBuildQueuePanel(Colony),6
"net.sf.freecol.client.gui.Widgets.showCaptureGoodsDialog(Unit, List<Goods>, DialogHandler<List<Goods>>)",7
net.sf.freecol.client.gui.Widgets.showChatPanel(),5
"net.sf.freecol.client.gui.Widgets.showChooseFoundingFatherDialog(List<FoundingFather>, DialogHandler<FoundingFather>)",6
net.sf.freecol.client.gui.Widgets.showColopediaPanel(String),6
net.sf.freecol.client.gui.Widgets.showColorChooserPanel(ActionListener),7
net.sf.freecol.client.gui.Widgets.showCompactLabourReport(),5
net.sf.freecol.client.gui.Widgets.showCompactLabourReport(UnitData),6
net.sf.freecol.client.gui.Widgets.showConfirmDeclarationDialog(),5
net.sf.freecol.client.gui.Widgets.showDeclarationPanel(Runnable),6
"net.sf.freecol.client.gui.Widgets.showDifficultyDialog(Specification, OptionGroup, boolean, DialogHandler<OptionGroup>)",9
"net.sf.freecol.client.gui.Widgets.showDumpCargoDialog(Unit, PopupPosition, DialogHandler<List<Goods>>)",7
net.sf.freecol.client.gui.Widgets.showEditOptionDialog(Option),6
net.sf.freecol.client.gui.Widgets.showEditSettlementDialog(IndianSettlement),6
"net.sf.freecol.client.gui.Widgets.showEmigrationDialog(Player, boolean, DialogHandler<Integer>)",9
"net.sf.freecol.client.gui.Widgets.showEndTurnDialog(List<Unit>, DialogHandler<Boolean>)",6
net.sf.freecol.client.gui.Widgets.showErrorPanel(String),6
net.sf.freecol.client.gui.Widgets.showEuropePanel(Runnable),6
"net.sf.freecol.client.gui.Widgets.showEventPanel(String, String, String)",8
net.sf.freecol.client.gui.Widgets.showFindSettlementPanel(),5
"net.sf.freecol.client.gui.Widgets.showFirstContactDialog(Player, Player, Tile, int, PopupPosition, DialogHandler<Boolean>)",13
"net.sf.freecol.client.gui.Widgets.showGameOptionsDialog(boolean, DialogHandler<OptionGroup>)",6
"net.sf.freecol.client.gui.Widgets.showHighScoresPanel(String, List<HighScore>)",7
"net.sf.freecol.client.gui.Widgets.showIndianSettlementPanel(IndianSettlement, PopupPosition)",7
"net.sf.freecol.client.gui.Widgets.showInformationPanel(FreeColObject, PopupPosition, ImageIcon, StringTemplate)",9
"net.sf.freecol.client.gui.Widgets.showLoadDialog(File, FileFilter[])",7
"net.sf.freecol.client.gui.Widgets.showLoadingSavegameDialog(boolean, boolean)",11
net.sf.freecol.client.gui.Widgets.showLogFilePanel(),5
"net.sf.freecol.client.gui.Widgets.showMapGeneratorOptionsDialog(boolean, DialogHandler<OptionGroup>)",5
net.sf.freecol.client.gui.Widgets.showMapSizeDialog(),5
"net.sf.freecol.client.gui.Widgets.showMonarchDialog(MonarchAction, StringTemplate, String, DialogHandler<Boolean>)",9
"net.sf.freecol.client.gui.Widgets.showNamingDialog(StringTemplate, String, PopupPosition, DialogHandler<String>)",9
"net.sf.freecol.client.gui.Widgets.showNativeDemandDialog(Unit, Colony, GoodsType, int, PopupPosition, DialogHandler<Boolean>)",10
"net.sf.freecol.client.gui.Widgets.showNegotiationDialog(FreeColGameObject, FreeColGameObject, DiplomaticTrade, StringTemplate, PopupPosition)",11
net.sf.freecol.client.gui.Widgets.showNewPanel(Specification),6
net.sf.freecol.client.gui.Widgets.showParametersDialog(),5
"net.sf.freecol.client.gui.Widgets.showPreCombatDialog(Unit, FreeColGameObject, PopupPosition)",8
net.sf.freecol.client.gui.Widgets.showPurchasePanel(),5
net.sf.freecol.client.gui.Widgets.showRecruitPanel(),5
net.sf.freecol.client.gui.Widgets.showReportCargoPanel(),0
net.sf.freecol.client.gui.Widgets.showReportColonyPanel(boolean),0
net.sf.freecol.client.gui.Widgets.showReportContinentalCongressPanel(),0
net.sf.freecol.client.gui.Widgets.showReportEducationPanel(),0
net.sf.freecol.client.gui.Widgets.showReportExplorationPanel(),0
net.sf.freecol.client.gui.Widgets.showReportForeignAffairPanel(),0
net.sf.freecol.client.gui.Widgets.showReportHistoryPanel(),0
net.sf.freecol.client.gui.Widgets.showReportIndianPanel(),0
"net.sf.freecol.client.gui.Widgets.showReportLabourDetailPanel(UnitType, Map<UnitType, Map<Location, Integer>>, TypeCountMap<UnitType>, List<Colony>)",9
net.sf.freecol.client.gui.Widgets.showReportLabourPanel(),0
net.sf.freecol.client.gui.Widgets.showReportMilitaryPanel(),0
net.sf.freecol.client.gui.Widgets.showReportNavalPanel(),0
net.sf.freecol.client.gui.Widgets.showReportProductionPanel(),0
net.sf.freecol.client.gui.Widgets.showReportReligiousPanel(),0
net.sf.freecol.client.gui.Widgets.showReportRequirementsPanel(),0
net.sf.freecol.client.gui.Widgets.showReportTradePanel(),0
net.sf.freecol.client.gui.Widgets.showReportTurnPanel(List<ModelMessage>),6
net.sf.freecol.client.gui.Widgets.showRiverStyleDialog(List<String>),6
"net.sf.freecol.client.gui.Widgets.showSaveDialog(File, FileFilter[], String)",9
net.sf.freecol.client.gui.Widgets.showScaleMapSizeDialog(),5
"net.sf.freecol.client.gui.Widgets.showSelectAmountDialog(GoodsType, int, int, boolean)",9
"net.sf.freecol.client.gui.Widgets.showSelectDestinationDialog(Unit, PopupPosition)",8
"net.sf.freecol.client.gui.Widgets.showSelectTributeAmountDialog(StringTemplate, int)",8
net.sf.freecol.client.gui.Widgets.showServerListPanel(List<ServerInfo>),7
"net.sf.freecol.client.gui.Widgets.showStatisticsPanel(Map<String, String>, Map<String, String>)",7
net.sf.freecol.client.gui.Widgets.showTilePanel(Tile),6
net.sf.freecol.client.gui.Widgets.showTradeRouteInputPanel(TradeRoute),6
"net.sf.freecol.client.gui.Widgets.showTradeRoutePanel(Unit, PopupPosition)",7
net.sf.freecol.client.gui.Widgets.showTrainPanel(),5
net.sf.freecol.client.gui.Widgets.showVictoryDialog(DialogHandler<Boolean>),5
"net.sf.freecol.client.gui.Widgets.showWarehouseDialog(Colony, DialogHandler<Boolean>)",8
net.sf.freecol.client.gui.Widgets.showWorkProductionPanel(Unit),6
net.sf.freecol.client.gui.WindowedFrameListener.WindowedFrameListener(FreeColClient),5
net.sf.freecol.client.gui.WindowedFrameListener.windowActivated(WindowEvent),5
net.sf.freecol.client.gui.WindowedFrameListener.windowClosed(WindowEvent),5
net.sf.freecol.client.gui.WindowedFrameListener.windowClosing(WindowEvent),5
net.sf.freecol.client.gui.WindowedFrameListener.windowDeactivated(WindowEvent),5
net.sf.freecol.client.gui.WindowedFrameListener.windowDeiconified(WindowEvent),5
net.sf.freecol.client.gui.WindowedFrameListener.windowIconified(WindowEvent),5
net.sf.freecol.client.gui.WindowedFrameListener.windowOpened(WindowEvent),5
net.sf.freecol.client.gui.action.AboutAction.AboutAction(FreeColClient),5
net.sf.freecol.client.gui.action.AboutAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ActionManager.ActionManager(FreeColClient),5
net.sf.freecol.client.gui.action.ActionManager.addSpecificationActions(Specification),7
net.sf.freecol.client.gui.action.ActionManager.getFreeColAction(String),7
"net.sf.freecol.client.gui.action.ActionManager.initializeActions(InGameController, ConnectController)",21
net.sf.freecol.client.gui.action.ActionManager.makeMiniMapButtons(),5
net.sf.freecol.client.gui.action.ActionManager.makeUnitActionButtons(Specification),6
net.sf.freecol.client.gui.action.ActionManager.refreshResources(),0
net.sf.freecol.client.gui.action.ActionManager.update(),5
net.sf.freecol.client.gui.action.AssignTradeRouteAction.AssignTradeRouteAction(FreeColClient),5
net.sf.freecol.client.gui.action.AssignTradeRouteAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.AssignTradeRouteAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.AttackRangedAction.AttackRangedAction(FreeColClient),5
net.sf.freecol.client.gui.action.AttackRangedAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.AttackRangedAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.BuildColonyAction.BuildColonyAction(FreeColClient),5
net.sf.freecol.client.gui.action.BuildColonyAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.BuildColonyAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.CenterAction.CenterAction(FreeColClient),5
net.sf.freecol.client.gui.action.CenterAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ChangeAction.ChangeAction(FreeColClient),5
net.sf.freecol.client.gui.action.ChangeAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ChangeAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.ChangeAction.update(),3
net.sf.freecol.client.gui.action.ChangeWindowedModeAction.ChangeWindowedModeAction(FreeColClient),5
net.sf.freecol.client.gui.action.ChangeWindowedModeAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ChatAction.ChatAction(FreeColClient),5
net.sf.freecol.client.gui.action.ChatAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ChatAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.ClearOrdersAction.ClearOrdersAction(FreeColClient),5
net.sf.freecol.client.gui.action.ClearOrdersAction.actionPerformed(ActionEvent),3
"net.sf.freecol.client.gui.action.ColopediaAction.ColopediaAction(FreeColClient, PanelType)",6
net.sf.freecol.client.gui.action.ColopediaAction.PanelType.getKey(),0
net.sf.freecol.client.gui.action.ColopediaAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ContinueAction.ContinueAction(FreeColClient),5
net.sf.freecol.client.gui.action.ContinueAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.DebugAction.DebugAction(FreeColClient),5
net.sf.freecol.client.gui.action.DebugAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.DebugAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.DeclareIndependenceAction.DeclareIndependenceAction(FreeColClient),5
net.sf.freecol.client.gui.action.DeclareIndependenceAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.DeclareIndependenceAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.DetermineHighSeasAction.DetermineHighSeasAction(FreeColClient),5
net.sf.freecol.client.gui.action.DetermineHighSeasAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.DetermineHighSeasAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.DisbandUnitAction.DisbandUnitAction(FreeColClient),5
net.sf.freecol.client.gui.action.DisbandUnitAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.DisplayBordersAction.DisplayBordersAction(FreeColClient),5
net.sf.freecol.client.gui.action.DisplayBordersAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.DisplayFogOfWarAction.DisplayFogOfWarAction(FreeColClient),5
net.sf.freecol.client.gui.action.DisplayFogOfWarAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.DisplayFogOfWarAction.shouldBeEnabled(),0
net.sf.freecol.client.gui.action.DisplayGridAction.DisplayGridAction(FreeColClient),5
net.sf.freecol.client.gui.action.DisplayGridAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.DisplayTileTextAction.DisplayText.getKey(),0
"net.sf.freecol.client.gui.action.DisplayTileTextAction.DisplayTileTextAction(FreeColClient, DisplayText)",6
net.sf.freecol.client.gui.action.DisplayTileTextAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.DisplayTileTextAction.shouldBeSelected(),3
net.sf.freecol.client.gui.action.EndTurnAction.EndTurnAction(FreeColClient),5
net.sf.freecol.client.gui.action.EndTurnAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.EuropeAction.EuropeAction(FreeColClient),5
net.sf.freecol.client.gui.action.EuropeAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.EuropeAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.ExecuteGotoOrdersAction.ExecuteGotoOrdersAction(FreeColClient),5
net.sf.freecol.client.gui.action.ExecuteGotoOrdersAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.FindSettlementAction.FindSettlementAction(FreeColClient),5
net.sf.freecol.client.gui.action.FindSettlementAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.FortifyAction.FortifyAction(FreeColClient),5
net.sf.freecol.client.gui.action.FortifyAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.FortifyAction.shouldBeEnabled(),3
"net.sf.freecol.client.gui.action.FreeColAction.FreeColAction(FreeColClient, String)",6
net.sf.freecol.client.gui.action.FreeColAction.InnerMenuKeyListener.InnerMenuKeyListener(),0
net.sf.freecol.client.gui.action.FreeColAction.InnerMenuKeyListener.menuKeyPressed(MenuKeyEvent),0
net.sf.freecol.client.gui.action.FreeColAction.InnerMenuKeyListener.menuKeyReleased(MenuKeyEvent),0
net.sf.freecol.client.gui.action.FreeColAction.InnerMenuKeyListener.menuKeyTyped(MenuKeyEvent),0
net.sf.freecol.client.gui.action.FreeColAction.addImageIcons(String),5
net.sf.freecol.client.gui.action.FreeColAction.cloneOption(),3
net.sf.freecol.client.gui.action.FreeColAction.getAccelerator(),6
net.sf.freecol.client.gui.action.FreeColAction.getActionManager(),5
net.sf.freecol.client.gui.action.FreeColAction.getClientOptions(),5
net.sf.freecol.client.gui.action.FreeColAction.getConnectController(),5
net.sf.freecol.client.gui.action.FreeColAction.getEnabledBy(),3
net.sf.freecol.client.gui.action.FreeColAction.getFreeColClient(),5
net.sf.freecol.client.gui.action.FreeColAction.getGUI(),5
net.sf.freecol.client.gui.action.FreeColAction.getGame(),5
net.sf.freecol.client.gui.action.FreeColAction.getGroup(),3
net.sf.freecol.client.gui.action.FreeColAction.getId(),5
net.sf.freecol.client.gui.action.FreeColAction.getKeyStrokeText(KeyStroke),10
net.sf.freecol.client.gui.action.FreeColAction.getMap(),5
net.sf.freecol.client.gui.action.FreeColAction.getMenuKeyListener(),0
net.sf.freecol.client.gui.action.FreeColAction.getMnemonic(),5
net.sf.freecol.client.gui.action.FreeColAction.getName(),5
net.sf.freecol.client.gui.action.FreeColAction.getShortDescription(),6
net.sf.freecol.client.gui.action.FreeColAction.getValue(),3
net.sf.freecol.client.gui.action.FreeColAction.getXMLTagName(),3
net.sf.freecol.client.gui.action.FreeColAction.hasOrderButtons(),5
net.sf.freecol.client.gui.action.FreeColAction.igc(),5
net.sf.freecol.client.gui.action.FreeColAction.readFromXML(FreeColXMLReader),6
net.sf.freecol.client.gui.action.FreeColAction.setAccelerator(KeyStroke),6
net.sf.freecol.client.gui.action.FreeColAction.setGroup(String),3
net.sf.freecol.client.gui.action.FreeColAction.setMnemonic(int),0
net.sf.freecol.client.gui.action.FreeColAction.setValue(FreeColAction),3
net.sf.freecol.client.gui.action.FreeColAction.shouldBeEnabled(),6
net.sf.freecol.client.gui.action.FreeColAction.toString(),3
net.sf.freecol.client.gui.action.FreeColAction.toXML(FreeColXMLWriter),7
net.sf.freecol.client.gui.action.FreeColAction.update(),4
net.sf.freecol.client.gui.action.FreeColAction.updateImageIcon(String),0
net.sf.freecol.client.gui.action.FreeColAction.updateRegisteredImageIcons(),0
net.sf.freecol.client.gui.action.GotoAction.GotoAction(FreeColClient),5
net.sf.freecol.client.gui.action.GotoAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.GotoAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.GotoTileAction.GotoTileAction(FreeColClient),5
net.sf.freecol.client.gui.action.GotoTileAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.GotoTileAction.shouldBeEnabled(),3
"net.sf.freecol.client.gui.action.ImprovementAction.ImprovementAction(FreeColClient, TileImprovementType)",6
net.sf.freecol.client.gui.action.ImprovementAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ImprovementAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.LoadAction.LoadAction(FreeColClient),5
net.sf.freecol.client.gui.action.LoadAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.LoadAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.MapControlsAction.MapControlsAction(FreeColClient),5
net.sf.freecol.client.gui.action.MapControlsAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.MapControlsAction.update(),3
net.sf.freecol.client.gui.action.MapEditorAction.MapEditorAction(FreeColClient),5
net.sf.freecol.client.gui.action.MapEditorAction.actionPerformed(ActionEvent),3
"net.sf.freecol.client.gui.action.MapboardAction.MapboardAction(FreeColClient, String)",6
net.sf.freecol.client.gui.action.MapboardAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction.MiniMapToggleFogOfWarAction(FreeColClient),5
"net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction.MiniMapToggleFogOfWarAction(FreeColClient, boolean)",6
net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction.update(),0
net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction.updateIcons(),0
net.sf.freecol.client.gui.action.MiniMapToggleViewAction.MiniMapToggleViewAction(FreeColClient),5
"net.sf.freecol.client.gui.action.MiniMapToggleViewAction.MiniMapToggleViewAction(FreeColClient, boolean)",6
net.sf.freecol.client.gui.action.MiniMapToggleViewAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.MiniMapToggleViewAction.update(),0
net.sf.freecol.client.gui.action.MiniMapToggleViewAction.updateIcons(),0
net.sf.freecol.client.gui.action.MiniMapZoomInAction.MiniMapZoomInAction(FreeColClient),5
"net.sf.freecol.client.gui.action.MiniMapZoomInAction.MiniMapZoomInAction(FreeColClient, boolean)",6
net.sf.freecol.client.gui.action.MiniMapZoomInAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.MiniMapZoomInAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.MiniMapZoomOutAction.MiniMapZoomOutAction(FreeColClient),5
"net.sf.freecol.client.gui.action.MiniMapZoomOutAction.MiniMapZoomOutAction(FreeColClient, boolean)",6
net.sf.freecol.client.gui.action.MiniMapZoomOutAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.MiniMapZoomOutAction.shouldBeEnabled(),3
"net.sf.freecol.client.gui.action.MoveAction.MoveAction(FreeColClient, Direction)",6
"net.sf.freecol.client.gui.action.MoveAction.MoveAction(FreeColClient, Direction, boolean)",7
net.sf.freecol.client.gui.action.MoveAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.NewAction.NewAction(FreeColClient),5
net.sf.freecol.client.gui.action.NewAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.NewEmptyMapAction.NewEmptyMapAction(FreeColClient),5
net.sf.freecol.client.gui.action.NewEmptyMapAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.NewEmptyMapAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.OpenAction.OpenAction(FreeColClient),5
net.sf.freecol.client.gui.action.OpenAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.PreferencesAction.PreferencesAction(FreeColClient),5
net.sf.freecol.client.gui.action.PreferencesAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.QuitAction.QuitAction(FreeColClient),5
net.sf.freecol.client.gui.action.QuitAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReconnectAction.ReconnectAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReconnectAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.RenameAction.RenameAction(FreeColClient),5
net.sf.freecol.client.gui.action.RenameAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportCargoAction.ReportCargoAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportCargoAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportColonyAction.ReportColonyAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportColonyAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportContinentalCongressAction.ReportContinentalCongressAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportContinentalCongressAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportEducationAction.ReportEducationAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportEducationAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportExplorationAction.ReportExplorationAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportExplorationAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportForeignAction.ReportForeignAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportForeignAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportHighScoresAction.ReportHighScoresAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportHighScoresAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportHistoryAction.ReportHistoryAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportHistoryAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportIndianAction.ReportIndianAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportIndianAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportLabourAction.ReportLabourAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportLabourAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportMilitaryAction.ReportMilitaryAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportMilitaryAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportNavalAction.ReportNavalAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportNavalAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportProductionAction.ReportProductionAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportProductionAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportReligionAction.ReportReligionAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportReligionAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportRequirementsAction.ReportRequirementsAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportRequirementsAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportTradeAction.ReportTradeAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportTradeAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ReportTurnAction.ReportTurnAction(FreeColClient),5
net.sf.freecol.client.gui.action.ReportTurnAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.RetireAction.RetireAction(FreeColClient),5
net.sf.freecol.client.gui.action.RetireAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.RetireAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.SaveAction.SaveAction(FreeColClient),5
net.sf.freecol.client.gui.action.SaveAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.SaveAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.SaveAndQuitAction.SaveAndQuitAction(FreeColClient),5
net.sf.freecol.client.gui.action.SaveAndQuitAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.SaveAndQuitAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.ScaleMapAction.ScaleMapAction(FreeColClient),5
net.sf.freecol.client.gui.action.ScaleMapAction.actionPerformed(ActionEvent),3
"net.sf.freecol.client.gui.action.ScaleMapAction.scaleMapTo(int, int)",7
net.sf.freecol.client.gui.action.ScaleMapAction.shouldBeEnabled(),3
"net.sf.freecol.client.gui.action.SelectableAction.SelectableAction(FreeColClient, String, String)",7
net.sf.freecol.client.gui.action.SelectableAction.getOption(),5
net.sf.freecol.client.gui.action.SelectableAction.isSelected(),5
net.sf.freecol.client.gui.action.SelectableAction.setOption(boolean),5
net.sf.freecol.client.gui.action.SelectableAction.setSelected(boolean),5
net.sf.freecol.client.gui.action.SelectableAction.shouldBeSelected(),7
net.sf.freecol.client.gui.action.SelectableAction.update(),3
net.sf.freecol.client.gui.action.SentryAction.SentryAction(FreeColClient),5
net.sf.freecol.client.gui.action.SentryAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ShowDifficultyAction.ShowDifficultyAction(FreeColClient),5
net.sf.freecol.client.gui.action.ShowDifficultyAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ShowGameOptionsAction.ShowGameOptionsAction(FreeColClient),5
net.sf.freecol.client.gui.action.ShowGameOptionsAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ShowMainAction.ShowMainAction(FreeColClient),5
net.sf.freecol.client.gui.action.ShowMainAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ShowMapGeneratorOptionsAction.ShowMapGeneratorOptionsAction(FreeColClient),5
net.sf.freecol.client.gui.action.ShowMapGeneratorOptionsAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.SkipUnitAction.SkipUnitAction(FreeColClient),5
net.sf.freecol.client.gui.action.SkipUnitAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.StartMapAction.StartMapAction(FreeColClient),5
net.sf.freecol.client.gui.action.StartMapAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.TilePopupAction.TilePopupAction(FreeColClient),5
net.sf.freecol.client.gui.action.TilePopupAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ToggleViewModeAction.ToggleViewModeAction(FreeColClient),5
net.sf.freecol.client.gui.action.ToggleViewModeAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.TradeRouteAction.TradeRouteAction(FreeColClient),5
net.sf.freecol.client.gui.action.TradeRouteAction.actionPerformed(ActionEvent),3
"net.sf.freecol.client.gui.action.UnitAction.UnitAction(FreeColClient, String)",6
net.sf.freecol.client.gui.action.UnitAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.UnloadAction.UnloadAction(FreeColClient),5
"net.sf.freecol.client.gui.action.UnloadAction.UnloadAction(FreeColClient, Unit)",8
net.sf.freecol.client.gui.action.UnloadAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.UnloadAction.getUnit(),0
net.sf.freecol.client.gui.action.UnloadAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.WaitAction.WaitAction(FreeColClient),5
net.sf.freecol.client.gui.action.WaitAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ZoomInAction.ZoomInAction(FreeColClient),5
net.sf.freecol.client.gui.action.ZoomInAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ZoomInAction.shouldBeEnabled(),3
net.sf.freecol.client.gui.action.ZoomOutAction.ZoomOutAction(FreeColClient),5
net.sf.freecol.client.gui.action.ZoomOutAction.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.action.ZoomOutAction.shouldBeEnabled(),3
"net.sf.freecol.client.gui.animation.Animation.Animation(Unit, List<Tile>)",6
net.sf.freecol.client.gui.animation.Animation.getTiles(),5
net.sf.freecol.client.gui.animation.Animation.getUnit(),5
net.sf.freecol.client.gui.animation.Animation.setPoints(List<Point>),5
net.sf.freecol.client.gui.animation.Animations.getAttackAnimationBase(Unit),6
"net.sf.freecol.client.gui.animation.Animations.unitAttack(FreeColClient, Unit, Unit, Tile, Tile, boolean, float)",12
"net.sf.freecol.client.gui.animation.Animations.unitMove(FreeColClient, Unit, Tile, Tile, float)",10
"net.sf.freecol.client.gui.animation.UnitImageAnimation.UnitImageAnimation(Unit, Tile, SimpleZippedAnimation)",7
"net.sf.freecol.client.gui.animation.UnitImageAnimation.build(Unit, Tile, Direction, String, float)",10
"net.sf.freecol.client.gui.animation.UnitImageAnimation.executeWithLabel(JLabel, Procedure)",3
net.sf.freecol.client.gui.animation.UnitImageAnimation.setMirrored(boolean),5
net.sf.freecol.client.gui.animation.UnitImageAnimation.trialDirections(Direction),8
"net.sf.freecol.client.gui.animation.UnitMoveAnimation.UnitMoveAnimation(Unit, Tile, Tile, int, float)",9
"net.sf.freecol.client.gui.animation.UnitMoveAnimation.executeWithLabel(JLabel, Procedure)",3
"net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.CaptureGoodsDialog(FreeColClient, JFrame, Unit, List<Goods>)",8
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.CheckBoxRenderer.CheckBoxRenderer(),0
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.CheckBoxRenderer.CheckBoxRenderer(Market),6
"net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.CheckBoxRenderer.getListCellRendererComponent(JList<? extends GoodsItem>, GoodsItem, int, boolean, boolean)",3
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.GoodsItem.GoodsItem(Goods),0
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.GoodsItem.getGoods(),0
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.GoodsItem.pricePerGood(Market),0
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.GoodsItem.toString(),3
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.getResponse(),3
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.updateComponents(),3
"net.sf.freecol.client.gui.dialog.ChooseFoundingFatherDialog.ChooseFoundingFatherDialog(FreeColClient, JFrame, List<FoundingFather>)",11
net.sf.freecol.client.gui.dialog.ChooseFoundingFatherDialog.getResponse(),3
"net.sf.freecol.client.gui.dialog.ClientOptionsDialog.ClientOptionsDialog(FreeColClient, JFrame, boolean)",6
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ColorButton.ColorButton(Color),0
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ColorButton.getColor(),0
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ColorButton.getUIClassID(),3
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ColorButton.setColor(Color),0
"net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ConfirmDeclarationDialog(FreeColClient, JFrame)",6
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.EnumRenderer.EnumRenderer(String),0
"net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.EnumRenderer.setLabelValues(JLabel, T)",3
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.actionPerformed(ActionEvent),3
"net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.addComboBox(JPanel, JComboBox<T>, String, T)",0
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.getNumbers(int),0
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.getResponse(),3
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.itemStateChanged(ItemEvent),3
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.setColors(),0
"net.sf.freecol.client.gui.dialog.DifficultyDialog.DifficultyDialog(FreeColClient, JFrame, Specification, OptionGroup, boolean)",11
net.sf.freecol.client.gui.dialog.DifficultyDialog.addLoadAction(JButton),5
net.sf.freecol.client.gui.dialog.DifficultyDialog.addResetAction(JButton),5
net.sf.freecol.client.gui.dialog.DifficultyDialog.addSaveAction(JButton),5
net.sf.freecol.client.gui.dialog.DifficultyDialog.getSpecification(),5
net.sf.freecol.client.gui.dialog.DifficultyDialog.saveDefaultOptions(),0
net.sf.freecol.client.gui.dialog.DifficultyDialog.valueChanged(TreeSelectionEvent),0
"net.sf.freecol.client.gui.dialog.DumpCargoDialog.DumpCargoDialog(FreeColClient, JFrame, Unit)",7
net.sf.freecol.client.gui.dialog.DumpCargoDialog.getResponse(),3
"net.sf.freecol.client.gui.dialog.EditOptionDialog.EditOptionDialog(FreeColClient, JFrame, Option)",7
net.sf.freecol.client.gui.dialog.EditOptionDialog.getResponse(),3
"net.sf.freecol.client.gui.dialog.EditSettlementDialog.EditSettlementDialog(FreeColClient, JFrame, IndianSettlement)",7
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getOwnerNation(),0
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getOwnerNationType(),0
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getOwnerPlayer(),0
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getResponse(),3
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getSettlementType(),0
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getSkillModel(),0
net.sf.freecol.client.gui.dialog.EditSettlementDialog.itemStateChanged(ItemEvent),3
"net.sf.freecol.client.gui.dialog.EmigrationDialog.EmigrationDialog(FreeColClient, JFrame, Europe, boolean)",9
"net.sf.freecol.client.gui.dialog.EndTurnDialog.EndTurnDialog(FreeColClient, JFrame, List<Unit>)",7
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitCellRenderer.UnitCellRenderer(),0
"net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitCellRenderer.getListCellRendererComponent(JList<? extends UnitWrapper>, UnitWrapper, int, boolean, boolean)",3
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitCellRenderer.largestIconSize(JList<? extends UnitWrapper>),0
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitWrapper.UnitWrapper(Unit),0
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitWrapper.toString(),3
net.sf.freecol.client.gui.dialog.EndTurnDialog.selectUnit(),3
"net.sf.freecol.client.gui.dialog.FirstContactDialog.FirstContactDialog(FreeColClient, JFrame, Player, Player, Tile, int)",11
net.sf.freecol.client.gui.dialog.Flag.Background.Background(Alignment),0
net.sf.freecol.client.gui.dialog.Flag.Decoration.Decoration(UnionPosition...),0
"net.sf.freecol.client.gui.dialog.Flag.Decoration.Decoration(UnionShape, UnionPosition...)",0
net.sf.freecol.client.gui.dialog.Flag.Decoration.getUnionPositions(),0
net.sf.freecol.client.gui.dialog.Flag.Decoration.getUnionShape(),0
"net.sf.freecol.client.gui.dialog.Flag.Flag(Background, Decoration, UnionPosition)",0
"net.sf.freecol.client.gui.dialog.Flag.Flag(Background, Decoration, UnionPosition, UnionShape)",0
"net.sf.freecol.client.gui.dialog.Flag.UnionPosition.UnionPosition(Alignment, int)",0
"net.sf.freecol.client.gui.dialog.Flag.center(GeneralPath, double, double)",7
net.sf.freecol.client.gui.dialog.Flag.drawBackground(Graphics2D),0
"net.sf.freecol.client.gui.dialog.Flag.drawPerBend(Graphics2D, boolean)",0
net.sf.freecol.client.gui.dialog.Flag.drawPerSaltire(Graphics2D),0
net.sf.freecol.client.gui.dialog.Flag.drawQuarters(Graphics2D),0
"net.sf.freecol.client.gui.dialog.Flag.drawStripes(Graphics2D, Alignment, int)",0
net.sf.freecol.client.gui.dialog.Flag.get5Star(),5
net.sf.freecol.client.gui.dialog.Flag.getBackground(),5
net.sf.freecol.client.gui.dialog.Flag.getBackgroundColors(),5
net.sf.freecol.client.gui.dialog.Flag.getBend(boolean),0
net.sf.freecol.client.gui.dialog.Flag.getCircleOfStars(double),7
net.sf.freecol.client.gui.dialog.Flag.getCross(Decoration),0
net.sf.freecol.client.gui.dialog.Flag.getDecoration(),5
net.sf.freecol.client.gui.dialog.Flag.getDecorationColor(),5
net.sf.freecol.client.gui.dialog.Flag.getGridOfStars(Double),0
net.sf.freecol.client.gui.dialog.Flag.getImage(),5
net.sf.freecol.client.gui.dialog.Flag.getPall(),0
net.sf.freecol.client.gui.dialog.Flag.getRectangle(),0
net.sf.freecol.client.gui.dialog.Flag.getRhombus(),0
"net.sf.freecol.client.gui.dialog.Flag.getStar(double, double)",7
"net.sf.freecol.client.gui.dialog.Flag.getStar(double, double, double)",8
net.sf.freecol.client.gui.dialog.Flag.getStarColor(),5
net.sf.freecol.client.gui.dialog.Flag.getStars(),5
net.sf.freecol.client.gui.dialog.Flag.getStripeHeight(Alignment),7
net.sf.freecol.client.gui.dialog.Flag.getStripeWidth(Alignment),7
net.sf.freecol.client.gui.dialog.Flag.getStripes(),5
"net.sf.freecol.client.gui.dialog.Flag.getTriangle(UnionShape, boolean)",9
net.sf.freecol.client.gui.dialog.Flag.getUnionColor(),5
net.sf.freecol.client.gui.dialog.Flag.getUnionPosition(),5
net.sf.freecol.client.gui.dialog.Flag.getUnionRectangle(Double),8
net.sf.freecol.client.gui.dialog.Flag.getUnionRhombus(),0
net.sf.freecol.client.gui.dialog.Flag.getUnionShape(),5
net.sf.freecol.client.gui.dialog.Flag.getUnionTriangle(boolean),0
net.sf.freecol.client.gui.dialog.Flag.setBackground(Background),6
net.sf.freecol.client.gui.dialog.Flag.setBackgroundColors(Color...),7
net.sf.freecol.client.gui.dialog.Flag.setBackgroundColors(List<Color>),7
net.sf.freecol.client.gui.dialog.Flag.setDecoration(Decoration),6
net.sf.freecol.client.gui.dialog.Flag.setDecorationColor(Color),7
net.sf.freecol.client.gui.dialog.Flag.setStarColor(Color),6
net.sf.freecol.client.gui.dialog.Flag.setStars(int),7
net.sf.freecol.client.gui.dialog.Flag.setStripes(int),7
net.sf.freecol.client.gui.dialog.Flag.setUnionColor(Color),6
net.sf.freecol.client.gui.dialog.Flag.setUnionPosition(UnionPosition),7
net.sf.freecol.client.gui.dialog.Flag.setUnionShape(UnionShape),6
net.sf.freecol.client.gui.dialog.Flag.transformBend(GeneralPath),6
net.sf.freecol.client.gui.dialog.Flag.transformTriangle(GeneralPath),5
"net.sf.freecol.client.gui.dialog.FreeColChoiceDialog.FreeColChoiceDialog(FreeColClient, JFrame)",6
"net.sf.freecol.client.gui.dialog.FreeColChoiceDialog.FreeColChoiceDialog(FreeColClient, JFrame, boolean, StringTemplate, ImageIcon, String, List<ChoiceItem<T>>)",12
"net.sf.freecol.client.gui.dialog.FreeColChoiceDialog.initializeChoiceDialog(JFrame, boolean, JComponent, ImageIcon, String, List<ChoiceItem<T>>)",8
"net.sf.freecol.client.gui.dialog.FreeColConfirmDialog.FreeColConfirmDialog(FreeColClient, JFrame)",6
"net.sf.freecol.client.gui.dialog.FreeColConfirmDialog.FreeColConfirmDialog(FreeColClient, JFrame, boolean, StringTemplate, ImageIcon, String, String)",12
"net.sf.freecol.client.gui.dialog.FreeColConfirmDialog.initializeConfirmDialog(JFrame, boolean, JComponent, ImageIcon, String, String)",10
"net.sf.freecol.client.gui.dialog.FreeColDialog.FreeColDialog(FreeColClient, JFrame)",6
"net.sf.freecol.client.gui.dialog.FreeColDialog.FreeColDialog(FreeColClient, JFrame, DialogType, boolean, StringTemplate, ImageIcon, List<ChoiceItem<T>>)",15
net.sf.freecol.client.gui.dialog.FreeColDialog.choices(),6
net.sf.freecol.client.gui.dialog.FreeColDialog.getFreeColClient(),5
net.sf.freecol.client.gui.dialog.FreeColDialog.getGUI(),5
net.sf.freecol.client.gui.dialog.FreeColDialog.getGame(),5
net.sf.freecol.client.gui.dialog.FreeColDialog.getImageLibrary(),5
net.sf.freecol.client.gui.dialog.FreeColDialog.getMyPlayer(),5
net.sf.freecol.client.gui.dialog.FreeColDialog.getResponse(),5
net.sf.freecol.client.gui.dialog.FreeColDialog.getSmallAbstractUnitImage(AbstractUnit),6
net.sf.freecol.client.gui.dialog.FreeColDialog.getSpecification(),5
net.sf.freecol.client.gui.dialog.FreeColDialog.getValue(),6
net.sf.freecol.client.gui.dialog.FreeColDialog.igc(),5
"net.sf.freecol.client.gui.dialog.FreeColDialog.initializeDialog(JFrame, DialogType, boolean, JComponent, ImageIcon, List<ChoiceItem<T>>)",11
net.sf.freecol.client.gui.dialog.FreeColDialog.isModal(),5
net.sf.freecol.client.gui.dialog.FreeColDialog.iterateOverOpaqueLayersComponents(JComponent),0
net.sf.freecol.client.gui.dialog.FreeColDialog.propertyChange(PropertyChangeEvent),3
net.sf.freecol.client.gui.dialog.FreeColDialog.removeNotify(),3
net.sf.freecol.client.gui.dialog.FreeColDialog.requestFocus(),3
net.sf.freecol.client.gui.dialog.FreeColDialog.responded(),5
net.sf.freecol.client.gui.dialog.FreeColDialog.selectDefault(List<ChoiceItem<T>>),6
net.sf.freecol.client.gui.dialog.FreeColDialog.selectOptions(),6
net.sf.freecol.client.gui.dialog.FreeColDialog.setOpaqueLayerRecursive(Component),0
net.sf.freecol.client.gui.dialog.FreeColDialog.setSubcomponentsNotOpaque(JComponent),0
net.sf.freecol.client.gui.dialog.FreeColDialog.setValue(Object),5
net.sf.freecol.client.gui.dialog.FreeColDialog.setVisible(boolean),3
"net.sf.freecol.client.gui.dialog.FreeColInputDialog.FreeColInputDialog(FreeColClient, JFrame)",6
"net.sf.freecol.client.gui.dialog.FreeColInputDialog.FreeColInputDialog(FreeColClient, JFrame, boolean, StringTemplate, ImageIcon, String, String)",13
net.sf.freecol.client.gui.dialog.FreeColInputDialog.getResponse(),3
"net.sf.freecol.client.gui.dialog.FreeColInputDialog.initializeInputDialog(JFrame, boolean, JComponent, ImageIcon, String, String)",11
"net.sf.freecol.client.gui.dialog.FreeColStringInputDialog.FreeColStringInputDialog(FreeColClient, JFrame, boolean, StringTemplate, String, String, String)",11
net.sf.freecol.client.gui.dialog.FreeColStringInputDialog.getInputValue(),3
net.sf.freecol.client.gui.dialog.FreeColStringInputDialog.requestFocus(),3
"net.sf.freecol.client.gui.dialog.GameOptionsDialog.GameOptionsDialog(FreeColClient, JFrame, boolean)",7
"net.sf.freecol.client.gui.dialog.LoadDialog.LoadDialog(FreeColClient, JFrame, File, FileFilter[])",8
net.sf.freecol.client.gui.dialog.LoadDialog.getResponse(),3
"net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.LoadingSavegameDialog(FreeColClient, JFrame)",6
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.getAddress(),0
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.getInfo(),5
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.getPort(),5
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.getServerName(),5
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.isPublic(),5
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.isSinglePlayer(),5
"net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.reset(boolean, boolean)",6
"net.sf.freecol.client.gui.dialog.MapGeneratorOptionsDialog.MapGeneratorOptionsDialog(FreeColClient, JFrame, boolean)",7
net.sf.freecol.client.gui.dialog.MapGeneratorOptionsDialog.makeMapButton(File),7
net.sf.freecol.client.gui.dialog.MapGeneratorOptionsDialog.save(File),3
net.sf.freecol.client.gui.dialog.MapGeneratorOptionsDialog.updateFile(File),5
"net.sf.freecol.client.gui.dialog.MapSizeDialog.MapSizeDialog(FreeColClient, JFrame)",6
net.sf.freecol.client.gui.dialog.MapSizeDialog.getInputValue(),3
net.sf.freecol.client.gui.dialog.MapSizeDialog.requestFocus(),3
"net.sf.freecol.client.gui.dialog.MonarchDialog.MonarchDialog(FreeColClient, JFrame, MonarchAction, StringTemplate, String)",9
"net.sf.freecol.client.gui.dialog.NativeDemandDialog.NativeDemandDialog(FreeColClient, JFrame, Unit, Colony, GoodsType, int)",10
net.sf.freecol.client.gui.dialog.NegotiationDialog.ColonyTradeItemPanel.ColonyTradeItemPanel(Player),5
net.sf.freecol.client.gui.dialog.NegotiationDialog.ColonyTradeItemPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.dialog.NegotiationDialog.ColonyTradeItemPanel.update(DiplomaticTrade),5
"net.sf.freecol.client.gui.dialog.NegotiationDialog.GoldTradeItemPanel.GoldTradeItemPanel(Player, int)",6
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoldTradeItemPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoldTradeItemPanel.update(DiplomaticTrade),5
"net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel.GoodsBoxRenderer.getListCellRendererComponent(JList<? extends Goods>, Goods, int, boolean, boolean)",3
"net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel.GoodsTradeItemPanel(Player, List<Goods>)",7
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel.update(DiplomaticTrade),5
"net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel.InciteBoxRenderer.getListCellRendererComponent(JList<? extends Player>, Player, int, boolean, boolean)",3
"net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel.InciteTradeItemPanel(Player, Player)",6
net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel.update(DiplomaticTrade),5
"net.sf.freecol.client.gui.dialog.NegotiationDialog.NegotiationDialog(FreeColClient, JFrame, FreeColGameObject, FreeColGameObject, DiplomaticTrade, StringTemplate)",15
net.sf.freecol.client.gui.dialog.NegotiationDialog.RemoveAction.RemoveAction(TradeItem),0
net.sf.freecol.client.gui.dialog.NegotiationDialog.RemoveAction.actionPerformed(ActionEvent),3
"net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.StanceBoxRenderer.getListCellRendererComponent(JList<? extends Stance>, Stance, int, boolean, boolean)",3
"net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.StanceTradeItemPanel(Player, Player)",6
net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.setSelectedValue(Stance),5
net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.update(DiplomaticTrade),5
"net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel.UnitBoxRenderer.getListCellRendererComponent(JList<? extends Unit>, Unit, int, boolean, boolean)",3
"net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel.UnitTradeItemPanel(Player, List<Unit>)",7
net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel.update(DiplomaticTrade),5
"net.sf.freecol.client.gui.dialog.NegotiationDialog.addColonyTradeItem(Player, Colony)",6
"net.sf.freecol.client.gui.dialog.NegotiationDialog.addGoldTradeItem(Player, int)",6
"net.sf.freecol.client.gui.dialog.NegotiationDialog.addGoodsTradeItem(Player, Goods)",6
"net.sf.freecol.client.gui.dialog.NegotiationDialog.addInciteTradeItem(Player, Player)",6
net.sf.freecol.client.gui.dialog.NegotiationDialog.addStanceTradeItem(Stance),5
"net.sf.freecol.client.gui.dialog.NegotiationDialog.addUnitTradeItem(Player, Unit)",6
net.sf.freecol.client.gui.dialog.NegotiationDialog.getAnyGoods(),8
net.sf.freecol.client.gui.dialog.NegotiationDialog.getResponse(),3
"net.sf.freecol.client.gui.dialog.NegotiationDialog.getTradeItemButton(TradeItem, boolean)",7
net.sf.freecol.client.gui.dialog.NegotiationDialog.getUnitUnitList(Unit),6
net.sf.freecol.client.gui.dialog.NegotiationDialog.removeNotify(),3
net.sf.freecol.client.gui.dialog.NegotiationDialog.removeTradeItems(Class<? extends TradeItem>),5
net.sf.freecol.client.gui.dialog.NegotiationDialog.updateDialog(boolean),6
net.sf.freecol.client.gui.dialog.NegotiationDialog.updateSummary(),3
"net.sf.freecol.client.gui.dialog.OptionsDialog.OptionsDialog(FreeColClient, OptionGroup, String, String, String, boolean)",10
net.sf.freecol.client.gui.dialog.OptionsDialog.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.dialog.OptionsDialog.cancelOptionsDialog(),4
net.sf.freecol.client.gui.dialog.OptionsDialog.getDefaultFileName(),5
net.sf.freecol.client.gui.dialog.OptionsDialog.getGroup(),5
net.sf.freecol.client.gui.dialog.OptionsDialog.getOptionGroupId(),5
net.sf.freecol.client.gui.dialog.OptionsDialog.getOptionUI(),5
"net.sf.freecol.client.gui.dialog.OptionsDialog.initialize(JFrame, List<JButton>)",6
net.sf.freecol.client.gui.dialog.OptionsDialog.load(File),6
net.sf.freecol.client.gui.dialog.OptionsDialog.loadDefaultOptions(),5
"net.sf.freecol.client.gui.dialog.OptionsDialog.preparePanel(String, OptionGroupUI)",6
net.sf.freecol.client.gui.dialog.OptionsDialog.save(File),6
net.sf.freecol.client.gui.dialog.OptionsDialog.saveDefaultOptions(),5
net.sf.freecol.client.gui.dialog.OptionsDialog.set(OptionGroup),5
net.sf.freecol.client.gui.dialog.OptionsDialog.setDialogHandler(DialogHandler<OptionGroup>),0
net.sf.freecol.client.gui.dialog.OptionsDialog.update(),3
"net.sf.freecol.client.gui.dialog.Parameters.Parameters(int, int)",0
"net.sf.freecol.client.gui.dialog.ParametersDialog.ParametersDialog(FreeColClient, JFrame)",6
net.sf.freecol.client.gui.dialog.ParametersDialog.checkFields(),3
net.sf.freecol.client.gui.dialog.ParametersDialog.getResponse(),3
net.sf.freecol.client.gui.dialog.ParametersDialog.requestFocus(),3
"net.sf.freecol.client.gui.dialog.PreCombatDialog.PreCombatDialog(FreeColClient, JFrame, Unit, FreeColGameObject)",9
"net.sf.freecol.client.gui.dialog.PreCombatDialog.addLabels(JPanel, JLabel[], boolean, int)",0
"net.sf.freecol.client.gui.dialog.RiverStyleDialog.RiverStyleDialog(FreeColClient, JFrame, List<String>)",7
"net.sf.freecol.client.gui.dialog.SaveDialog.SaveDialog(FreeColClient, JFrame, File, FileFilter[], String)",9
net.sf.freecol.client.gui.dialog.SaveDialog.getResponse(),3
"net.sf.freecol.client.gui.dialog.ScaleMapSizeDialog.ScaleMapSizeDialog(FreeColClient, JFrame)",6
net.sf.freecol.client.gui.dialog.ScaleMapSizeDialog.checkFields(),3
net.sf.freecol.client.gui.dialog.ScaleMapSizeDialog.getResponse(),3
net.sf.freecol.client.gui.dialog.ScaleMapSizeDialog.requestFocus(),0
"net.sf.freecol.client.gui.dialog.SelectAmountDialog.SelectAmountDialog(FreeColClient, JFrame, GoodsType, int, int, boolean)",10
net.sf.freecol.client.gui.dialog.SelectAmountDialog.getInputValue(),3
net.sf.freecol.client.gui.dialog.SelectAmountDialog.requestFocus(),3
net.sf.freecol.client.gui.dialog.SelectAmountDialog.verifyWholeBox(JComboBox<Integer>),6
"net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.Destination(Location, int, Unit, List<GoodsType>)",8
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.calculateScore(),0
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.getDestinationComparator(int),0
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.getDestinationComparatorIndex(Comparator<Destination>),0
"net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.getExtras(Location, Unit, List<GoodsType>)",10
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.getScore(),0
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.getTurns(),0
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.LocationRenderer.LocationRenderer(ImageLibrary),5
"net.sf.freecol.client.gui.dialog.SelectDestinationDialog.LocationRenderer.setLabelValues(JLabel, Destination)",3
"net.sf.freecol.client.gui.dialog.SelectDestinationDialog.SelectDestinationDialog(FreeColClient, JFrame, Unit)",7
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.getDestinationComparator(),5
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.getResponse(),3
"net.sf.freecol.client.gui.dialog.SelectDestinationDialog.loadDestinations(Unit, List<GoodsType>)",6
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.recenter(Destination),5
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.removeNotify(),3
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.requestFocus(),3
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.setDestinationComparator(Comparator<Destination>),5
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.updateDestinationComparator(),3
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.updateDestinationList(),3
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.valueChanged(ListSelectionEvent),3
"net.sf.freecol.client.gui.dialog.SelectTributeAmountDialog.SelectTributeAmountDialog(FreeColClient, JFrame, StringTemplate, int)",9
net.sf.freecol.client.gui.dialog.SelectTributeAmountDialog.getInputValue(),3
net.sf.freecol.client.gui.dialog.SelectTributeAmountDialog.requestFocus(),3
"net.sf.freecol.client.gui.dialog.VictoryDialog.VictoryDialog(FreeColClient, JFrame)",6
"net.sf.freecol.client.gui.dialog.WarehouseDialog.WarehouseDialog(FreeColClient, Colony, DialogHandler<Boolean>)",7
"net.sf.freecol.client.gui.dialog.WarehouseDialog.WarehouseGoodsPanel.WarehouseGoodsPanel(FreeColClient, Colony, GoodsType)",0
net.sf.freecol.client.gui.dialog.WarehouseDialog.WarehouseGoodsPanel.saveSettings(),0
"net.sf.freecol.client.gui.dialog.WarehouseDialog.createWarehousePanel(FreeColClient, Colony)",0
net.sf.freecol.client.gui.dialog.WarehouseDialog.scrollPaneWithHiddenBorder(JPanel),0
"net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.BaseTileTransitionImageCreator(ImageLibrary, ImageCache)",0
"net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.getBaseTileTransitionImage(Tile, Direction, boolean, boolean)",12
net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.getSpecialBeachBaseTileTransitionImage(Direction),3
net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.getSpecialBeachBaseTileTransitionMask(Direction),0
"net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.getTerrainOrBeachImageResource(Tile, Tile)",3
"net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.shouldIncludeSpecialBeachTransitionInDirection(Tile, Tile, Direction)",10
"net.sf.freecol.client.gui.images.BeachTileAnimationImageCreator.BeachTileAnimationImageCreator(ImageLibrary, ImageCache)",0
net.sf.freecol.client.gui.images.BeachTileAnimationImageCreator.determineDirectionCombinationKey(List<Direction>),7
"net.sf.freecol.client.gui.images.BeachTileAnimationImageCreator.generateImage(BufferedImage, BufferedImage, int, BufferedImage, BufferedImage)",13
"net.sf.freecol.client.gui.images.BeachTileAnimationImageCreator.getAnimatedScaledWaterAndBeachTerrainImage(TileType, List<Direction>, long)",8
"net.sf.freecol.client.gui.images.DeltaAnimationImageCreator.DeltaAnimationImageCreator(ImageLibrary, ImageCache)",0
"net.sf.freecol.client.gui.images.DeltaAnimationImageCreator.generateImage(BufferedImage, BufferedImage, int, BufferedImage, BufferedImage, BufferedImage)",15
"net.sf.freecol.client.gui.images.DeltaAnimationImageCreator.getAnimatedScaledRiverDeltaTerrainImage(Direction, long)",7
net.sf.freecol.client.gui.images.DeltaAnimationImageCreator.getRiverPebblesImageResource(),0
"net.sf.freecol.client.gui.images.ImageCreators.ImageCreators(ImageLibrary, ImageCache)",0
net.sf.freecol.client.gui.images.ImageCreators.getBaseTileTransitionImageCreator(),0
net.sf.freecol.client.gui.images.ImageCreators.getBeachTileAnimationImageCreator(),0
net.sf.freecol.client.gui.images.ImageCreators.getDeltaAnimationImageCreator(),0
net.sf.freecol.client.gui.images.ImageCreators.getRiverAnimationImageCreator(),0
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.RiverAnimationImageCreator(ImageLibrary, ImageCache)",0
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.createRiverMaskImageWithTransitions(BufferedImage, List<Direction>)",0
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.determineMinorToMajorRiverTransitions(Tile, List<Direction>)",0
net.sf.freecol.client.gui.images.RiverAnimationImageCreator.determineRiverCombinations(Tile),0
net.sf.freecol.client.gui.images.RiverAnimationImageCreator.determineRiverTransitionsUsingStyle(Tile),0
net.sf.freecol.client.gui.images.RiverAnimationImageCreator.directionsToString(List<Direction>),0
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.generateImage(BufferedImage, BufferedImage, int, BufferedImage, BufferedImage)",15
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.getAnimatedScaledRiverTerrainImage(Tile, long)",7
net.sf.freecol.client.gui.images.RiverAnimationImageCreator.getRiverPebblesImageResource(),0
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.toLargerMaskWithLessTransparency(BufferedImage, int, int)",0
"net.sf.freecol.client.gui.label.AbstractGoodsLabel.AbstractGoodsLabel(FreeColClient, AbstractGoods)",7
net.sf.freecol.client.gui.label.AbstractGoodsLabel.equals(Object),3
net.sf.freecol.client.gui.label.AbstractGoodsLabel.getAbstractGoods(),5
net.sf.freecol.client.gui.label.AbstractGoodsLabel.getAmount(),5
net.sf.freecol.client.gui.label.AbstractGoodsLabel.getImageLibrary(),5
net.sf.freecol.client.gui.label.AbstractGoodsLabel.getType(),5
net.sf.freecol.client.gui.label.AbstractGoodsLabel.hashCode(),3
net.sf.freecol.client.gui.label.AbstractGoodsLabel.isFullChosen(),5
net.sf.freecol.client.gui.label.AbstractGoodsLabel.isPartialChosen(),5
net.sf.freecol.client.gui.label.AbstractGoodsLabel.isSuperFullChosen(),5
net.sf.freecol.client.gui.label.AbstractGoodsLabel.setAmount(int),5
net.sf.freecol.client.gui.label.AbstractGoodsLabel.setDefaultAmount(),5
net.sf.freecol.client.gui.label.AbstractGoodsLabel.setFullChosen(boolean),5
net.sf.freecol.client.gui.label.AbstractGoodsLabel.setPartialChosen(boolean),5
net.sf.freecol.client.gui.label.AbstractGoodsLabel.setSuperFullChosen(boolean),6
"net.sf.freecol.client.gui.label.CargoLabel.removeCargo(Component, CargoPanel)",6
net.sf.freecol.client.gui.label.FreeColLabel.FreeColLabel(),9
net.sf.freecol.client.gui.label.FreeColLabel.FreeColLabel(Icon),7
"net.sf.freecol.client.gui.label.GoodsLabel.GoodsLabel(FreeColClient, Goods)",6
"net.sf.freecol.client.gui.label.GoodsLabel.addCargo(Component, Unit, CargoPanel)",3
net.sf.freecol.client.gui.label.GoodsLabel.getGoods(),5
net.sf.freecol.client.gui.label.GoodsLabel.initialize(),3
net.sf.freecol.client.gui.label.GoodsLabel.isOnCarrier(),3
"net.sf.freecol.client.gui.label.GoodsLabel.removeCargo(Component, CargoPanel)",3
"net.sf.freecol.client.gui.label.GoodsTypeLabel.GoodsTypeLabel(FreeColClient, GoodsType)",6
net.sf.freecol.client.gui.label.GoodsTypeLabel.GoodsTypeLabel(GoodsTypeLabel),0
"net.sf.freecol.client.gui.label.GoodsTypeLabel.GoodsTypeLabel(ImageLibrary, GoodsType)",6
net.sf.freecol.client.gui.label.GoodsTypeLabel.equals(Object),3
net.sf.freecol.client.gui.label.GoodsTypeLabel.getImageLibrary(),5
net.sf.freecol.client.gui.label.GoodsTypeLabel.getType(),5
net.sf.freecol.client.gui.label.GoodsTypeLabel.hashCode(),3
"net.sf.freecol.client.gui.label.MarketLabel.MarketLabel(FreeColClient, GoodsType, Market)",7
net.sf.freecol.client.gui.label.MarketLabel.addBorder(),5
"net.sf.freecol.client.gui.label.MarketLabel.addCargo(Component, Unit, CargoPanel)",3
net.sf.freecol.client.gui.label.MarketLabel.getMarket(),5
net.sf.freecol.client.gui.label.MarketLabel.isOnCarrier(),5
net.sf.freecol.client.gui.label.MarketLabel.propertyChange(PropertyChangeEvent),3
net.sf.freecol.client.gui.label.MarketLabel.setDefaultAmount(),4
net.sf.freecol.client.gui.label.MarketLabel.update(),3
"net.sf.freecol.client.gui.label.ProductionLabel.ProductionLabel(FreeColClient, AbstractGoods)",6
"net.sf.freecol.client.gui.label.ProductionLabel.ProductionLabel(FreeColClient, AbstractGoods, int)",7
"net.sf.freecol.client.gui.label.ProductionLabel.ProductionLabel(FreeColClient, AbstractGoods, int, int, boolean)",9
net.sf.freecol.client.gui.label.ProductionLabel.getMinimumSize(),0
net.sf.freecol.client.gui.label.ProductionLabel.getPreferredSize(),3
net.sf.freecol.client.gui.label.ProductionLabel.getProductionStringWidth(),0
net.sf.freecol.client.gui.label.ProductionLabel.numberOfGoodsIconsToDisplay(),0
net.sf.freecol.client.gui.label.ProductionLabel.paintComponent(Graphics),3
"net.sf.freecol.client.gui.label.UnitLabel.UnitLabel(FreeColClient, Unit)",6
"net.sf.freecol.client.gui.label.UnitLabel.UnitLabel(FreeColClient, Unit, boolean)",7
"net.sf.freecol.client.gui.label.UnitLabel.UnitLabel(FreeColClient, Unit, boolean, boolean)",9
net.sf.freecol.client.gui.label.UnitLabel.actionPerformed(ActionEvent),3
"net.sf.freecol.client.gui.label.UnitLabel.addCargo(Component, Unit, CargoPanel)",3
net.sf.freecol.client.gui.label.UnitLabel.getGUI(),5
net.sf.freecol.client.gui.label.UnitLabel.getImageLibrary(),5
net.sf.freecol.client.gui.label.UnitLabel.getUnit(),5
net.sf.freecol.client.gui.label.UnitLabel.isOnCarrier(),3
net.sf.freecol.client.gui.label.UnitLabel.paintComponent(Graphics),3
"net.sf.freecol.client.gui.label.UnitLabel.removeCargo(Component, CargoPanel)",3
net.sf.freecol.client.gui.label.UnitLabel.setDescriptionLabel(String),8
net.sf.freecol.client.gui.label.UnitLabel.setEnabled(boolean),3
net.sf.freecol.client.gui.label.UnitLabel.setSelected(boolean),5
net.sf.freecol.client.gui.label.UnitLabel.setSmall(boolean),5
net.sf.freecol.client.gui.label.UnitLabel.updateIcon(),3
"net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.CanvasMapViewer(FreeColClient, MapViewer)",0
net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.changeSize(Dimension),5
"net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.drawRenderingTimeStrings(Graphics, long, boolean)",0
net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.isMapAvailable(),0
"net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.paintBlackBackground(Graphics2D, Dimension)",0
net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.paintComponent(Graphics),0
net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.paintImmediately(),0
"net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.paintMainMenuBackground(Graphics2D, Dimension)",0
net.sf.freecol.client.gui.mapviewer.ChatDisplay.ChatDisplay(FreeColClient),5
net.sf.freecol.client.gui.mapviewer.ChatDisplay.addMessage(GUIMessage),6
"net.sf.freecol.client.gui.mapviewer.ChatDisplay.display(Graphics2D, Dimension)",6
net.sf.freecol.client.gui.mapviewer.ChatDisplay.prepareMessages(),5
"net.sf.freecol.client.gui.mapviewer.GUIMessage.GUIMessage(String, Color)",7
net.sf.freecol.client.gui.mapviewer.GUIMessage.getColor(),5
net.sf.freecol.client.gui.mapviewer.GUIMessage.getCreationTime(),5
net.sf.freecol.client.gui.mapviewer.GUIMessage.getMessage(),5
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapAsyncPainter(MapViewer),0
"net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread.MapRendererThread(Dimension, TileBounds, Tile, Point)",0
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread.deliverRenderedImage(Point),0
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread.paint(),0
"net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread.produceRenderedImage(Point, Direction)",0
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread.run(),0
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.determineMapFocusPointOnRender(long),0
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.getBackBufferImage(),5
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.getNewFocusPoint(long),0
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.isStopped(),4
"net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.plusOffsets(Point, Direction, int, int)",0
"net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.scrollFocusOnBufferSize(Point, Direction)",0
"net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.scrollFocusOnOriginalSize(Point, Direction)",0
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.setScrollDirection(Direction),5
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.stop(),3
"net.sf.freecol.client.gui.mapviewer.MapViewer.MapViewer(FreeColClient, ImageLibrary, ActionListener)",8
"net.sf.freecol.client.gui.mapviewer.MapViewer.TextSpecification.TextSpecification(String, Font)",0
"net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.TileClippingBounds(MapViewerBounds, Map, Rectangle)",0
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getBaseTiles(),6
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getBottomRightDirtyTile(),0
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getExtendedTiles(),6
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getSuperExtendedTiles(),7
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getTopLeftDirtyTile(),0
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getUnitTiles(),6
net.sf.freecol.client.gui.mapviewer.MapViewer.applyRenderingHints(Graphics2D),0
net.sf.freecol.client.gui.mapviewer.MapViewer.calculateUnitImagePositionInTile(BufferedImage),6
net.sf.freecol.client.gui.mapviewer.MapViewer.changeScale(float),5
net.sf.freecol.client.gui.mapviewer.MapViewer.changeSize(Dimension),5
"net.sf.freecol.client.gui.mapviewer.MapViewer.convertToMapTile(int, int)",9
"net.sf.freecol.client.gui.mapviewer.MapViewer.createCapitalLabel(int, int, Color)",8
"net.sf.freecol.client.gui.mapviewer.MapViewer.createLabel(Graphics2D, String, Font, Color)",10
"net.sf.freecol.client.gui.mapviewer.MapViewer.createLabel(Graphics2D, TextSpecification[], Color)",9
"net.sf.freecol.client.gui.mapviewer.MapViewer.createReligiousMissionLabel(int, int, Color, boolean)",10
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayDebugAiDefensiveMap(Graphics2D, TileClippingBounds)",0
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayGrid(Graphics2D, ClientOptions, TileClippingBounds)",0
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayMap(Graphics2D, Dimension)",7
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayNonAnimationImages(Graphics2D, Rectangle, TileClippingBounds, boolean)",0
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayPath(Graphics2D, PathNode, MapViewerBounds)",6
"net.sf.freecol.client.gui.mapviewer.MapViewer.displaySettlementLabels(Graphics2D, Settlement, Player, int, RescaleOp)",0
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayTerritorialBorders(Graphics2D, Tile, BorderType, boolean)",9
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayToNonAnimationBufferImage(MapViewerBounds, Rectangle, Graphics2D, Map, boolean)",0
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayUnit(Graphics2D, Unit)",7
net.sf.freecol.client.gui.mapviewer.MapViewer.getMapViewerBounds(),9
net.sf.freecol.client.gui.mapviewer.MapViewer.getMapViewerRepaintManager(),9
net.sf.freecol.client.gui.mapviewer.MapViewer.getMapViewerState(),8
net.sf.freecol.client.gui.mapviewer.MapViewer.getTileBounds(),6
net.sf.freecol.client.gui.mapviewer.MapViewer.getVisibleCursorTile(MapViewerBounds),9
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintBlackBackground(Graphics2D, Rectangle)",0
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintEachTile(Graphics2D, Position, List<Tile>, TileRenderingCallback)",0
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintEachTile(Graphics2D, TileClippingBounds, TileRenderingCallback)",10
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintEachTileWithExtendedImageSize(Graphics2D, TileClippingBounds, TileRenderingCallback)",14
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintEachTileWithSuperExtendedImageSize(Graphics2D, TileClippingBounds, TileRenderingCallback)",14
net.sf.freecol.client.gui.mapviewer.MapViewer.paintImmediatelyToBuffersOnly(),9
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintMap(Graphics2D, Dimension, MapViewerBounds)",11
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintMap(Graphics2D, Dimension, MapViewerBounds, boolean)",0
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintSingleTile(Graphics2D, TileClippingBounds, Tile, TileRenderingCallback)",11
"net.sf.freecol.client.gui.mapviewer.MapViewer.shouldFogOfWarBeDisplayed(Player, ClientOptions)",0
net.sf.freecol.client.gui.mapviewer.MapViewer.stopMapAsyncPainter(),3
net.sf.freecol.client.gui.mapviewer.MapViewer.updateScaledVariables(),3
net.sf.freecol.client.gui.mapviewer.MapViewer.useMapAsyncPainter(),3
"net.sf.freecol.client.gui.mapviewer.MapViewer.verifyAndMarkAsClean(Dimension, Rectangle)",0
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.MapViewerBounds(),0
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.calculateDrawnTileBounds(Tile),13
"net.sf.freecol.client.gui.mapviewer.MapViewerBounds.calculateTilePosition(Tile, boolean)",9
"net.sf.freecol.client.gui.mapviewer.MapViewerBounds.changeSize(Dimension, TileBounds)",0
"net.sf.freecol.client.gui.mapviewer.MapViewerBounds.convertToMapTile(Map, int, int)",10
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getBottomRightVisibleTile(),0
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getFocus(),5
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getFocusMapPoint(),6
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getSize(),0
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getTileBounds(),0
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getTopLeftVisibleTile(),0
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getTopLeftVisibleTilePoint(),0
"net.sf.freecol.client.gui.mapviewer.MapViewerBounds.inRange(int, int, int)",0
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.isTileVisible(Tile),6
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.onScreen(Tile),9
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.positionMap(),3
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.resetScrollSpeed(),0
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.scrollMap(Direction),9
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.setFocus(Tile),10
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.setFocusMapPoint(Point),9
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.setOffsetFocus(Tile),13
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.tileToPoint(Tile),9
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.updateSizeVariables(TileBounds),5
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.MapViewerRepaintManager(),0
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.getBackBufferImage(),5
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.getDirtyClipBounds(),5
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.getNonAnimationBufferImage(),6
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.initializeBuffers(Dimension),0
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.isAllDirty(),6
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.isBuffersUninitialized(Dimension),0
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.isRepaintsBlocked(Dimension),9
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.markAsClean(),6
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.markAsDirty(),4
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.markAsDirty(Collection<Tile>),5
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.markAsDirty(Rectangle),8
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.markAsDirty(Tile),5
"net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.moveContents(Image, int, int)",7
"net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.moveContentsAndRecreateImage(BufferedImage, int, int)",12
"net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.prepareBuffers(MapViewerBounds, Tile)",9
"net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.reuseNonDirtyAreasIfPossible(MapViewerBounds, Tile, Point)",8
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.setRepaintsBlocked(boolean),13
"net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.updateDirtyRegion(MapViewerBounds, int, int)",9
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.updateDirtyRegionWithDirtyTiles(MapViewerBounds),0
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.MapViewerScaledUtils(),0
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getBorderPoints(),0
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getBorderStroke(),0
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getControlPoints(),0
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getFog(),0
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getFontItalic(),0
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getFontNormal(),0
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getFontProduction(),0
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getFontTiny(),0
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getGridStroke(),0
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.updateScaledVariables(ImageLibrary),0
"net.sf.freecol.client.gui.mapviewer.MapViewerState.MapViewerState(ChatDisplay, UnitAnimator, ActionListener)",0
net.sf.freecol.client.gui.mapviewer.MapViewerState.changeGotoPath(PathNode),6
net.sf.freecol.client.gui.mapviewer.MapViewerState.displayChat(GUIMessage),5
net.sf.freecol.client.gui.mapviewer.MapViewerState.findUnitInFront(Tile),8
net.sf.freecol.client.gui.mapviewer.MapViewerState.getActiveUnit(),5
net.sf.freecol.client.gui.mapviewer.MapViewerState.getChatDisplay(),0
net.sf.freecol.client.gui.mapviewer.MapViewerState.getCursor(),0
net.sf.freecol.client.gui.mapviewer.MapViewerState.getCursorTile(),5
net.sf.freecol.client.gui.mapviewer.MapViewerState.getGotoPath(),5
net.sf.freecol.client.gui.mapviewer.MapViewerState.getSelectedTile(),5
net.sf.freecol.client.gui.mapviewer.MapViewerState.getUnitAnimator(),0
net.sf.freecol.client.gui.mapviewer.MapViewerState.getUnitPath(),0
net.sf.freecol.client.gui.mapviewer.MapViewerState.getViewMode(),5
net.sf.freecol.client.gui.mapviewer.MapViewerState.isRangedAttackMode(),0
net.sf.freecol.client.gui.mapviewer.MapViewerState.setActiveUnit(Unit),5
net.sf.freecol.client.gui.mapviewer.MapViewerState.setCursorBlinking(boolean),6
net.sf.freecol.client.gui.mapviewer.MapViewerState.setRangedAttackMode(boolean),0
net.sf.freecol.client.gui.mapviewer.MapViewerState.setSelectedTile(Tile),5
net.sf.freecol.client.gui.mapviewer.MapViewerState.setUnitPath(PathNode),5
net.sf.freecol.client.gui.mapviewer.MapViewerState.setViewMode(ViewMode),5
net.sf.freecol.client.gui.mapviewer.RoadPainter.RoadPainter(Dimension),5
"net.sf.freecol.client.gui.mapviewer.RoadPainter.displayRoad(Graphics2D, Tile, RescaleOp)",7
net.sf.freecol.client.gui.mapviewer.TerrainCursor.TerrainCursor(),3
net.sf.freecol.client.gui.mapviewer.TerrainCursor.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.mapviewer.TerrainCursor.addActionListener(ActionListener),0
net.sf.freecol.client.gui.mapviewer.TerrainCursor.isActive(),5
net.sf.freecol.client.gui.mapviewer.TerrainCursor.removeActionListener(ActionListener),0
net.sf.freecol.client.gui.mapviewer.TerrainCursor.startBlinking(),0
net.sf.freecol.client.gui.mapviewer.TerrainCursor.stopBlinking(),0
"net.sf.freecol.client.gui.mapviewer.TileBounds.TileBounds(Dimension, float)",0
"net.sf.freecol.client.gui.mapviewer.TileBounds.calculateUnitLabelPositionInTile(JLabel, Point)",7
net.sf.freecol.client.gui.mapviewer.TileBounds.getHalfHeight(),0
net.sf.freecol.client.gui.mapviewer.TileBounds.getHalfWidth(),0
net.sf.freecol.client.gui.mapviewer.TileBounds.getHeight(),0
net.sf.freecol.client.gui.mapviewer.TileBounds.getWidth(),0
"net.sf.freecol.client.gui.mapviewer.TileViewer.TileViewer(FreeColClient, ImageLibrary)",6
net.sf.freecol.client.gui.mapviewer.TileViewer.allDirectionsWithLand(Tile),0
"net.sf.freecol.client.gui.mapviewer.TileViewer.createColonyTileImage(Tile, Colony)",14
"net.sf.freecol.client.gui.mapviewer.TileViewer.createTileImage(Tile, Player)",9
net.sf.freecol.client.gui.mapviewer.TileViewer.createTileImageWithBeachBorderAndItems(Tile),9
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayAnimatedBaseTiles(Graphics2D, Tile, boolean)",7
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayCenteredImage(Graphics2D, BufferedImage)",6
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayCenteredImage(Graphics2D, BufferedImage, RescaleOp)",7
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayColonyTile(Graphics2D, Tile, Colony, BufferedImage)",14
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayColonyTiles(Graphics2D, Tile[][], Colony)",11
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayLargeCenteredImage(Graphics2D, BufferedImage, RescaleOp)",8
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayOptionalTileText(Graphics2D, Tile)",7
"net.sf.freecol.client.gui.mapviewer.TileViewer.displaySettlementWithChipsOrPopulationNumber(Graphics2D, Tile, boolean, RescaleOp)",10
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayTile(Graphics2D, Tile, Player, BufferedImage)",8
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayTileItem(Graphics2D, Tile, RescaleOp, TileItem)",8
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayTileItems(Graphics2D, Tile, RescaleOp, BufferedImage)",10
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayTileWithBeach(Graphics2D, Tile)",7
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayUnknownTileBorder(Graphics2D, Tile)",0
"net.sf.freecol.client.gui.mapviewer.TileViewer.drawBaseTileTransitionAtDirection(Graphics2D, Tile, Direction)",0
"net.sf.freecol.client.gui.mapviewer.TileViewer.drawBaseTileTransitions(Graphics2D, Tile)",0
"net.sf.freecol.client.gui.mapviewer.TileViewer.drawForestCornerImageFor(Tile, Graphics2D, Direction, Direction, Direction)",0
"net.sf.freecol.client.gui.mapviewer.TileViewer.drawForestCornerImages(Tile, Graphics2D)",0
"net.sf.freecol.client.gui.mapviewer.TileViewer.drawRiverMouth(Graphics2D, Tile, long)",0
net.sf.freecol.client.gui.mapviewer.TileViewer.hasRiverDelta(Tile),0
"net.sf.freecol.client.gui.mapviewer.TileViewer.hasSameForestedTileType(Tile, Tile)",0
net.sf.freecol.client.gui.mapviewer.TileViewer.updateScaledVariables(),3
"net.sf.freecol.client.gui.mapviewer.UnitAnimator.UnitAnimator(FreeColClient, MapViewer, ImageLibrary)",0
net.sf.freecol.client.gui.mapviewer.UnitAnimator.createUnitAnimationLabel(Unit),6
net.sf.freecol.client.gui.mapviewer.UnitAnimator.enterUnitOutForAnimation(Unit),6
"net.sf.freecol.client.gui.mapviewer.UnitAnimator.getAnimationPosition(JLabel, Tile)",7
net.sf.freecol.client.gui.mapviewer.UnitAnimator.isOutForAnimation(Unit),6
net.sf.freecol.client.gui.mapviewer.UnitAnimator.isUnitsOutForAnimation(),5
net.sf.freecol.client.gui.mapviewer.UnitAnimator.releaseUnitOutForAnimation(Unit),5
net.sf.freecol.client.gui.menu.DebugMenu.DebugMenu(FreeColClient),5
"net.sf.freecol.client.gui.menu.DebugMenu.addGameMapOptions(Game, GUI, Player)",0
net.sf.freecol.client.gui.menu.DebugMenu.buildDebugMenu(),3
"net.sf.freecol.client.gui.menu.FreeColMenuBar.FreeColMenuBar(FreeColClient, MouseMotionListener)",6
net.sf.freecol.client.gui.menu.FreeColMenuBar.add(JMenu),0
net.sf.freecol.client.gui.menu.FreeColMenuBar.buildColopediaMenu(),0
net.sf.freecol.client.gui.menu.FreeColMenuBar.getCheckBoxMenuItem(String),7
net.sf.freecol.client.gui.menu.FreeColMenuBar.getMenuItem(String),7
"net.sf.freecol.client.gui.menu.FreeColMenuBar.getMenuItem(String, ActionListener)",9
"net.sf.freecol.client.gui.menu.FreeColMenuBar.getRadioButtonMenuItem(String, ButtonGroup)",8
net.sf.freecol.client.gui.menu.FreeColMenuBar.paintComponent(Graphics),3
net.sf.freecol.client.gui.menu.FreeColMenuBar.setEnabled(boolean),4
net.sf.freecol.client.gui.menu.FreeColMenuBar.update(),3
net.sf.freecol.client.gui.menu.FreeColMenuTest.actionPerformed(ActionEvent),0
net.sf.freecol.client.gui.menu.FreeColMenuTest.createAndShowGUI(),5
net.sf.freecol.client.gui.menu.FreeColMenuTest.createContentPane(),0
net.sf.freecol.client.gui.menu.FreeColMenuTest.createImageIcon(String),5
net.sf.freecol.client.gui.menu.FreeColMenuTest.createMenuBar(),0
net.sf.freecol.client.gui.menu.FreeColMenuTest.getClassName(Object),0
net.sf.freecol.client.gui.menu.FreeColMenuTest.itemStateChanged(ItemEvent),0
net.sf.freecol.client.gui.menu.FreeColMenuTest.main(String[]),0
"net.sf.freecol.client.gui.menu.InGameMenuBar.InGameMenuBar(FreeColClient, MouseMotionListener)",7
net.sf.freecol.client.gui.menu.InGameMenuBar.buildGameMenu(),0
net.sf.freecol.client.gui.menu.InGameMenuBar.buildOrdersMenu(),0
net.sf.freecol.client.gui.menu.InGameMenuBar.buildReportMenu(),0
net.sf.freecol.client.gui.menu.InGameMenuBar.buildViewMenu(),0
net.sf.freecol.client.gui.menu.InGameMenuBar.paintComponent(Graphics),3
net.sf.freecol.client.gui.menu.InGameMenuBar.reset(),3
"net.sf.freecol.client.gui.menu.MapEditorMenuBar.MapEditorMenuBar(FreeColClient, MouseMotionListener)",7
net.sf.freecol.client.gui.menu.MapEditorMenuBar.buildGameMenu(),0
net.sf.freecol.client.gui.menu.MapEditorMenuBar.buildToolsMenu(),0
net.sf.freecol.client.gui.menu.MapEditorMenuBar.buildViewMenu(),0
net.sf.freecol.client.gui.menu.MapEditorMenuBar.reset(),3
net.sf.freecol.client.gui.menu.MenuMouseMotionListener.MenuMouseMotionListener(Scrolling),5
net.sf.freecol.client.gui.menu.MenuMouseMotionListener.mouseDragged(MouseEvent),3
net.sf.freecol.client.gui.menu.MenuMouseMotionListener.mouseMoved(MouseEvent),3
"net.sf.freecol.client.gui.option.AbstractUnitOptionUI.AbstractUnitOptionUI(AbstractUnitOption, boolean)",8
"net.sf.freecol.client.gui.option.AbstractUnitOptionUI.AbstractUnitRenderer.setLabelValues(JLabel, AbstractUnitOption)",0
"net.sf.freecol.client.gui.option.AbstractUnitOptionUI.RoleRenderer.setLabelValues(JLabel, String)",0
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.getListCellRenderer(),3
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.itemStateChanged(ItemEvent),3
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.reset(),3
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.updateOption(),3
"net.sf.freecol.client.gui.option.AudioMixerOptionUI.AudioMixerOptionUI(GUI, AudioMixerOption, boolean)",9
net.sf.freecol.client.gui.option.AudioMixerOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.AudioMixerOptionUI.getJLabel(),3
net.sf.freecol.client.gui.option.AudioMixerOptionUI.reset(),3
net.sf.freecol.client.gui.option.AudioMixerOptionUI.updateMixerLabel(),0
net.sf.freecol.client.gui.option.AudioMixerOptionUI.updateOption(),4
"net.sf.freecol.client.gui.option.BooleanOptionUI.BooleanOptionUI(BooleanOption, boolean)",8
net.sf.freecol.client.gui.option.BooleanOptionUI.addActionListener(ActionListener),0
net.sf.freecol.client.gui.option.BooleanOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.BooleanOptionUI.getValue(),0
net.sf.freecol.client.gui.option.BooleanOptionUI.removeActionListener(ActionListener),0
net.sf.freecol.client.gui.option.BooleanOptionUI.reset(),3
net.sf.freecol.client.gui.option.BooleanOptionUI.setValue(boolean),5
net.sf.freecol.client.gui.option.BooleanOptionUI.updateOption(),3
"net.sf.freecol.client.gui.option.FileOptionUI.FileOptionUI(GUI, FileOption, boolean)",8
net.sf.freecol.client.gui.option.FileOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.FileOptionUI.reset(),3
net.sf.freecol.client.gui.option.FileOptionUI.setValue(File),5
net.sf.freecol.client.gui.option.FileOptionUI.updateOption(),3
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.BlinkingLabel(),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.getMinimumSize(),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.getPreferredSize(),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.keyPressed(KeyEvent),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.keyReleased(KeyEvent),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.keyTyped(KeyEvent),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.mouseClicked(MouseEvent),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.mouseEntered(MouseEvent),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.mouseExited(MouseEvent),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.mousePressed(MouseEvent),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.mouseReleased(MouseEvent),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.startBlinking(),0
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.stopBlinking(),0
"net.sf.freecol.client.gui.option.FreeColActionUI.FreeColActionUI(FreeColAction, boolean)",8
net.sf.freecol.client.gui.option.FreeColActionUI.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.option.FreeColActionUI.getComponent(),3
net.sf.freecol.client.gui.option.FreeColActionUI.getHumanKeyStrokeText(KeyStroke),6
net.sf.freecol.client.gui.option.FreeColActionUI.getRecordImage(),4
net.sf.freecol.client.gui.option.FreeColActionUI.getRemoveImage(),4
net.sf.freecol.client.gui.option.FreeColActionUI.removeKeyStroke(KeyStroke),8
net.sf.freecol.client.gui.option.FreeColActionUI.reset(),3
net.sf.freecol.client.gui.option.FreeColActionUI.setOptionGroupUI(OptionGroupUI),0
net.sf.freecol.client.gui.option.FreeColActionUI.updateOption(),3
"net.sf.freecol.client.gui.option.IntegerOptionUI.IntegerOptionUI(IntegerOption, boolean)",7
net.sf.freecol.client.gui.option.IntegerOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.IntegerOptionUI.reset(),3
net.sf.freecol.client.gui.option.IntegerOptionUI.updateOption(),3
"net.sf.freecol.client.gui.option.LanguageOptionUI.LanguageOptionUI(LanguageOption, boolean)",8
net.sf.freecol.client.gui.option.LanguageOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.LanguageOptionUI.reset(),3
net.sf.freecol.client.gui.option.LanguageOptionUI.updateOption(),3
"net.sf.freecol.client.gui.option.ListOptionUI.ListOptionUI(GUI, ListOption<T>, boolean, Function<AbstractOption, Boolean>)",10
net.sf.freecol.client.gui.option.ListOptionUI.canModifyChoice(AbstractOption<T>),0
net.sf.freecol.client.gui.option.ListOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.ListOptionUI.getJLabel(),3
net.sf.freecol.client.gui.option.ListOptionUI.getValue(),0
net.sf.freecol.client.gui.option.ListOptionUI.reset(),3
"net.sf.freecol.client.gui.option.ListOptionUI.setCellRenderer(GUI, AbstractOption<T>, boolean)",0
net.sf.freecol.client.gui.option.ListOptionUI.updateOption(),3
net.sf.freecol.client.gui.option.ListOptionUI.valueChanged(ListSelectionEvent),3
net.sf.freecol.client.gui.option.ModOptionUI.BoxRenderer.BoxRenderer(GUI),0
"net.sf.freecol.client.gui.option.ModOptionUI.BoxRenderer.setLabelValues(JLabel, FreeColModFile)",3
net.sf.freecol.client.gui.option.ModOptionUI.ModOptionRenderer.ModOptionRenderer(GUI),0
"net.sf.freecol.client.gui.option.ModOptionUI.ModOptionRenderer.setLabelValues(JLabel, ModOption)",3
"net.sf.freecol.client.gui.option.ModOptionUI.ModOptionUI(GUI, ModOption, boolean)",7
net.sf.freecol.client.gui.option.ModOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.ModOptionUI.getListCellRenderer(),3
"net.sf.freecol.client.gui.option.ModOptionUI.labelModFile(GUI, JLabel, FreeColModFile)",6
net.sf.freecol.client.gui.option.ModOptionUI.reset(),3
net.sf.freecol.client.gui.option.ModOptionUI.updateOption(),3
"net.sf.freecol.client.gui.option.OptionGroupUI.OptionGroupUI(GUI, OptionGroup, boolean)",7
net.sf.freecol.client.gui.option.OptionGroupUI.OptionTree.OptionTree(DefaultTreeModel),5
"net.sf.freecol.client.gui.option.OptionGroupUI.OptionTree.convertValueToText(Object, boolean, boolean, boolean, int, boolean)",3
"net.sf.freecol.client.gui.option.OptionGroupUI.addOptionUI(Option, boolean)",0
"net.sf.freecol.client.gui.option.OptionGroupUI.buildTree(OptionGroup, DefaultMutableTreeNode)",7
net.sf.freecol.client.gui.option.OptionGroupUI.getOptionUI(String),0
"net.sf.freecol.client.gui.option.OptionGroupUI.getOptionUI(String, Class<T>)",0
net.sf.freecol.client.gui.option.OptionGroupUI.getTree(),0
net.sf.freecol.client.gui.option.OptionGroupUI.removeKeyStroke(KeyStroke),6
net.sf.freecol.client.gui.option.OptionGroupUI.reset(),3
net.sf.freecol.client.gui.option.OptionGroupUI.selectOption(String),0
net.sf.freecol.client.gui.option.OptionGroupUI.updateOption(),3
net.sf.freecol.client.gui.option.OptionGroupUI.valueChanged(TreeSelectionEvent),7
"net.sf.freecol.client.gui.option.OptionUI.OptionUI(T, boolean)",6
net.sf.freecol.client.gui.option.OptionUI.getJLabel(),0
net.sf.freecol.client.gui.option.OptionUI.getListCellRenderer(),5
net.sf.freecol.client.gui.option.OptionUI.getOption(),0
"net.sf.freecol.client.gui.option.OptionUI.getOptionUI(GUI, Option, boolean)",8
net.sf.freecol.client.gui.option.OptionUI.initialize(),3
net.sf.freecol.client.gui.option.OptionUI.isEditable(),0
net.sf.freecol.client.gui.option.OptionUI.isEnabled(),0
net.sf.freecol.client.gui.option.OptionUI.setEditable(boolean),0
net.sf.freecol.client.gui.option.OptionUI.setEnabler(BooleanOptionUI),0
net.sf.freecol.client.gui.option.OptionUI.setLabel(JLabel),0
net.sf.freecol.client.gui.option.OptionUI.setOption(T),0
"net.sf.freecol.client.gui.option.PercentageOptionUI.PercentageOptionUI(PercentageOption, boolean)",8
net.sf.freecol.client.gui.option.PercentageOptionUI.reset(),0
"net.sf.freecol.client.gui.option.RangeOptionUI.RangeOptionUI(RangeOption, boolean)",7
net.sf.freecol.client.gui.option.RangeOptionUI.reset(),3
net.sf.freecol.client.gui.option.RangeOptionUI.updateOption(),3
"net.sf.freecol.client.gui.option.SelectOptionUI.SelectOptionUI(SelectOption, boolean)",8
net.sf.freecol.client.gui.option.SelectOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.SelectOptionUI.reset(),3
net.sf.freecol.client.gui.option.SelectOptionUI.updateOption(),3
"net.sf.freecol.client.gui.option.SliderOptionUI.SliderOptionUI(T, boolean)",8
net.sf.freecol.client.gui.option.SliderOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.SliderOptionUI.getJLabel(),3
net.sf.freecol.client.gui.option.SliderOptionUI.reset(),3
net.sf.freecol.client.gui.option.SliderOptionUI.updateOption(),3
"net.sf.freecol.client.gui.option.StringOptionUI.StringOptionUI(StringOption, boolean)",8
net.sf.freecol.client.gui.option.StringOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.StringOptionUI.reset(),3
net.sf.freecol.client.gui.option.StringOptionUI.updateOption(),3
"net.sf.freecol.client.gui.option.TextOptionUI.TextOptionUI(TextOption, boolean)",7
net.sf.freecol.client.gui.option.TextOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.TextOptionUI.reset(),3
net.sf.freecol.client.gui.option.TextOptionUI.updateOption(),3
"net.sf.freecol.client.gui.option.UnitTypeOptionUI.ChoiceRenderer.setLabelValues(JLabel, UnitType)",3
"net.sf.freecol.client.gui.option.UnitTypeOptionUI.UnitTypeOptionUI(UnitTypeOption, boolean)",8
net.sf.freecol.client.gui.option.UnitTypeOptionUI.getComponent(),3
net.sf.freecol.client.gui.option.UnitTypeOptionUI.reset(),3
net.sf.freecol.client.gui.option.UnitTypeOptionUI.updateOption(),3
net.sf.freecol.client.gui.panel.AboutPanel.AboutPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.AboutPanel.actionPerformed(ActionEvent),7
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueMouseAdapter.BuildQueueMouseAdapter(boolean),0
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueMouseAdapter.mousePressed(MouseEvent),3
"net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueuePanel(FreeColClient, Colony)",6
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable.BuildablesTransferable(List<IndexedBuildable>),5
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable.getBuildables(),5
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable.getTransferData(DataFlavor),3
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable.getTransferDataFlavors(),3
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable.isDataFlavorSupported(DataFlavor),3
"net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.canImport(JComponent, DataFlavor[])",3
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.createTransferable(JComponent),3
"net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.exportDone(JComponent, Transferable, int)",3
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.getSourceActions(JComponent),3
"net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.importData(JComponent, Transferable)",3
net.sf.freecol.client.gui.panel.BuildQueuePanel.DefaultBuildQueueCellRenderer.DefaultBuildQueueCellRenderer(),0
"net.sf.freecol.client.gui.panel.BuildQueuePanel.DefaultBuildQueueCellRenderer.getListCellRendererComponent(JList<? extends BuildableType>, BuildableType, int, boolean, boolean)",3
"net.sf.freecol.client.gui.panel.BuildQueuePanel.IndexedBuildable.IndexedBuildable(BuildableType, int)",0
net.sf.freecol.client.gui.panel.BuildQueuePanel.IndexedBuildable.getBuildable(),0
net.sf.freecol.client.gui.panel.BuildQueuePanel.IndexedBuildable.getIndex(),0
net.sf.freecol.client.gui.panel.BuildQueuePanel.actionPerformed(ActionEvent),3
"net.sf.freecol.client.gui.panel.BuildQueuePanel.checkAbilities(BuildableType, List<String>)",0
net.sf.freecol.client.gui.panel.BuildQueuePanel.convertJComp(JComponent),8
net.sf.freecol.client.gui.panel.BuildQueuePanel.getBuildableTypes(JList<? extends BuildableType>),0
net.sf.freecol.client.gui.panel.BuildQueuePanel.getColony(),5
net.sf.freecol.client.gui.panel.BuildQueuePanel.getMaximumIndex(BuildableType),0
net.sf.freecol.client.gui.panel.BuildQueuePanel.getMinimumIndex(BuildableType),0
net.sf.freecol.client.gui.panel.BuildQueuePanel.hasBuildingType(BuildingType),7
net.sf.freecol.client.gui.panel.BuildQueuePanel.itemStateChanged(ItemEvent),8
net.sf.freecol.client.gui.panel.BuildQueuePanel.removeBuildable(Object),0
net.sf.freecol.client.gui.panel.BuildQueuePanel.setBuyLabel(BuildableType),0
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateAllLists(),5
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateBuildingList(),9
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateCompact(boolean),0
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateDetailView(),3
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateLists(boolean),0
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateUnitList(),9
"net.sf.freecol.client.gui.panel.BuildingPanel.BuildingPanel(FreeColClient, Building)",6
net.sf.freecol.client.gui.panel.BuildingPanel.UpkeepLabel.UpkeepLabel(int),5
net.sf.freecol.client.gui.panel.BuildingPanel.UpkeepLabel.paintComponent(Graphics),3
net.sf.freecol.client.gui.panel.BuildingPanel.addPropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.BuildingPanel.cleanup(),3
net.sf.freecol.client.gui.panel.BuildingPanel.createToolTip(),3
net.sf.freecol.client.gui.panel.BuildingPanel.getBuilding(),5
net.sf.freecol.client.gui.panel.BuildingPanel.getImageLibrary(),0
net.sf.freecol.client.gui.panel.BuildingPanel.getUnitLabels(),5
net.sf.freecol.client.gui.panel.BuildingPanel.initialize(),3
net.sf.freecol.client.gui.panel.BuildingPanel.paintComponent(Graphics),3
net.sf.freecol.client.gui.panel.BuildingPanel.propertyChange(PropertyChangeEvent),7
net.sf.freecol.client.gui.panel.BuildingPanel.removePropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.BuildingPanel.update(),3
"net.sf.freecol.client.gui.panel.CargoPanel.CargoPanel(FreeColClient, boolean)",6
net.sf.freecol.client.gui.panel.CargoPanel.accepts(Goods),3
net.sf.freecol.client.gui.panel.CargoPanel.accepts(Unit),3
"net.sf.freecol.client.gui.panel.CargoPanel.add(Component, boolean)",3
net.sf.freecol.client.gui.panel.CargoPanel.addPropertyChangeListeners(),0
net.sf.freecol.client.gui.panel.CargoPanel.cleanup(),3
net.sf.freecol.client.gui.panel.CargoPanel.getCarrier(),5
net.sf.freecol.client.gui.panel.CargoPanel.initialize(),3
net.sf.freecol.client.gui.panel.CargoPanel.isActive(),5
net.sf.freecol.client.gui.panel.CargoPanel.propertyChange(PropertyChangeEvent),0
net.sf.freecol.client.gui.panel.CargoPanel.remove(Component),3
net.sf.freecol.client.gui.panel.CargoPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.CargoPanel.removePropertyChangeListeners(),0
net.sf.freecol.client.gui.panel.CargoPanel.setCarrier(Unit),5
net.sf.freecol.client.gui.panel.CargoPanel.suggested(GoodsType),3
net.sf.freecol.client.gui.panel.CargoPanel.update(),3
net.sf.freecol.client.gui.panel.CargoPanel.updateTitle(),3
net.sf.freecol.client.gui.panel.ChatPanel.ChatPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.ChatPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.ChatPanel.getChatText(),6
net.sf.freecol.client.gui.panel.ChatPanel.requestFocus(),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.ASingleBuildingPanel(Building),6
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.accepts(Goods),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.accepts(GoodsType),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.accepts(Unit),3
"net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.add(Component, boolean)",3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.cleanup(),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.initialize(),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.propertyChange(PropertyChangeEvent),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.suggested(GoodsType),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.tryWork(Unit),6
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.update(),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.BuildingsPanel(),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.cleanup(),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.initialize(),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.update(),3
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyCargoPanel.ColonyCargoPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyCargoPanel.update(),3
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.ColonyInPortPanel(),3
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.accepts(Unit),3
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.addPropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.initialize(),3
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.removePropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.selectLabel(),3
"net.sf.freecol.client.gui.panel.ColonyPanel.ColonyPanel(FreeColClient, Colony)",6
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.OutsideColonyPanel(),3
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.accepts(Goods),3
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.accepts(GoodsType),3
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.accepts(Unit),3
"net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.add(Component, boolean)",3
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.addPropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.cleanup(),3
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.initialize(),3
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.removePropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.selectLabel(),3
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.suggested(GoodsType),3
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.PopulationPanel(),3
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.cleanup(),3
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.createToolTip(),6
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.initialize(),3
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.update(),3
"net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.ASingleTilePanel(ColonyTile, int, int)",7
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.accepts(Unit),3
"net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.add(Component, boolean)",3
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.addPropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.cleanup(),3
"net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.contains(int, int)",8
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.getColonyTile(),5
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.initialize(),3
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.propertyChange(PropertyChangeEvent),5
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.removePropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.tryWork(Unit),6
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.update(),3
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.updateDescriptionLabel(UnitLabel),8
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.TilesPanel(),3
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.cleanup(),3
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.initialize(),3
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.paintComponent(Graphics),3
"net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.showPoorProduction(WorkLocation, StringTemplate)",6
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.update(),3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.WarehousePanel(),3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.accepts(Goods),3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.accepts(GoodsType),3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.accepts(Unit),3
"net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.add(Component, boolean)",3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.addPropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.cleanup(),3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.initialize(),3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.propertyChange(PropertyChangeEvent),3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.removeNotify(),3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.removePropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.suggested(GoodsType),3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.update(),3
net.sf.freecol.client.gui.panel.ColonyPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.ColonyPanel.addMouseListeners(),0
net.sf.freecol.client.gui.panel.ColonyPanel.addPropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.ColonyPanel.cleanup(),3
net.sf.freecol.client.gui.panel.ColonyPanel.closeColonyPanel(),3
net.sf.freecol.client.gui.panel.ColonyPanel.generateColonyUnitsMenu(),4
net.sf.freecol.client.gui.panel.ColonyPanel.getColony(),9
net.sf.freecol.client.gui.panel.ColonyPanel.getTilesPanel(),5
net.sf.freecol.client.gui.panel.ColonyPanel.getTilesScrollGuiScaledDimension(),0
net.sf.freecol.client.gui.panel.ColonyPanel.getUnitList(),6
net.sf.freecol.client.gui.panel.ColonyPanel.getWarehousePanel(),5
net.sf.freecol.client.gui.panel.ColonyPanel.initialize(Colony),9
net.sf.freecol.client.gui.panel.ColonyPanel.propertyChange(PropertyChangeEvent),3
net.sf.freecol.client.gui.panel.ColonyPanel.removeMouseListeners(),0
net.sf.freecol.client.gui.panel.ColonyPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.ColonyPanel.removePropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.ColonyPanel.setColony(Colony),5
net.sf.freecol.client.gui.panel.ColonyPanel.setSelectedUnit(Unit),3
net.sf.freecol.client.gui.panel.ColonyPanel.setSelectedUnitLabel(UnitLabel),3
net.sf.freecol.client.gui.panel.ColonyPanel.setTransferHandlers(boolean),0
"net.sf.freecol.client.gui.panel.ColonyPanel.tryWork(Unit, WorkLocation)",7
net.sf.freecol.client.gui.panel.ColonyPanel.update(),3
net.sf.freecol.client.gui.panel.ColonyPanel.updateBuildingsPanel(),0
net.sf.freecol.client.gui.panel.ColonyPanel.updateCarrierButtons(),4
net.sf.freecol.client.gui.panel.ColonyPanel.updateConstructionPanel(),0
net.sf.freecol.client.gui.panel.ColonyPanel.updateInPortPanel(),0
net.sf.freecol.client.gui.panel.ColonyPanel.updateNetProductionPanel(),0
net.sf.freecol.client.gui.panel.ColonyPanel.updateOutsideColonyPanel(),0
net.sf.freecol.client.gui.panel.ColonyPanel.updatePopulationPanel(),0
net.sf.freecol.client.gui.panel.ColonyPanel.updateProduction(),10
net.sf.freecol.client.gui.panel.ColonyPanel.updateTilesPanel(),0
net.sf.freecol.client.gui.panel.ColonyPanel.updateWarehousePanel(),0
net.sf.freecol.client.gui.panel.ColorCellEditor.ColorCellEditor(FreeColClient),6
net.sf.freecol.client.gui.panel.ColorCellEditor.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.ColorCellEditor.getCellEditorValue(),3
"net.sf.freecol.client.gui.panel.ColorCellEditor.getTableCellEditorComponent(JTable, Object, boolean, int, int)",3
net.sf.freecol.client.gui.panel.ColorCellRenderer.ColorCellRenderer(boolean),5
"net.sf.freecol.client.gui.panel.ColorCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",3
"net.sf.freecol.client.gui.panel.ColorChooserPanel.ColorChooserPanel(FreeColClient, ActionListener)",7
net.sf.freecol.client.gui.panel.ColorChooserPanel.getColor(),0
net.sf.freecol.client.gui.panel.ColorChooserPanel.removeNotify(),3
"net.sf.freecol.client.gui.panel.ConstructionPanel.ConstructionPanel(FreeColClient, Colony, boolean)",9
net.sf.freecol.client.gui.panel.ConstructionPanel.cleanup(),3
net.sf.freecol.client.gui.panel.ConstructionPanel.getDefaultLabel(),3
net.sf.freecol.client.gui.panel.ConstructionPanel.initialize(),3
net.sf.freecol.client.gui.panel.ConstructionPanel.propertyChange(PropertyChangeEvent),5
net.sf.freecol.client.gui.panel.ConstructionPanel.setDefaultLabel(StringTemplate),5
net.sf.freecol.client.gui.panel.ConstructionPanel.update(),6
net.sf.freecol.client.gui.panel.ConstructionPanel.update(BuildableType),12
net.sf.freecol.client.gui.panel.CornerMapControls.CornerMapControls(FreeColClient),13
net.sf.freecol.client.gui.panel.CornerMapControls.MiniMapPanelSkin.MiniMapPanelSkin(),0
net.sf.freecol.client.gui.panel.CornerMapControls.MiniMapPanelSkin.paintComponent(Graphics),0
"net.sf.freecol.client.gui.panel.CornerMapControls.calculateFirstPosition(Dimension, List<UnitButton>, int, Dimension)",0
"net.sf.freecol.client.gui.panel.CornerMapControls.calculateTotalDimension(List<UnitButton>, int)",0
"net.sf.freecol.client.gui.panel.CornerMapControls.centerComponentOnCoordinate(JComponent, PropertyList, String)",0
net.sf.freecol.client.gui.panel.CornerMapControls.getComponentsPresent(),3
net.sf.freecol.client.gui.panel.CornerMapControls.getComponentsToAdd(Dimension),3
"net.sf.freecol.client.gui.panel.CornerMapControls.layoutUnitButtons(List<UnitButton>, Dimension, Point, int)",0
net.sf.freecol.client.gui.panel.CornerMapControls.updateLayoutIfNeeded(),3
"net.sf.freecol.client.gui.panel.DeclarationPanel.DeclarationPanel(FreeColClient, Runnable)",6
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.SignaturePanel(),0
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.addActionListener(ActionListener),8
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.getAbbreviatedName(String),8
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.initialize(String),5
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.isTooLarge(String),8
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.notifyStopped(),0
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.paintComponent(Graphics),3
"net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.scaleToInt(double, float)",0
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.startAnimation(),7
net.sf.freecol.client.gui.panel.DeclarationPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.DeclarationPanel.closePanel(),0
net.sf.freecol.client.gui.panel.DeclarationPanel.paintComponent(Graphics),3
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.DefaultTransferHandler(FreeColClient, FreeColPanel)",6
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragGestureRecognizer.FreeColDragGestureRecognizer(DragGestureListener),0
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragGestureRecognizer.gestured(JComponent, MouseEvent, int, int)",0
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragGestureRecognizer.registerListeners(),3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragGestureRecognizer.unregisterListeners(),3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dragDropEnd(DragSourceDropEvent),3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dragEnter(DragSourceDragEvent),3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dragExit(DragSourceEvent),3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dragGestureRecognized(DragGestureEvent),3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dragOver(DragSourceDragEvent),3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dropActionChanged(DragSourceDragEvent),3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.getCursor(JComponent),6
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.updatePartialChosen(JComponent, boolean)",0
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.canImport(JComponent, DataFlavor[])",3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.createTransferable(JComponent),3
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.equipUnitIfPossible(UnitLabel, AbstractGoods)",0
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.exportAsDrag(JComponent, InputEvent, int)",3
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.getAmount(GoodsType, int, int, boolean)",10
net.sf.freecol.client.gui.panel.DefaultTransferHandler.getDropTarget(JComponent),0
net.sf.freecol.client.gui.panel.DefaultTransferHandler.getSourceActions(JComponent),3
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importData(JComponent, Transferable)",12
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importFail(JComponent, String)",7
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importGoods(JComponent, GoodsLabel, UnitLabel)",9
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importGoodsType(JComponent, GoodsTypeLabel)",7
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importMarket(JComponent, MarketLabel)",7
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importUnit(JComponent, UnitLabel, UnitLabel)",9
net.sf.freecol.client.gui.panel.DefaultTransferHandler.restoreSelection(UnitLabel),0
"net.sf.freecol.client.gui.panel.DragListener.DragListener(FreeColClient, FreeColPanel)",7
net.sf.freecol.client.gui.panel.DragListener.mousePressed(MouseEvent),6
net.sf.freecol.client.gui.panel.DropListener.mouseReleased(MouseEvent),6
net.sf.freecol.client.gui.panel.DropTarget.accepts(Goods),6
net.sf.freecol.client.gui.panel.DropTarget.accepts(GoodsType),6
net.sf.freecol.client.gui.panel.DropTarget.accepts(Unit),6
net.sf.freecol.client.gui.panel.DropTarget.suggested(GoodsType),7
net.sf.freecol.client.gui.panel.ErrorPanel.ErrorPanel(FreeColClient),5
"net.sf.freecol.client.gui.panel.ErrorPanel.ErrorPanel(FreeColClient, String)",6
net.sf.freecol.client.gui.panel.ErrorPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.accepts(Goods),3
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.accepts(GoodsType),3
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.accepts(Unit),3
"net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.add(Component, boolean)",3
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.cleanup(),3
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.initialize(Location),6
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.suggested(GoodsType),3
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.update(),3
"net.sf.freecol.client.gui.panel.EuropePanel.EuropeButton.EuropeButton(String, int, String, ActionListener)",0
net.sf.freecol.client.gui.panel.EuropePanel.EuropeInPortPanel.EuropeInPortPanel(),0
net.sf.freecol.client.gui.panel.EuropePanel.EuropeInPortPanel.accepts(Unit),3
net.sf.freecol.client.gui.panel.EuropePanel.EuropeInPortPanel.addPropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.EuropePanel.EuropeInPortPanel.removePropertyChangeListeners(),3
"net.sf.freecol.client.gui.panel.EuropePanel.EuropePanel(FreeColClient, boolean)",6
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.EuropeanDocksPanel(),0
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.accepts(Goods),3
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.accepts(GoodsType),3
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.accepts(Unit),3
"net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.add(Component, boolean)",3
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.addPropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.remove(Component),3
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.removePropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.selectLabel(),3
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.suggested(GoodsType),3
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.MarketPanel(EuropePanel),5
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.accepts(Goods),3
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.accepts(GoodsType),3
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.accepts(Unit),3
"net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.add(Component, boolean)",3
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.cleanup(),3
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.initialize(),3
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.remove(Component),3
net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.TransactionLog(),3
net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.add(String),5
net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.cleanup(),3
net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.initialize(),3
"net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.logPurchase(GoodsType, int, int)",3
"net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.logSale(GoodsType, int, int, int)",3
net.sf.freecol.client.gui.panel.EuropePanel.cleanup(),3
net.sf.freecol.client.gui.panel.EuropePanel.exitAction(),3
net.sf.freecol.client.gui.panel.EuropePanel.getUnitList(),5
net.sf.freecol.client.gui.panel.EuropePanel.initialize(Europe),5
net.sf.freecol.client.gui.panel.EuropePanel.refresh(),3
net.sf.freecol.client.gui.panel.EuropePanel.removeNotify(),3
net.sf.freecol.client.gui.panel.EuropePanel.requestFocus(),3
net.sf.freecol.client.gui.panel.EuropePanel.sailAction(),3
net.sf.freecol.client.gui.panel.EuropePanel.setSelectedUnitLabel(UnitLabel),6
net.sf.freecol.client.gui.panel.EuropePanel.unloadAction(),3
"net.sf.freecol.client.gui.panel.EventPanel.EventPanel(FreeColClient, String, String, String)",8
net.sf.freecol.client.gui.panel.FindSettlementPanel.FindSettlementPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.FindSettlementPanel.SettlementRenderer.SettlementRenderer(ImageLibrary),0
"net.sf.freecol.client.gui.panel.FindSettlementPanel.SettlementRenderer.setLabelValues(JLabel, Settlement)",3
net.sf.freecol.client.gui.panel.FindSettlementPanel.itemStateChanged(ItemEvent),0
net.sf.freecol.client.gui.panel.FindSettlementPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.FindSettlementPanel.requestFocus(),3
net.sf.freecol.client.gui.panel.FindSettlementPanel.selectSettlement(),0
net.sf.freecol.client.gui.panel.FindSettlementPanel.updateSearch(DisplayListOption),0
net.sf.freecol.client.gui.panel.FindSettlementPanel.valueChanged(ListSelectionEvent),3
net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(),0
net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(Action),0
"net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(ButtonStyle, Action)",0
net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(Icon),0
net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(String),0
"net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(String, Icon)",0
net.sf.freecol.client.gui.panel.FreeColButton.getButtonStyle(),0
net.sf.freecol.client.gui.panel.FreeColButton.withButtonStyle(ButtonStyle),0
net.sf.freecol.client.gui.panel.FreeColImageBorder.FreeColImageBorder(String),0
"net.sf.freecol.client.gui.panel.FreeColImageBorder.FreeColImageBorder(String, boolean)",0
net.sf.freecol.client.gui.panel.FreeColImageBorder.ensureInitialized(),0
net.sf.freecol.client.gui.panel.FreeColImageBorder.getBorderInsets(Component),6
"net.sf.freecol.client.gui.panel.FreeColImageBorder.getBorderInsets(Component, Insets)",8
net.sf.freecol.client.gui.panel.FreeColImageBorder.getHeight(Image),5
net.sf.freecol.client.gui.panel.FreeColImageBorder.getImage(String),0
net.sf.freecol.client.gui.panel.FreeColImageBorder.getWidth(Image),5
net.sf.freecol.client.gui.panel.FreeColImageBorder.loadImages(),0
"net.sf.freecol.client.gui.panel.FreeColImageBorder.loadImages(BufferedImage, BufferedImage, BufferedImage, BufferedImage, BufferedImage, BufferedImage, BufferedImage, ...)",12
"net.sf.freecol.client.gui.panel.FreeColImageBorder.paintBorder(Component, Graphics, int, int, int, int)",10
net.sf.freecol.client.gui.panel.FreeColImageBorder.reloadAllImages(),0
net.sf.freecol.client.gui.panel.FreeColImageBorder.setScaleFactor(float),0
net.sf.freecol.client.gui.panel.FreeColPanel.FreeColPanel(FreeColClient),5
"net.sf.freecol.client.gui.panel.FreeColPanel.FreeColPanel(FreeColClient, String, LayoutManager)",7
net.sf.freecol.client.gui.panel.FreeColPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.FreeColPanel.addClosingCallback(Runnable),10
net.sf.freecol.client.gui.panel.FreeColPanel.createColonyButton(Colony),6
net.sf.freecol.client.gui.panel.FreeColPanel.getClientOptions(),5
net.sf.freecol.client.gui.panel.FreeColPanel.getFreeColClient(),5
net.sf.freecol.client.gui.panel.FreeColPanel.getGUI(),5
net.sf.freecol.client.gui.panel.FreeColPanel.getGame(),5
net.sf.freecol.client.gui.panel.FreeColPanel.getImageLibrary(),5
net.sf.freecol.client.gui.panel.FreeColPanel.getMap(),5
net.sf.freecol.client.gui.panel.FreeColPanel.getMyPlayer(),5
net.sf.freecol.client.gui.panel.FreeColPanel.getSmallAbstractUnitImage(AbstractUnit),6
net.sf.freecol.client.gui.panel.FreeColPanel.getSpecification(),5
net.sf.freecol.client.gui.panel.FreeColPanel.igc(),5
net.sf.freecol.client.gui.panel.FreeColPanel.isEditable(),5
net.sf.freecol.client.gui.panel.FreeColPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.FreeColPanel.requestFocus(),3
net.sf.freecol.client.gui.panel.FreeColPanel.setEscapeAction(AbstractAction),5
"net.sf.freecol.client.gui.panel.FreeColProgressBar.FreeColProgressBar(FreeColClient, GoodsType)",6
"net.sf.freecol.client.gui.panel.FreeColProgressBar.FreeColProgressBar(FreeColClient, GoodsType, int, int)",8
"net.sf.freecol.client.gui.panel.FreeColProgressBar.FreeColProgressBar(FreeColClient, GoodsType, int, int, int, int)",10
net.sf.freecol.client.gui.panel.FreeColProgressBar.paintComponent(Graphics),5
"net.sf.freecol.client.gui.panel.FreeColProgressBar.update(int, int)",6
"net.sf.freecol.client.gui.panel.FreeColProgressBar.update(int, int, int, int)",8
"net.sf.freecol.client.gui.panel.GoodsTypePanel.GoodsTypePanel(LayoutManager, boolean)",7
net.sf.freecol.client.gui.panel.GoodsTypePanel.GoodsTypePanel(boolean),6
net.sf.freecol.client.gui.panel.GoodsTypePanel.accepts(GoodsType),3
"net.sf.freecol.client.gui.panel.GoodsTypePanel.add(Component, boolean)",3
net.sf.freecol.client.gui.panel.GoodsTypePanel.addLabel(GoodsTypeLabel),8
net.sf.freecol.client.gui.panel.GoodsTypePanel.findLabel(GoodsType),6
net.sf.freecol.client.gui.panel.GoodsTypePanel.removeGoodsType(GoodsType),6
net.sf.freecol.client.gui.panel.GoodsTypePanel.setLabels(List<GoodsTypeLabel>),5
net.sf.freecol.client.gui.panel.ImageSelection.ImageSelection(JLabel),5
net.sf.freecol.client.gui.panel.ImageSelection.getTransferData(DataFlavor),3
net.sf.freecol.client.gui.panel.ImageSelection.getTransferDataFlavors(),3
net.sf.freecol.client.gui.panel.ImageSelection.isDataFlavorSupported(DataFlavor),3
"net.sf.freecol.client.gui.panel.InPortPanel.InPortPanel(LayoutManager, PortPanel, String, boolean)",8
net.sf.freecol.client.gui.panel.InPortPanel.selectLabel(),3
"net.sf.freecol.client.gui.panel.IndianSettlementPanel.IndianSettlementPanel(FreeColClient, IndianSettlement)",6
net.sf.freecol.client.gui.panel.InfoPanel.InfoPanel(FreeColClient),5
"net.sf.freecol.client.gui.panel.InfoPanel.InfoPanel(FreeColClient, boolean)",9
"net.sf.freecol.client.gui.panel.InfoPanel.addLabels(JPanel, List<JLabel>, int)",7
net.sf.freecol.client.gui.panel.InfoPanel.changeMode(InfoPanelMode),8
net.sf.freecol.client.gui.panel.InfoPanel.fillEndPanel(),3
net.sf.freecol.client.gui.panel.InfoPanel.fillMapPanel(MapTransform),6
net.sf.freecol.client.gui.panel.InfoPanel.fillTilePanel(Tile),6
net.sf.freecol.client.gui.panel.InfoPanel.fillUnitPanel(Unit),6
net.sf.freecol.client.gui.panel.InfoPanel.getTile(),5
net.sf.freecol.client.gui.panel.InfoPanel.newPanel(LayoutManager),6
net.sf.freecol.client.gui.panel.InfoPanel.paintComponent(Graphics),3
net.sf.freecol.client.gui.panel.InfoPanel.propertyChange(PropertyChangeEvent),3
net.sf.freecol.client.gui.panel.InfoPanel.refresh(),8
net.sf.freecol.client.gui.panel.InfoPanel.setPanel(MigPanel),5
net.sf.freecol.client.gui.panel.InfoPanel.update(),3
net.sf.freecol.client.gui.panel.InfoPanel.update(MapTransform),5
net.sf.freecol.client.gui.panel.InfoPanel.update(Tile),5
net.sf.freecol.client.gui.panel.InfoPanel.update(Unit),5
net.sf.freecol.client.gui.panel.InfoPanel.updateLayoutIfNeeded(),0
"net.sf.freecol.client.gui.panel.InformationPanel.InformationPanel(FreeColClient, String[], FreeColObject[], ImageIcon[])",9
"net.sf.freecol.client.gui.panel.InformationPanel.createPanelWithAllContent(String[], FreeColObject[], ImageIcon[], int)",0
net.sf.freecol.client.gui.panel.InformationPanel.displayLabel(FreeColObject),6
net.sf.freecol.client.gui.panel.InformationPanel.paintComponent(Graphics),0
net.sf.freecol.client.gui.panel.MainPanel.MainPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.MainPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.MainPanel.createImportantButton(Action),0
"net.sf.freecol.client.gui.panel.MapControls.MapControls(FreeColClient, boolean)",6
net.sf.freecol.client.gui.panel.MapControls.canZoomInMapControls(),0
net.sf.freecol.client.gui.panel.MapControls.canZoomOutMapControls(),0
net.sf.freecol.client.gui.panel.MapControls.clear(),0
net.sf.freecol.client.gui.panel.MapControls.initializeUnitButtons(),8
net.sf.freecol.client.gui.panel.MapControls.repaint(),0
"net.sf.freecol.client.gui.panel.MapControls.update(ViewMode, Unit, Tile)",7
net.sf.freecol.client.gui.panel.MapControls.updateLayoutIfNeeded(),3
net.sf.freecol.client.gui.panel.MapControls.updateMinimap(),3
net.sf.freecol.client.gui.panel.MapControls.zoomIn(),0
net.sf.freecol.client.gui.panel.MapControls.zoomOut(),0
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.LostCityRumourTransform.transform(Tile),3
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.MapEditorTransformPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.ResourceTransform.transform(Tile),3
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverStyleTransform.RiverStyleTransform(int),0
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverStyleTransform.getType(),0
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverStyleTransform.setStyle(String),0
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverStyleTransform.transform(Tile),3
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverTransform.RiverTransform(int),0
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverTransform.transform(Tile),3
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.SettlementTransform.transform(Tile),3
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.TileTypeTransform.TileTypeTransform(TileType),0
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.TileTypeTransform.getTileType(),0
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.TileTypeTransform.transform(Tile),3
"net.sf.freecol.client.gui.panel.MapEditorTransformPanel.buildButton(Image, String, MapTransform)",8
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.buildList(),3
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.getNativeNation(),5
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.getResourceChoice(List<ResourceType>),9
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.setNativeNation(Nation),5
net.sf.freecol.client.gui.panel.MigPanel.MigPanel(LayoutManager),0
net.sf.freecol.client.gui.panel.MigPanel.MigPanel(String),0
"net.sf.freecol.client.gui.panel.MigPanel.MigPanel(String, LayoutManager)",0
net.sf.freecol.client.gui.panel.MigPanel.getMigLayout(),0
net.sf.freecol.client.gui.panel.MigPanel.getUIClassID(),3
net.sf.freecol.client.gui.panel.MiniMap.MiniMap(FreeColClient),5
net.sf.freecol.client.gui.panel.MiniMap.MinimapPainterThread.run(),0
"net.sf.freecol.client.gui.panel.MiniMap.PrerenderedMinimap.PrerenderedMinimap(BufferedImage, int)",0
net.sf.freecol.client.gui.panel.MiniMap.canZoomIn(),5
net.sf.freecol.client.gui.panel.MiniMap.canZoomOut(),5
net.sf.freecol.client.gui.panel.MiniMap.getGUI(),5
net.sf.freecol.client.gui.panel.MiniMap.getGame(),5
net.sf.freecol.client.gui.panel.MiniMap.getMap(),5
net.sf.freecol.client.gui.panel.MiniMap.mouseClicked(MouseEvent),3
net.sf.freecol.client.gui.panel.MiniMap.mouseDragged(MouseEvent),3
net.sf.freecol.client.gui.panel.MiniMap.mouseEntered(MouseEvent),3
net.sf.freecol.client.gui.panel.MiniMap.mouseExited(MouseEvent),3
net.sf.freecol.client.gui.panel.MiniMap.mouseMoved(MouseEvent),3
net.sf.freecol.client.gui.panel.MiniMap.mousePressed(MouseEvent),3
net.sf.freecol.client.gui.panel.MiniMap.mouseReleased(MouseEvent),3
net.sf.freecol.client.gui.panel.MiniMap.paintComponent(Graphics),3
"net.sf.freecol.client.gui.panel.MiniMap.paintEachTile(Graphics2D, Tile, int, List<Tile>, TileRenderingCallback)",0
"net.sf.freecol.client.gui.panel.MiniMap.paintEntireMinimap(Graphics, int, Dimension)",7
net.sf.freecol.client.gui.panel.MiniMap.paintMap(Graphics2D),7
"net.sf.freecol.client.gui.panel.MiniMap.paintMarkerForVisibleAreaOnMainMap(Graphics2D, Dimension, int, Dimension)",0
net.sf.freecol.client.gui.panel.MiniMap.recreateBufferImage(),0
net.sf.freecol.client.gui.panel.MiniMap.setFocus(MouseEvent),5
net.sf.freecol.client.gui.panel.MiniMap.setTileSize(int),8
net.sf.freecol.client.gui.panel.MiniMap.setZoomOption(int),5
net.sf.freecol.client.gui.panel.MiniMap.updateCachedMinimap(),3
net.sf.freecol.client.gui.panel.MiniMap.zoomIn(),3
net.sf.freecol.client.gui.panel.MiniMap.zoomOut(),3
net.sf.freecol.client.gui.panel.NewPanel.NewPanel(FreeColClient),5
"net.sf.freecol.client.gui.panel.NewPanel.NewPanel(FreeColClient, Specification)",7
net.sf.freecol.client.gui.panel.NewPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.NewPanel.checkDifficulty(),5
net.sf.freecol.client.gui.panel.NewPanel.checkTC(),5
net.sf.freecol.client.gui.panel.NewPanel.enableComponents(),3
"net.sf.freecol.client.gui.panel.NewPanel.enableComponents(Component[], boolean)",6
net.sf.freecol.client.gui.panel.NewPanel.getSelectedAdvantages(),6
net.sf.freecol.client.gui.panel.NewPanel.getSelectedDifficulty(),5
net.sf.freecol.client.gui.panel.NewPanel.getSelectedName(),5
net.sf.freecol.client.gui.panel.NewPanel.getSelectedPort(JTextField),6
net.sf.freecol.client.gui.panel.NewPanel.getSelectedRules(),5
net.sf.freecol.client.gui.panel.NewPanel.getSpecification(),6
net.sf.freecol.client.gui.panel.NewPanel.itemStateChanged(ItemEvent),3
net.sf.freecol.client.gui.panel.NewPanel.update(boolean),5
net.sf.freecol.client.gui.panel.NewPanel.updateDifficultyBox(),3
"net.sf.freecol.client.gui.panel.NewUnitPanel.NewUnitPanel(FreeColClient, LayoutManager, String, List<UnitType>)",8
net.sf.freecol.client.gui.panel.NewUnitPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.NewUnitPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.NewUnitPanel.update(),4
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellEditor.AdvantageCellEditor(JComboBox<EuropeanNationType>),5
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellEditor.AdvantageCellEditor(List<EuropeanNationType>),5
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellEditor.getCellEditorValue(),3
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellRenderer.AdvantageCellRenderer(Advantages),5
"net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",3
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellEditor.AvailableCellEditor(),0
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellEditor.getActiveBox(int),0
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellEditor.getCellEditorValue(),3
"net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellEditor.getTableCellEditorComponent(JTable, Object, boolean, int, int)",3
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellRenderer.AvailableCellRenderer(),3
"net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",3
"net.sf.freecol.client.gui.panel.PlayersTable.HeaderListener.HeaderListener(JTableHeader, HeaderRenderer)",0
net.sf.freecol.client.gui.panel.PlayersTable.HeaderListener.mousePressed(MouseEvent),0
net.sf.freecol.client.gui.panel.PlayersTable.HeaderListener.mouseReleased(MouseEvent),0
net.sf.freecol.client.gui.panel.PlayersTable.HeaderRenderer.HeaderRenderer(Component...),0
"net.sf.freecol.client.gui.panel.PlayersTable.HeaderRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",3
net.sf.freecol.client.gui.panel.PlayersTable.HeaderRenderer.setPressedColumn(int),0
"net.sf.freecol.client.gui.panel.PlayersTable.NationCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",3
"net.sf.freecol.client.gui.panel.PlayersTable.NationStateRenderer.getListCellRendererComponent(JList<? extends NationState>, NationState, int, boolean, boolean)",3
net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellEditor.PlayerCellEditor(),0
net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellEditor.getCellEditorValue(),0
"net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellEditor.getTableCellEditorComponent(JTable, Object, boolean, int, int)",3
net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellRenderer.PlayerCellRenderer(),0
"net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",3
"net.sf.freecol.client.gui.panel.PlayersTable.PlayersTable(FreeColClient, NationOptions, Player)",7
"net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.PlayersTableModel(PreGameController, NationOptions, Player)",8
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.getColumnClass(int),6
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.getColumnCount(),5
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.getColumnName(int),6
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.getRowCount(),5
"net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.getValueAt(int, int)",7
"net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.isCellEditable(int, int)",7
"net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.setValueAt(Object, int, int)",7
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.update(),3
net.sf.freecol.client.gui.panel.PlayersTable.update(),0
"net.sf.freecol.client.gui.panel.PortPanel.PortPanel(FreeColClient, LayoutManager)",6
net.sf.freecol.client.gui.panel.PortPanel.getCargoPanel(),5
net.sf.freecol.client.gui.panel.PortPanel.getPressListener(),6
net.sf.freecol.client.gui.panel.PortPanel.getSelectedUnit(),5
net.sf.freecol.client.gui.panel.PortPanel.getSelectedUnitLabel(),5
net.sf.freecol.client.gui.panel.PortPanel.getTransferHandler(),3
net.sf.freecol.client.gui.panel.PortPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.PortPanel.setSelectedUnit(Unit),6
net.sf.freecol.client.gui.panel.PortPanel.setSelectedUnitLabel(UnitLabel),5
net.sf.freecol.client.gui.panel.PurchasePanel.PurchasePanel(FreeColClient),5
"net.sf.freecol.client.gui.panel.QuickActionMenu.QuickActionMenu(FreeColClient, FreeColPanel)",6
"net.sf.freecol.client.gui.panel.QuickActionMenu.addBoardItems(UnitLabel, Location)",0
net.sf.freecol.client.gui.panel.QuickActionMenu.addCarrierItems(UnitLabel),0
net.sf.freecol.client.gui.panel.QuickActionMenu.addCommandItems(UnitLabel),0
net.sf.freecol.client.gui.panel.QuickActionMenu.addEducationItems(UnitLabel),0
"net.sf.freecol.client.gui.panel.QuickActionMenu.addLoadItems(Goods, Location)",0
"net.sf.freecol.client.gui.panel.QuickActionMenu.addMarketItems(AbstractGoods, Europe)",0
net.sf.freecol.client.gui.panel.QuickActionMenu.addMenuItems(JComponent),6
net.sf.freecol.client.gui.panel.QuickActionMenu.addPayArrears(GoodsType),5
net.sf.freecol.client.gui.panel.QuickActionMenu.addRoleItems(UnitLabel),9
net.sf.freecol.client.gui.panel.QuickActionMenu.addTileItem(Tile),5
net.sf.freecol.client.gui.panel.QuickActionMenu.addTileItem(UnitLabel),6
net.sf.freecol.client.gui.panel.QuickActionMenu.addWorkItems(UnitLabel),0
net.sf.freecol.client.gui.panel.QuickActionMenu.createGoodsMenu(GoodsLabel),5
net.sf.freecol.client.gui.panel.QuickActionMenu.createMarketMenu(MarketLabel),5
"net.sf.freecol.client.gui.panel.QuickActionMenu.createRoleItem(UnitLabel, Role, int, Role, int, int)",16
net.sf.freecol.client.gui.panel.QuickActionMenu.createTileMenu(ASingleTilePanel),5
net.sf.freecol.client.gui.panel.QuickActionMenu.createUnitMenu(UnitLabel),5
"net.sf.freecol.client.gui.panel.QuickActionMenu.descendingList(Map<JMenuItem, Integer>)",0
net.sf.freecol.client.gui.panel.QuickActionMenu.getWorkLabel(WorkLocation),7
"net.sf.freecol.client.gui.panel.QuickActionMenu.makeProductionItem(GoodsType, WorkLocation, int, UnitLabel, boolean)",0
net.sf.freecol.client.gui.panel.QuickActionMenu.promptForGoods(AbstractGoods),7
net.sf.freecol.client.gui.panel.RecruitPanel.RecruitPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.RecruitPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.RecruitPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.RecruitPanel.update(),4
"net.sf.freecol.client.gui.panel.ServerListPanel.ServerListPanel(FreeColClient, ConnectController)",7
"net.sf.freecol.client.gui.panel.ServerListPanel.ServerListTableCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",3
net.sf.freecol.client.gui.panel.ServerListPanel.initialize(List<ServerInfo>),6
net.sf.freecol.client.gui.panel.ServerListPanel.refreshTable(),3
net.sf.freecol.client.gui.panel.ServerListPanel.requestFocus(),0
net.sf.freecol.client.gui.panel.ServerListPanel.setEnabled(boolean),7
net.sf.freecol.client.gui.panel.ServerListTableModel.ServerListTableModel(List<ServerInfo>),0
net.sf.freecol.client.gui.panel.ServerListTableModel.getColumnCount(),5
net.sf.freecol.client.gui.panel.ServerListTableModel.getColumnName(int),5
net.sf.freecol.client.gui.panel.ServerListTableModel.getItem(int),6
net.sf.freecol.client.gui.panel.ServerListTableModel.getRowCount(),5
"net.sf.freecol.client.gui.panel.ServerListTableModel.getValueAt(int, int)",7
net.sf.freecol.client.gui.panel.ServerListTableModel.setItems(List<ServerInfo>),5
net.sf.freecol.client.gui.panel.StartGamePanel.StartGamePanel(FreeColClient),5
net.sf.freecol.client.gui.panel.StartGamePanel.checkVictoryConditions(),6
"net.sf.freecol.client.gui.panel.StartGamePanel.displayChat(String, String, boolean)",9
net.sf.freecol.client.gui.panel.StartGamePanel.initialize(boolean),0
net.sf.freecol.client.gui.panel.StartGamePanel.refreshPlayersTable(),4
net.sf.freecol.client.gui.panel.StartGamePanel.removeNotify(),3
net.sf.freecol.client.gui.panel.StartGamePanel.requestFocus(),3
net.sf.freecol.client.gui.panel.StartGamePanel.setEnabled(boolean),3
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.StatisticsModel(),3
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.getColumnClass(int),3
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.getColumnCount(),3
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.getColumnName(int),3
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.getRowCount(),3
"net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.getValueAt(int, int)",3
"net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.setData(Map<String, String>)",8
"net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsPanel(FreeColClient, Map<String, String>, Map<String, String>)",7
"net.sf.freecol.client.gui.panel.StatisticsPanel.createStatsTable(String, Map<String, String>)",0
"net.sf.freecol.client.gui.panel.StatisticsPanel.displayStatsMessage(String, Map<String, String>)",0
net.sf.freecol.client.gui.panel.StatusPanel.StatusPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.StatusPanel.setStatusMessage(String),6
"net.sf.freecol.client.gui.panel.TilePanel.TilePanel(FreeColClient, Tile)",6
net.sf.freecol.client.gui.panel.TilePanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.AllGoodsTypesPanel.AllGoodsTypesPanel(List<GoodsTypeLabel>),0
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.AllGoodsTypesPanel.add(Component, boolean)",3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.AllGoodsTypesPanel.reset(),0
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.AllGoodsTypesPanel.setEnabled(boolean),3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.DestinationCellRenderer.DestinationCellRenderer(),0
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.DestinationCellRenderer.getListCellRendererComponent(JList<? extends String>, String, int, boolean, boolean)",3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopGoodsTypesPanel.StopGoodsTypesPanel(),0
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopGoodsTypesPanel.add(Component, boolean)",3
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.canImport(JComponent, DataFlavor[])",3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.createTransferable(JComponent),3
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.exportDone(JComponent, Transferable, int)",3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.getAllValues(JList<TradeRouteStop>),0
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.getSourceActions(JComponent),3
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.importData(JComponent, Transferable)",3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable.StopListTransferable(List<TradeRouteStop>),0
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable.getStops(),0
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable.getTransferData(DataFlavor),3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable.getTransferDataFlavors(),3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable.isDataFlavorSupported(DataFlavor),3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopRenderer.StopRenderer(),0
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopRenderer.getListCellRendererComponent(JList<? extends TradeRouteStop>, TradeRouteStop, int, boolean, boolean)",3
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.TradeRouteInputPanel(FreeColClient, TradeRoute)",6
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.addSelectedStops(),3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.buildCargoLabel(GoodsType),6
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.cancelImport(GoodsTypeLabel),5
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.cancelTradeRoute(),6
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.deleteCurrentlySelectedStops(),3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.enableImport(GoodsType),5
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.updateButtons(),4
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.updateCargoPanel(TradeRouteStop),5
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.valueChanged(ListSelectionEvent),3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.verifyNewTradeRoute(),5
"net.sf.freecol.client.gui.panel.TradeRoutePanel.TradeRoutePanel(FreeColClient, Unit)",6
net.sf.freecol.client.gui.panel.TradeRoutePanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.TradeRoutePanel.getRoute(),5
net.sf.freecol.client.gui.panel.TradeRoutePanel.newRoute(),3
net.sf.freecol.client.gui.panel.TradeRoutePanel.removeNotify(),3
net.sf.freecol.client.gui.panel.TradeRoutePanel.updateButtons(),3
net.sf.freecol.client.gui.panel.TradeRoutePanel.updateList(TradeRoute),5
net.sf.freecol.client.gui.panel.TrainPanel.TrainPanel(FreeColClient),5
"net.sf.freecol.client.gui.panel.UnitButton.UnitButton(ActionManager, String)",6
net.sf.freecol.client.gui.panel.UnitButton.UnitButtonActionPropertyChangeListener.UnitButtonActionPropertyChangeListener(AbstractButton),0
net.sf.freecol.client.gui.panel.UnitButton.UnitButtonActionPropertyChangeListener.propertyChange(PropertyChangeEvent),0
net.sf.freecol.client.gui.panel.UnitButton.configurePropertiesFromAction(Action),0
net.sf.freecol.client.gui.panel.UnitButton.createActionPropertyChangeListener(Action),0
net.sf.freecol.client.gui.panel.UnitButton.refreshAction(),4
"net.sf.freecol.client.gui.panel.UnitPanel.UnitPanel(String, LayoutManager, PortPanel, String, boolean)",9
net.sf.freecol.client.gui.panel.UnitPanel.addPropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.UnitPanel.cleanup(),3
net.sf.freecol.client.gui.panel.UnitPanel.getPortPanel(),5
net.sf.freecol.client.gui.panel.UnitPanel.initialize(),3
net.sf.freecol.client.gui.panel.UnitPanel.isEditable(),5
net.sf.freecol.client.gui.panel.UnitPanel.propertyChange(PropertyChangeEvent),3
net.sf.freecol.client.gui.panel.UnitPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.UnitPanel.removePropertyChangeListeners(),3
net.sf.freecol.client.gui.panel.UnitPanel.setSelectedUnit(Unit),6
net.sf.freecol.client.gui.panel.UnitPanel.update(),3
"net.sf.freecol.client.gui.panel.Utility.blankBorder(int, int, int, int)",9
net.sf.freecol.client.gui.panel.Utility.createServerInetAddressBox(),4
net.sf.freecol.client.gui.panel.Utility.createTextArea(String),7
"net.sf.freecol.client.gui.panel.Utility.drawGoldenText(String, Graphics2D, Font, int, int)",0
net.sf.freecol.client.gui.panel.Utility.getBorderColor(),5
net.sf.freecol.client.gui.panel.Utility.getCellBorder(),0
net.sf.freecol.client.gui.panel.Utility.getColorCellBorder(),0
net.sf.freecol.client.gui.panel.Utility.getDefaultTextArea(String),7
"net.sf.freecol.client.gui.panel.Utility.getDefaultTextArea(String, Dimension)",8
"net.sf.freecol.client.gui.panel.Utility.getDefaultTextArea(String, int)",8
net.sf.freecol.client.gui.panel.Utility.getDefaultTextPane(),5
net.sf.freecol.client.gui.panel.Utility.getDefaultTextPane(String),6
net.sf.freecol.client.gui.panel.Utility.getDialogBorder(),0
net.sf.freecol.client.gui.panel.Utility.getLeftCellBorder(),0
"net.sf.freecol.client.gui.panel.Utility.getLinkButton(String, Icon, String)",9
net.sf.freecol.client.gui.panel.Utility.getLinkColor(),5
"net.sf.freecol.client.gui.panel.Utility.getMessageButton(String, String, Player, FreeColGameObject)",14
net.sf.freecol.client.gui.panel.Utility.getPossibleServerAddresses(),0
net.sf.freecol.client.gui.panel.Utility.getProductionBorder(),0
net.sf.freecol.client.gui.panel.Utility.getSimpleLineBorder(),0
net.sf.freecol.client.gui.panel.Utility.getTopCellBorder(),0
net.sf.freecol.client.gui.panel.Utility.getTopLeftCellBorder(),0
net.sf.freecol.client.gui.panel.Utility.getTrivialLineBorder(),0
net.sf.freecol.client.gui.panel.Utility.getWarningColor(),5
net.sf.freecol.client.gui.panel.Utility.initStyleContext(Font),0
"net.sf.freecol.client.gui.panel.Utility.localizeBorder(JComponent, StringTemplate)",6
"net.sf.freecol.client.gui.panel.Utility.localizeToolTip(JComponent, String)",6
"net.sf.freecol.client.gui.panel.Utility.localizeToolTip(JComponent, StringTemplate)",6
net.sf.freecol.client.gui.panel.Utility.localizedBorder(Named),6
"net.sf.freecol.client.gui.panel.Utility.localizedBorder(Named, Color)",8
net.sf.freecol.client.gui.panel.Utility.localizedBorder(String),6
"net.sf.freecol.client.gui.panel.Utility.localizedBorder(String, Color)",8
net.sf.freecol.client.gui.panel.Utility.localizedButton(String),6
net.sf.freecol.client.gui.panel.Utility.localizedButton(StringTemplate),6
"net.sf.freecol.client.gui.panel.Utility.localizedCheckBoxMenuItem(String, boolean)",7
"net.sf.freecol.client.gui.panel.Utility.localizedHeader(String, String)",7
"net.sf.freecol.client.gui.panel.Utility.localizedHeaderLabel(Named, String)",0
"net.sf.freecol.client.gui.panel.Utility.localizedHeaderLabel(String, int, String)",8
"net.sf.freecol.client.gui.panel.Utility.localizedHeaderLabel(StringTemplate, int, String)",0
net.sf.freecol.client.gui.panel.Utility.localizedLabel(FreeColSpecObjectType),6
net.sf.freecol.client.gui.panel.Utility.localizedLabel(String),6
net.sf.freecol.client.gui.panel.Utility.localizedLabel(StringTemplate),6
"net.sf.freecol.client.gui.panel.Utility.localizedLabel(StringTemplate, Icon, int)",8
net.sf.freecol.client.gui.panel.Utility.localizedMenu(String),6
net.sf.freecol.client.gui.panel.Utility.localizedMenu(StringTemplate),6
net.sf.freecol.client.gui.panel.Utility.localizedMenuItem(String),6
"net.sf.freecol.client.gui.panel.Utility.localizedMenuItem(String, Icon)",7
net.sf.freecol.client.gui.panel.Utility.localizedMenuItem(StringTemplate),6
"net.sf.freecol.client.gui.panel.Utility.localizedMenuItem(StringTemplate, Icon)",7
"net.sf.freecol.client.gui.panel.Utility.localizedRadioButtonMenuItem(StringTemplate, boolean)",7
net.sf.freecol.client.gui.panel.Utility.localizedTextArea(String),6
"net.sf.freecol.client.gui.panel.Utility.localizedTextArea(String, int)",7
net.sf.freecol.client.gui.panel.Utility.localizedTextArea(StringTemplate),6
"net.sf.freecol.client.gui.panel.Utility.localizedTextArea(StringTemplate, int)",7
"net.sf.freecol.client.gui.panel.Utility.localizedTextPanel(StringTemplate, ImageIcon)",7
"net.sf.freecol.client.gui.panel.Utility.padBorder(JComponent, int, int, int, int)",0
"net.sf.freecol.client.gui.panel.WorkProductionPanel.WorkProductionPanel(FreeColClient, Unit)",8
"net.sf.freecol.client.gui.panel.WorkProductionPanel.output(List<Modifier>, UnitType)",0
net.sf.freecol.client.gui.panel.WrapLayout.WrapLayout(),4
net.sf.freecol.client.gui.panel.WrapLayout.WrapLayout(int),8
"net.sf.freecol.client.gui.panel.WrapLayout.WrapLayout(int, int, int)",11
"net.sf.freecol.client.gui.panel.WrapLayout.addRow(Dimension, int, int)",0
"net.sf.freecol.client.gui.panel.WrapLayout.layoutSize(Container, boolean)",8
net.sf.freecol.client.gui.panel.WrapLayout.minimumLayoutSize(Container),8
net.sf.freecol.client.gui.panel.WrapLayout.preferredLayoutSize(Container),8
"net.sf.freecol.client.gui.panel.colopedia.BuildingDetailPanel.BuildingDetailPanel(FreeColClient, ColopediaPanel)",6
net.sf.freecol.client.gui.panel.colopedia.BuildingDetailPanel.addSubTrees(DefaultMutableTreeNode),3
"net.sf.freecol.client.gui.panel.colopedia.BuildingDetailPanel.buildDetail(String, JPanel)",3
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.ColopediaGameObjectTypePanel(FreeColClient, ColopediaPanel, String)",7
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.addSubTrees(DefaultMutableTreeNode, List<T>)",6
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.addSubTrees(DefaultMutableTreeNode, String, List<T>)",7
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.appendRequiredAbility(StyledDocument, String, boolean)",0
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.buildItem(FreeColSpecObjectType, ImageIcon)",0
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getAbilityComponent(Ability),0
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getButton(FreeColSpecObjectType),0
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getButton(FreeColSpecObjectType, String, ImageIcon)",0
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getButton(PanelType, String, ImageIcon)",0
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getGoodsButton(AbstractGoods),0
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getGoodsButton(GoodsType),0
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getGoodsButton(GoodsType, String)",0
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getGoodsButton(GoodsType, int)",0
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getId(),5
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getListItemIconSize(),0
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getModifierComponent(Modifier),0
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getName(),6
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getResourceButton(ResourceType),0
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getUnitButton(AbstractUnit),0
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getUnitButton(UnitType),0
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getUnitButton(UnitType, String)",0
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.ColopediaPanel(FreeColClient),8
"net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.ColopediaPanel(FreeColClient, String)",6
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.buildTree(),5
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.getListItemIconSize(),5
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.hyperlinkUpdate(HyperlinkEvent),0
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.select(String),0
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.showDetails(ColopediaTreeItem),0
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.valueChanged(TreeSelectionEvent),7
"net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeCellRenderer.ColopediaTreeCellRenderer(ColopediaPanel, ImageLibrary)",6
"net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeCellRenderer.getTreeCellRendererComponent(JTree, Object, boolean, boolean, boolean, int, boolean)",3
"net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.ColopediaTreeItem(ColopediaDetailPanel, String, String, ImageIcon)",9
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.getIcon(),5
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.getId(),0
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.getPanelType(),5
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.getText(),0
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.toString(),3
"net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.ConceptDetailPanel(FreeColClient, ColopediaPanel)",6
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.ConceptEditorPane.ConceptEditorPane(String),5
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.ConceptEditorPane.paintComponent(Graphics),3
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.addSubTrees(DefaultMutableTreeNode),3
"net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.buildDetail(String, JPanel)",3
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.getName(),3
"net.sf.freecol.client.gui.panel.colopedia.FatherDetailPanel.FatherDetailPanel(FreeColClient, ColopediaPanel)",6
net.sf.freecol.client.gui.panel.colopedia.FatherDetailPanel.addSubTrees(DefaultMutableTreeNode),3
"net.sf.freecol.client.gui.panel.colopedia.FatherDetailPanel.buildDetail(FoundingFather, JPanel)",6
"net.sf.freecol.client.gui.panel.colopedia.FatherDetailPanel.buildDetail(String, JPanel)",3
"net.sf.freecol.client.gui.panel.colopedia.GoodsDetailPanel.GoodsDetailPanel(FreeColClient, ColopediaPanel)",6
net.sf.freecol.client.gui.panel.colopedia.GoodsDetailPanel.addSubTrees(DefaultMutableTreeNode),3
"net.sf.freecol.client.gui.panel.colopedia.GoodsDetailPanel.buildDetail(String, JPanel)",3
"net.sf.freecol.client.gui.panel.colopedia.GoodsDetailPanel.filterBuildables(List<T>, List<T>, GoodsType)",0
"net.sf.freecol.client.gui.panel.colopedia.NationDetailPanel.NationDetailPanel(FreeColClient, ColopediaPanel)",6
net.sf.freecol.client.gui.panel.colopedia.NationDetailPanel.addSubTrees(DefaultMutableTreeNode),3
"net.sf.freecol.client.gui.panel.colopedia.NationDetailPanel.buildDetail(String, JPanel)",3
"net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel.NationTypeDetailPanel(FreeColClient, ColopediaPanel)",6
net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel.addSubTrees(DefaultMutableTreeNode),3
"net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel.buildDetail(String, JPanel)",3
"net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel.buildEuropeanNationTypeDetail(EuropeanNationType, JPanel)",6
"net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel.buildIndianNationTypeDetail(IndianNationType, JPanel)",6
"net.sf.freecol.client.gui.panel.colopedia.ResourcesDetailPanel.ResourcesDetailPanel(FreeColClient, ColopediaPanel)",6
net.sf.freecol.client.gui.panel.colopedia.ResourcesDetailPanel.addSubTrees(DefaultMutableTreeNode),3
"net.sf.freecol.client.gui.panel.colopedia.ResourcesDetailPanel.buildDetail(String, JPanel)",3
"net.sf.freecol.client.gui.panel.colopedia.TerrainDetailPanel.TerrainDetailPanel(FreeColClient, ColopediaPanel)",6
"net.sf.freecol.client.gui.panel.colopedia.TerrainDetailPanel.addProduction(JPanel, Stream<AbstractGoods>)",0
net.sf.freecol.client.gui.panel.colopedia.TerrainDetailPanel.addSubTrees(DefaultMutableTreeNode),3
"net.sf.freecol.client.gui.panel.colopedia.TerrainDetailPanel.buildDetail(String, JPanel)",3
"net.sf.freecol.client.gui.panel.colopedia.UnitDetailPanel.UnitDetailPanel(FreeColClient, ColopediaPanel)",6
net.sf.freecol.client.gui.panel.colopedia.UnitDetailPanel.addSubTrees(DefaultMutableTreeNode),3
"net.sf.freecol.client.gui.panel.colopedia.UnitDetailPanel.buildDetail(String, JPanel)",3
net.sf.freecol.client.gui.panel.report.CompactLabourReport.CompactLabourReport(FreeColClient),5
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.CompactLabourReport(FreeColClient, UnitData)",6
net.sf.freecol.client.gui.panel.report.CompactLabourReport.addHeader(),3
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.addLocationData(LocationData, Colony, int)",8
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.addLocationSummary(LocationData, int)",0
net.sf.freecol.client.gui.panel.report.CompactLabourReport.addLocations(),0
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.addNonLinkedLocation(LocationData, String, int)",0
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.addRow(LocationData, String, String, JLabel, int, int)",0
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.addRow(LocationData, String, String, int, int, int)",0
net.sf.freecol.client.gui.panel.report.CompactLabourReport.addUnitTypes(),0
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.createButton(String, ActionListener)",0
net.sf.freecol.client.gui.panel.report.CompactLabourReport.createColonyButton(Colony),0
net.sf.freecol.client.gui.panel.report.CompactLabourReport.createEmptyLabel(),0
net.sf.freecol.client.gui.panel.report.CompactLabourReport.createNonCountedLabel(int),0
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.createNumberLabel(int, String)",0
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.createUnitNameButton(String, UnitData)",0
net.sf.freecol.client.gui.panel.report.CompactLabourReport.getGoodsType(),0
net.sf.freecol.client.gui.panel.report.CompactLabourReport.initialize(),0
net.sf.freecol.client.gui.panel.report.CompactLabourReport.isOverview(),5
net.sf.freecol.client.gui.panel.report.CompactLabourReport.isSummary(),5
net.sf.freecol.client.gui.panel.report.LabourData.ColonyLocationDataGetter.ColonyLocationDataGetter(Colony),5
net.sf.freecol.client.gui.panel.report.LabourData.ColonyLocationDataGetter.getLocationData(UnitData),3
net.sf.freecol.client.gui.panel.report.LabourData.LabourData(FreeColClient),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.LocationData(UnitData),0
"net.sf.freecol.client.gui.panel.report.LabourData.LocationData.LocationData(UnitData, boolean)",0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.add(LocationData),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.addOtherStudent(String),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getNetProduction(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getNotWorking(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getOtherStudents(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getOtherStudentsName(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getOtherWorkingAmateurs(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getRowCount(),5
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getStudents(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getTeachers(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getTotalColonists(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getTotalProduction(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getUnitData(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getWorkingAmateurs(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getWorkingProfessionals(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.isTotal(),0
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.isTraining(),0
net.sf.freecol.client.gui.panel.report.LabourData.ProductionData.add(ProductionData),0
net.sf.freecol.client.gui.panel.report.LabourData.ProductionData.addProduction(int),0
net.sf.freecol.client.gui.panel.report.LabourData.ProductionData.getColonists(),0
net.sf.freecol.client.gui.panel.report.LabourData.ProductionData.getProduction(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.UnitData(UnitType),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getDetails(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getExpertProduction(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getLocationData(Colony),6
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getTotal(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitName(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitSummaryRowCount(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitType(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitsAtSea(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitsInEurope(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitsOnLand(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.hasDetails(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.isSummary(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.showNetProduction(),0
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.showProduction(),0
net.sf.freecol.client.gui.panel.report.LabourData.gatherData(Player),0
net.sf.freecol.client.gui.panel.report.LabourData.getLabourTypes(Player),0
net.sf.freecol.client.gui.panel.report.LabourData.getSummary(),0
net.sf.freecol.client.gui.panel.report.LabourData.getUnitData(UnitType),6
"net.sf.freecol.client.gui.panel.report.LabourData.incrementColonyCount(Colony, Unit, UnitData)",0
"net.sf.freecol.client.gui.panel.report.LabourData.incrementOutsideWorker(UnitData, Unit, Getter)",0
"net.sf.freecol.client.gui.panel.report.LabourData.incrementOutsideWorker(UnitData, Unit, UnitData, Getter)",0
net.sf.freecol.client.gui.panel.report.LabourData.summarize(),0
"net.sf.freecol.client.gui.panel.report.LabourData.summarize(UnitData, Getter)",0
net.sf.freecol.client.gui.panel.report.ReportCargoPanel.ReportCargoPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.report.ReportCargoPanel.isReportable(Unit),3
"net.sf.freecol.client.gui.panel.report.ReportCargoPanel.isReportable(UnitType, Role)",3
net.sf.freecol.client.gui.panel.report.ReportCargoPanel.isReportableREF(AbstractUnit),3
net.sf.freecol.client.gui.panel.report.ReportClassicColonyPanel.ReportClassicColonyPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.report.ReportClassicColonyPanel.update(),0
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.ColonySummary(Colony, List<GoodsType>)",7
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.GoodsProduction.GoodsProduction(int, ProductionStatus, int)",7
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.GoodsProduction.accumulate(GoodsProduction),6
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.addSuggestion(Map<UnitType, Suggestion>, UnitType, Suggestion)",0
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.produce(GoodsType),5
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ReportCompactColonyPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.addTogether(List<? extends JComponent>),0
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.conciseHeaders(Market),6
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.loadResources(),0
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.newButton(String, String, ImageIcon, Color, StringTemplate)",0
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.newLabel(String, ImageIcon, Color)",0
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.newLabel(String, ImageIcon, Color, StringTemplate)",0
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.stpl(String),0
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.stpld(String),0
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.unitButtons(Map<UnitType, Suggestion>, List<UnitType>, Colony)",0
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.unitTypeLabels(Map<UnitType, Integer>, int, StringTemplate)",0
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.update(),3
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.updateColony(ColonySummary),5
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.updateCombinedColonies(List<ColonySummary>),5
net.sf.freecol.client.gui.panel.report.ReportContinentalCongressPanel.ReportContinentalCongressPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.report.ReportEducationPanel.ReportEducationPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.report.ReportEducationPanel.getPanel(String),0
net.sf.freecol.client.gui.panel.report.ReportExplorationPanel.ReportExplorationPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.report.ReportForeignAffairPanel.ReportForeignAffairPanel(FreeColClient),5
"net.sf.freecol.client.gui.panel.report.ReportHighScoresPanel.ReportHighScoresPanel(FreeColClient, String, List<HighScore>)",7
net.sf.freecol.client.gui.panel.report.ReportHistoryPanel.ReportHistoryPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.report.ReportIndianPanel.ReportIndianPanel(FreeColClient),5
"net.sf.freecol.client.gui.panel.report.ReportIndianPanel.buildIndianAdvisorPanel(Player, Player)",0
"net.sf.freecol.client.gui.panel.report.ReportLabourDetailPanel.ReportLabourDetailPanel(FreeColClient, UnitType, Map<UnitType, Map<Location, Integer>>, TypeCountMap<UnitType>, List<Colony>)",9
net.sf.freecol.client.gui.panel.report.ReportLabourDetailPanel.initialize(),0
"net.sf.freecol.client.gui.panel.report.ReportLabourPanel.LabourUnitPanel.LabourUnitPanel(FreeColClient, UnitType, int)",0
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.LabourUnitPanel.paintComponent(Graphics),0
"net.sf.freecol.client.gui.panel.report.ReportLabourPanel.LabourUnitPanelRenderer.getListCellRendererComponent(JList<? extends LabourUnitPanel>, LabourUnitPanel, int, boolean, boolean)",3
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.ReportLabourPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.showDetails(),0
net.sf.freecol.client.gui.panel.report.ReportMilitaryPanel.ReportMilitaryPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.report.ReportMilitaryPanel.isReportable(Unit),3
"net.sf.freecol.client.gui.panel.report.ReportMilitaryPanel.isReportable(UnitType, Role)",3
net.sf.freecol.client.gui.panel.report.ReportMilitaryPanel.isReportableREF(AbstractUnit),3
net.sf.freecol.client.gui.panel.report.ReportNavalPanel.ReportNavalPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.report.ReportNavalPanel.isReportable(Unit),3
"net.sf.freecol.client.gui.panel.report.ReportNavalPanel.isReportable(UnitType, Role)",3
net.sf.freecol.client.gui.panel.report.ReportNavalPanel.isReportableREF(AbstractUnit),3
"net.sf.freecol.client.gui.panel.report.ReportPanel.ReportPanel(FreeColClient, String)",6
net.sf.freecol.client.gui.panel.report.ReportPanel.actionPerformed(ActionEvent),3
net.sf.freecol.client.gui.panel.report.ReportPanel.createBorder(),0
net.sf.freecol.client.gui.panel.report.ReportPanel.createUnitTypeLabel(AbstractUnit),0
net.sf.freecol.client.gui.panel.report.ReportPanel.getLocationLabelFor(Unit),0
net.sf.freecol.client.gui.panel.report.ReportPanel.initialize(),3
net.sf.freecol.client.gui.panel.report.ReportPanel.removeNotify(),3
net.sf.freecol.client.gui.panel.report.ReportPanel.setMainComponent(Component),0
net.sf.freecol.client.gui.panel.report.ReportProductionPanel.ReportProductionPanel(FreeColClient),7
net.sf.freecol.client.gui.panel.report.ReportProductionPanel.update(),0
net.sf.freecol.client.gui.panel.report.ReportReligiousPanel.ReportReligiousPanel(FreeColClient),5
net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.ReportRequirementsPanel(FreeColClient),5
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.addBadAssignmentWarning(StyledDocument, Colony, Unit, Unit)",0
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.addExpertWarning(StyledDocument, Colony, GoodsType, UnitType)",0
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.addProductionWarning(StyledDocument, Colony, GoodsType, GoodsType)",0
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.addTileWarning(StyledDocument, Colony, String, Tile)",0
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.checkColony(Colony, StyledDocument)",0
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.createColonyButton(Colony, String, boolean)",0
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.createColonyButton(Colony, boolean)",0
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.insertColonyButtons(StyledDocument, List<Colony>)",0
net.sf.freecol.client.gui.panel.report.ReportTradePanel.ReportTradePanel(FreeColClient),8
net.sf.freecol.client.gui.panel.report.ReportTradePanel.createLeftLabel(String),0
net.sf.freecol.client.gui.panel.report.ReportTradePanel.createNumberLabel(int),0
"net.sf.freecol.client.gui.panel.report.ReportTradePanel.createNumberLabel(int, boolean)",0
"net.sf.freecol.client.gui.panel.report.ReportTurnPanel.ReportTurnPanel(FreeColClient, List<ModelMessage>)",6
net.sf.freecol.client.gui.panel.report.ReportTurnPanel.displayMessages(),0
net.sf.freecol.client.gui.panel.report.ReportTurnPanel.getHeadline(FreeColGameObject),0
"net.sf.freecol.client.gui.panel.report.ReportTurnPanel.insertMessage(StyledDocument, ModelMessage, Player)",0
net.sf.freecol.client.gui.panel.report.ReportTurnPanel.setMessages(List<ModelMessage>),5
"net.sf.freecol.client.gui.panel.report.ReportUnitPanel.ReportUnitPanel(FreeColClient, String, boolean)",7
net.sf.freecol.client.gui.panel.report.ReportUnitPanel.display(),0
net.sf.freecol.client.gui.panel.report.ReportUnitPanel.gatherData(),0
net.sf.freecol.client.gui.panel.report.ReportUnitPanel.getUnitButton(Unit),6
net.sf.freecol.client.gui.plaf.FreeColBrightPanelUI.createUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColBrightPanelUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColButtonUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColButtonUI.getButtonStyle(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColButtonUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColButtonUI.paint(Graphics, JComponent)",0
"net.sf.freecol.client.gui.plaf.FreeColButtonUI.paintButtonPressed(Graphics, AbstractButton)",0
net.sf.freecol.client.gui.plaf.FreeColButtonUI.uninstallUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColButtonUI.updateStyle(JComponent, ButtonStyle)",0
net.sf.freecol.client.gui.plaf.FreeColCheckBoxMenuItemUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColCheckBoxMenuItemUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColCheckBoxMenuItemUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.CheckBoxIcon.getIconHeight(),0
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.CheckBoxIcon.getIconWidth(),0
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.CheckBoxIcon.getWidgetSize(),0
"net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.CheckBoxIcon.paintIcon(Component, Graphics, int, int)",0
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.createCheckBoxIcon(),0
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.FreeColComboBoxRenderer(),5
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.FreeColComboBoxRenderer(String),6
"net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.FreeColComboBoxRenderer(String, boolean)",7
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.NormalComponent.NormalComponent(),0
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.SelectedComponent.SelectedComponent(),0
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.SelectedComponent.paintComponent(Graphics),0
"net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.getListCellRendererComponent(JList<? extends T>, T, int, boolean, boolean)",11
"net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.setLabelValues(JLabel, T)",6
net.sf.freecol.client.gui.plaf.FreeColComboBoxUI.createRenderer(),0
net.sf.freecol.client.gui.plaf.FreeColComboBoxUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColComboBoxUI.installUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColFileChooserUI.FreeColFileChooserUI(JFileChooser),0
net.sf.freecol.client.gui.plaf.FreeColFileChooserUI.addControlButtons(),0
net.sf.freecol.client.gui.plaf.FreeColFileChooserUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColFormattedTextFieldUI.FreeColFormattedTextFieldUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColFormattedTextFieldUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColFormattedTextFieldUI.getPropertyPrefix(),0
net.sf.freecol.client.gui.plaf.FreeColLabelUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColLabelUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColLabelUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColListUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColListUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColListUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColLookAndFeel(),5
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getColor(String),0
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getMenuDisabledForeground(),3
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getPrimary1(),3
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getPrimary2(),3
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getPrimary3(),3
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getSecondary1(),3
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getSecondary2(),3
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getSecondary3(),3
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.getDefaults(),5
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.getDescription(),5
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.getName(),5
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.install(FreeColLookAndFeel),6
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.installFont(Font),5
net.sf.freecol.client.gui.plaf.FreeColMenuBarUI.createUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColMenuBarUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColMenuItemUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColMenuItemUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColMenuItemUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColMenuUI.createAncestorListener(),0
net.sf.freecol.client.gui.plaf.FreeColMenuUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColMenuUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColMenuUI.paint(Graphics, JComponent)",0
"net.sf.freecol.client.gui.plaf.FreeColMenuUI.paintBackground(Graphics, JMenuItem, Color)",0
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.FreeColOptionPaneUI(),1
"net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.addButtonComponents(Container, Object[], int)",3
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.createButtonArea(),3
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.createUI(JComponent),3
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.getButton(int),6
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.getColumns(int),6
"net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.paint(Graphics, JComponent)",3
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.prepareButtons(),5
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.selectInitialValue(JOptionPane),3
net.sf.freecol.client.gui.plaf.FreeColPanelUI.FreeColPanelUI(),0
net.sf.freecol.client.gui.plaf.FreeColPanelUI.createUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColPanelUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColPopupMenuUI.createUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColPopupMenuUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColRadioButtonMenuItemUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColRadioButtonMenuItemUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColRadioButtonMenuItemUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.RadioButtonIcon.getIconHeight(),0
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.RadioButtonIcon.getIconWidth(),0
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.RadioButtonIcon.getWidgetSize(),0
"net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.RadioButtonIcon.paintIcon(Component, Graphics, int, int)",0
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.createRadioButtonIcon(),0
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColScrollPaneUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColScrollPaneUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColScrollPaneUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColSelectedPanelUI.createUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColSelectedPanelUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColSpinnerUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColSpinnerUI.installUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColTableHeaderUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColTableHeaderUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColTableHeaderUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColTableUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColTableUI.installUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColTableUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColTextAreaUI.FreeColTextAreaUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColTextAreaUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColTextAreaUI.paintBackground(Graphics),0
net.sf.freecol.client.gui.plaf.FreeColTextAreaUI.paintSafely(Graphics),0
net.sf.freecol.client.gui.plaf.FreeColTextFieldUI.FreeColTextFieldUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColTextFieldUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColTextFieldUI.paintBackground(Graphics),0
net.sf.freecol.client.gui.plaf.FreeColTextFieldUI.paintSafely(Graphics),0
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.FreeColToolTipUI(),0
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.createUI(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.getMaximumSize(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.getMinimumSize(JComponent),0
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.getPreferredSize(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColToolTipUI.paint(Graphics, JComponent)",0
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.setFontScaling(float),0
net.sf.freecol.client.gui.plaf.FreeColTransparentPanelUI.createUI(JComponent),0
"net.sf.freecol.client.gui.plaf.FreeColTransparentPanelUI.paint(Graphics, JComponent)",0
"net.sf.freecol.client.gui.plaf.LAFUtilities.setProperties(Graphics, JComponent)",12
"net.sf.freecol.client.gui.tooltip.BuildingToolTip.BuildingToolTip(FreeColClient, Building)",6
net.sf.freecol.client.gui.tooltip.BuildingToolTip.removeNotify(),3
"net.sf.freecol.client.gui.tooltip.RebelToolTip.RebelToolTip(FreeColClient, Colony)",6
net.sf.freecol.client.gui.tooltip.RebelToolTip.removeNotify(),3
"net.sf.freecol.client.gui.video.VideoComponent.VideoComponent(Video, boolean, Dimension)",7
net.sf.freecol.client.gui.video.VideoComponent.addMouseListener(MouseListener),0
net.sf.freecol.client.gui.video.VideoComponent.createBorder(),0
net.sf.freecol.client.gui.video.VideoComponent.determineAppletSize(Dimension),0
net.sf.freecol.client.gui.video.VideoComponent.play(),3
net.sf.freecol.client.gui.video.VideoComponent.removeMouseListener(MouseListener),0
net.sf.freecol.client.gui.video.VideoComponent.removeNotify(),3
net.sf.freecol.client.gui.video.VideoComponent.stop(),3
net.sf.freecol.client.networking.UserServerAPI.UserServerAPI(),3
"net.sf.freecol.client.networking.UserServerAPI.connect(String, String, int)",3
net.sf.freecol.client.networking.UserServerAPI.disconnect(),3
net.sf.freecol.client.networking.UserServerAPI.getConnection(),3
net.sf.freecol.client.networking.UserServerAPI.getHost(),5
net.sf.freecol.client.networking.UserServerAPI.getName(),5
net.sf.freecol.client.networking.UserServerAPI.getPort(),5
"net.sf.freecol.client.networking.UserServerAPI.newConnection(String, String, int)",9
net.sf.freecol.client.networking.UserServerAPI.reconnect(),3
net.sf.freecol.client.networking.UserServerAPI.setMessageHandler(MessageHandler),3
net.sf.freecol.client.networking.UserServerAPI.updateConnection(Connection),5
"net.sf.freecol.client.networking.UserServerAPI.updateParameters(String, String, int)",7
net.sf.freecol.common.AllTests.suite(),0
net.sf.freecol.common.FreeColException.FreeColException(String),5
"net.sf.freecol.common.FreeColException.FreeColException(String, Throwable)",6
net.sf.freecol.common.FreeColException.FreeColException(Throwable),5
net.sf.freecol.common.FreeColException.debugAllowed(),5
net.sf.freecol.common.FreeColException.preserveDebug(),5
net.sf.freecol.common.FreeColSeed.generateFreeColSeed(),3
net.sf.freecol.common.FreeColSeed.getFreeColSeed(),5
net.sf.freecol.common.FreeColSeed.hasFreeColSeed(),5
net.sf.freecol.common.FreeColSeed.setFreeColSeed(String),6
"net.sf.freecol.common.debug.DebugUtils.addBuildings(FreeColClient, String)",8
"net.sf.freecol.common.debug.DebugUtils.addFathers(FreeColClient, String)",8
net.sf.freecol.common.debug.DebugUtils.addGold(FreeColClient),7
"net.sf.freecol.common.debug.DebugUtils.addGoodsAdditionEntry(FreeColClient, Unit, JPopupMenu)",7
net.sf.freecol.common.debug.DebugUtils.addImmigration(FreeColClient),7
net.sf.freecol.common.debug.DebugUtils.addLiberty(FreeColClient),7
"net.sf.freecol.common.debug.DebugUtils.addNewUnitToTile(FreeColClient, Tile)",8
"net.sf.freecol.common.debug.DebugUtils.addSkipChangeListener(FreeColClient, JMenu, JMenuItem)",8
"net.sf.freecol.common.debug.DebugUtils.addUnitGoods(FreeColClient, Unit)",8
"net.sf.freecol.common.debug.DebugUtils.applyDisaster(FreeColClient, Colony)",8
"net.sf.freecol.common.debug.DebugUtils.changeOwnership(FreeColClient, Colony)",8
"net.sf.freecol.common.debug.DebugUtils.changeOwnership(FreeColClient, Unit)",8
"net.sf.freecol.common.debug.DebugUtils.changeRole(FreeColClient, Unit)",8
net.sf.freecol.common.debug.DebugUtils.checkDesyncAction(FreeColClient),9
"net.sf.freecol.common.debug.DebugUtils.checkDesyncTile(Game, ServerPlayer, Tile, LogBuilder)",8
"net.sf.freecol.common.debug.DebugUtils.displayColonyPlan(FreeColClient, Colony)",8
net.sf.freecol.common.debug.DebugUtils.displayEurope(FreeColClient),7
"net.sf.freecol.common.debug.DebugUtils.displayMission(FreeColClient, Unit)",8
net.sf.freecol.common.debug.DebugUtils.displayUnits(FreeColClient),8
"net.sf.freecol.common.debug.DebugUtils.dumpTile(FreeColClient, Tile)",9
net.sf.freecol.common.debug.DebugUtils.getColonyValue(Tile),10
"net.sf.freecol.common.debug.DebugUtils.logEurope(AIMain, LogBuilder, String, List<Unit>)",8
net.sf.freecol.common.debug.DebugUtils.reconnect(FreeColClient),5
"net.sf.freecol.common.debug.DebugUtils.resetMoves(FreeColClient, List<Unit>)",8
"net.sf.freecol.common.debug.DebugUtils.revealMap(FreeColClient, boolean)",8
"net.sf.freecol.common.debug.DebugUtils.setColonyGoods(FreeColClient, Colony)",8
"net.sf.freecol.common.debug.DebugUtils.setCommsLogging(FreeColClient, boolean)",6
"net.sf.freecol.common.debug.DebugUtils.setMonarchAction(FreeColClient, String)",8
"net.sf.freecol.common.debug.DebugUtils.setRumourType(FreeColClient, Tile)",8
"net.sf.freecol.common.debug.DebugUtils.showForeignColony(FreeColClient, Colony)",6
net.sf.freecol.common.debug.DebugUtils.skipTurns(FreeColClient),7
net.sf.freecol.common.debug.DebugUtils.statistics(FreeColClient),7
net.sf.freecol.common.debug.DebugUtils.stepRNG(FreeColClient),7
"net.sf.freecol.common.debug.DebugUtils.summarizeSettlement(FreeColClient, IndianSettlement)",10
net.sf.freecol.common.debug.FreeColDebugger.addStackTrace(LogBuilder),5
"net.sf.freecol.common.debug.FreeColDebugger.addStackTrace(LogBuilder, Thread)",6
net.sf.freecol.common.debug.FreeColDebugger.configureDebugRun(String),5
net.sf.freecol.common.debug.FreeColDebugger.debugDisplayColonyValuePlayer(),6
net.sf.freecol.common.debug.FreeColDebugger.debugDisplayCoordinates(),5
net.sf.freecol.common.debug.FreeColDebugger.debugLog(String),6
net.sf.freecol.common.debug.FreeColDebugger.debugRendering(),3
net.sf.freecol.common.debug.FreeColDebugger.debugShowDefenceMapForPlayer(),0
net.sf.freecol.common.debug.FreeColDebugger.debugShowMission(),5
net.sf.freecol.common.debug.FreeColDebugger.debugShowMissionInfo(),5
net.sf.freecol.common.debug.FreeColDebugger.disableDebugMode(DebugMode),5
net.sf.freecol.common.debug.FreeColDebugger.enableDebugMode(DebugMode),5
"net.sf.freecol.common.debug.FreeColDebugger.finishDebugRun(FreeColClient, boolean)",7
net.sf.freecol.common.debug.FreeColDebugger.getDebugModes(),5
net.sf.freecol.common.debug.FreeColDebugger.getDebugRunSave(),5
net.sf.freecol.common.debug.FreeColDebugger.getDebugRunTurns(),5
net.sf.freecol.common.debug.FreeColDebugger.getNormalGameFogOfWar(),5
net.sf.freecol.common.debug.FreeColDebugger.handleCrash(),3
net.sf.freecol.common.debug.FreeColDebugger.isInDebugMode(),5
net.sf.freecol.common.debug.FreeColDebugger.isInDebugMode(DebugMode),6
net.sf.freecol.common.debug.FreeColDebugger.setDebugDisplayColonyValuePlayer(Player),5
net.sf.freecol.common.debug.FreeColDebugger.setDebugDisplayCoordinates(boolean),5
"net.sf.freecol.common.debug.FreeColDebugger.setDebugMode(DebugMode, boolean)",6
net.sf.freecol.common.debug.FreeColDebugger.setDebugModes(String),6
net.sf.freecol.common.debug.FreeColDebugger.setDebugRendering(boolean),5
net.sf.freecol.common.debug.FreeColDebugger.setDebugRunSave(String),5
net.sf.freecol.common.debug.FreeColDebugger.setDebugRunTurns(int),5
net.sf.freecol.common.debug.FreeColDebugger.setDebugShowDefenceMapForPlayer(Player),3
net.sf.freecol.common.debug.FreeColDebugger.setDebugShowMission(boolean),5
net.sf.freecol.common.debug.FreeColDebugger.setDebugShowMissionInfo(boolean),5
net.sf.freecol.common.debug.FreeColDebugger.setNormalGameFogOfWar(boolean),5
net.sf.freecol.common.debug.FreeColDebugger.signalEndDebugRun(),4
net.sf.freecol.common.debug.FreeColDebugger.stackTraceToString(),6
net.sf.freecol.common.debug.FreeColDebugger.stackTraceToString(Thread),7
"net.sf.freecol.common.debug.FreeColDebugger.trace(Logger, String)",6
net.sf.freecol.common.i18n.AllTests.suite(),0
net.sf.freecol.common.i18n.CLDRTest.testPlurals(),0
net.sf.freecol.common.i18n.CLDRTest.testRuleParsing(),0
"net.sf.freecol.common.i18n.DefaultNumberRule.addRule(Category, Rule)",6
"net.sf.freecol.common.i18n.DefaultNumberRule.addRule(Category, String)",6
net.sf.freecol.common.i18n.DefaultNumberRule.countRules(),5
net.sf.freecol.common.i18n.DefaultNumberRule.getCategory(double),3
net.sf.freecol.common.i18n.DefaultNumberRule.getRule(Category),6
net.sf.freecol.common.i18n.DualNumberRule.getCategory(double),3
"net.sf.freecol.common.i18n.Merge.Merge(List<String>, List<String>)",0
"net.sf.freecol.common.i18n.MergeTableCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",0
net.sf.freecol.common.i18n.MergeTableCellRenderer.propertyOn(String),0
"net.sf.freecol.common.i18n.MergeTableModel.deleteFromRight(int, int)",0
net.sf.freecol.common.i18n.MergeTableModel.getColumnCount(),0
net.sf.freecol.common.i18n.MergeTableModel.getColumnName(int),0
net.sf.freecol.common.i18n.MergeTableModel.getRowCount(),0
"net.sf.freecol.common.i18n.MergeTableModel.getValueAt(int, int)",0
"net.sf.freecol.common.i18n.MergeTableModel.insertInRight(int, int)",0
net.sf.freecol.common.i18n.MergeTableModel.leftLineAtRow(int),0
net.sf.freecol.common.i18n.MergeTableModel.mergeChanged(),0
net.sf.freecol.common.i18n.MergeTableModel.rightLineAtRow(int),0
net.sf.freecol.common.i18n.MessageMerge.loadLinesFromFile(String),0
net.sf.freecol.common.i18n.MessageMerge.main(String[]),0
"net.sf.freecol.common.i18n.MessageMerge.saveLinesToFile(List<String>, String)",0
net.sf.freecol.common.i18n.Messages.containsKey(String),6
net.sf.freecol.common.i18n.Messages.descriptionKey(ObjectWithId),0
net.sf.freecol.common.i18n.Messages.descriptionKey(String),0
"net.sf.freecol.common.i18n.Messages.findMatchingBracket(String, int)",8
net.sf.freecol.common.i18n.Messages.getBestDescription(ObjectWithId),0
net.sf.freecol.common.i18n.Messages.getBestDescription(String),0
net.sf.freecol.common.i18n.Messages.getBestNameAndDescription(Named),9
net.sf.freecol.common.i18n.Messages.getBestNameAndDescription(String),9
"net.sf.freecol.common.i18n.Messages.getChoice(String, String)",8
net.sf.freecol.common.i18n.Messages.getDescription(ObjectWithId),0
net.sf.freecol.common.i18n.Messages.getDescription(String),0
"net.sf.freecol.common.i18n.Messages.getKey(String, String)",9
net.sf.freecol.common.i18n.Messages.getLocale(String),9
net.sf.freecol.common.i18n.Messages.getName(Named),0
net.sf.freecol.common.i18n.Messages.getName(String),0
net.sf.freecol.common.i18n.Messages.getRulerName(String),0
net.sf.freecol.common.i18n.Messages.getSelector(String),6
net.sf.freecol.common.i18n.Messages.getShortDescription(ObjectWithId),0
net.sf.freecol.common.i18n.Messages.getShortDescription(String),0
"net.sf.freecol.common.i18n.Messages.getUnitLabel(String, String, int, String, String, StringTemplate)",12
"net.sf.freecol.common.i18n.Messages.loadActiveModMessageBundle(List<FreeColModFile>, Locale)",8
net.sf.freecol.common.i18n.Messages.loadMessageBundle(Locale),8
net.sf.freecol.common.i18n.Messages.loadMessages(InputStream),10
net.sf.freecol.common.i18n.Messages.loadModMessageBundle(Locale),12
net.sf.freecol.common.i18n.Messages.matchesName(String),6
net.sf.freecol.common.i18n.Messages.matchesNamed(String),6
net.sf.freecol.common.i18n.Messages.message(String),8
net.sf.freecol.common.i18n.Messages.message(StringTemplate),6
net.sf.freecol.common.i18n.Messages.nameKey(ObjectWithId),0
net.sf.freecol.common.i18n.Messages.nameKey(String),0
"net.sf.freecol.common.i18n.Messages.replaceChoices(String, StringTemplate)",17
net.sf.freecol.common.i18n.Messages.rulerKey(String),0
net.sf.freecol.common.i18n.Messages.setGrammaticalNumber(Number),5
net.sf.freecol.common.i18n.Messages.shortDescriptionKey(String),0
net.sf.freecol.common.i18n.MessagesTest.tearDown(),0
net.sf.freecol.common.i18n.MessagesTest.testAbstractUnitDescription(),0
net.sf.freecol.common.i18n.MessagesTest.testChangeLocaleSettings(),0
net.sf.freecol.common.i18n.MessagesTest.testMessageString(),0
net.sf.freecol.common.i18n.MessagesTest.testMessageWithSpecialChars(),0
net.sf.freecol.common.i18n.MessagesTest.testNestedChoices(),0
net.sf.freecol.common.i18n.MessagesTest.testREFMessages(),0
net.sf.freecol.common.i18n.MessagesTest.testReplaceArbitraryTag(),0
net.sf.freecol.common.i18n.MessagesTest.testReplaceChoicesGrammar(),0
net.sf.freecol.common.i18n.MessagesTest.testReplaceChoicesPlural(),0
net.sf.freecol.common.i18n.MessagesTest.testReplaceGarbage(),0
net.sf.freecol.common.i18n.MessagesTest.testReplaceNumber(),0
net.sf.freecol.common.i18n.MessagesTest.testStringTemplates(),0
net.sf.freecol.common.i18n.MessagesTest.testUnitDescription(),0
net.sf.freecol.common.i18n.NameCache.addCityOfCibola(String),5
net.sf.freecol.common.i18n.NameCache.clearCitiesOfCibola(),3
"net.sf.freecol.common.i18n.NameCache.collectKeys(String, List<String>, String)",7
"net.sf.freecol.common.i18n.NameCache.collectNames(String, List<String>)",8
"net.sf.freecol.common.i18n.NameCache.getCapitalName(Player, Random)",7
net.sf.freecol.common.i18n.NameCache.getCitiesOfCibola(),5
net.sf.freecol.common.i18n.NameCache.getFallbackSettlementName(Player),7
net.sf.freecol.common.i18n.NameCache.getMercenaryLeaderIndex(Random),6
net.sf.freecol.common.i18n.NameCache.getMercenaryLeaderName(int),6
net.sf.freecol.common.i18n.NameCache.getNewLandName(Player),6
net.sf.freecol.common.i18n.NameCache.getNextCityOfCibola(),6
"net.sf.freecol.common.i18n.NameCache.getRegionName(Player, Region)",8
net.sf.freecol.common.i18n.NameCache.getRumourNothingKey(Random),6
net.sf.freecol.common.i18n.NameCache.getSeasonName(int),6
"net.sf.freecol.common.i18n.NameCache.getSettlementName(Player, Random)",7
net.sf.freecol.common.i18n.NameCache.getTradeRouteName(Player),6
"net.sf.freecol.common.i18n.NameCache.getUnitName(Player, UnitType, Random)",12
"net.sf.freecol.common.i18n.NameCache.makeRegionKey(Player, RegionType)",7
"net.sf.freecol.common.i18n.NameCache.putSettlementName(Player, String)",6
net.sf.freecol.common.i18n.NameCache.requireCitiesOfCibola(Random),7
net.sf.freecol.common.i18n.NameCache.requireMercenaryLeaders(),3
"net.sf.freecol.common.i18n.NameCache.requireRegionNames(Player, RegionType)",6
net.sf.freecol.common.i18n.NameCache.requireRiverNames(),3
net.sf.freecol.common.i18n.NameCache.requireRumourNothingKeys(),3
net.sf.freecol.common.i18n.NameCache.requireSeasonNames(),5
"net.sf.freecol.common.i18n.NameCache.requireSettlementNames(Player, Random)",6
"net.sf.freecol.common.i18n.NameCache.requireShipNames(Player, Random)",6
"net.sf.freecol.common.i18n.Number.getKey(String, String)",3
net.sf.freecol.common.i18n.Number.getKey(double),7
net.sf.freecol.common.i18n.NumberRules.NumberRules(InputStream),8
net.sf.freecol.common.i18n.NumberRules.getNumberForLanguage(String),7
net.sf.freecol.common.i18n.NumberRules.isInitialized(),0
net.sf.freecol.common.i18n.NumberRules.load(InputStream),0
net.sf.freecol.common.i18n.NumberRules.readChild(FreeColXMLReader),0
net.sf.freecol.common.i18n.NumberRules.readFromXML(FreeColXMLReader),0
net.sf.freecol.common.i18n.OtherNumberRule.getCategory(double),0
net.sf.freecol.common.i18n.PluralNumberRule.getCategory(double),0
net.sf.freecol.common.i18n.Relation.Relation(List<String>),0
"net.sf.freecol.common.i18n.Relation.Relation(int, int)",0
net.sf.freecol.common.i18n.Relation.equals(Object),3
net.sf.freecol.common.i18n.Relation.hashCode(),3
net.sf.freecol.common.i18n.Relation.matches(double),6
net.sf.freecol.common.i18n.Relation.parse(List<String>),5
net.sf.freecol.common.i18n.Relation.setInteger(boolean),6
net.sf.freecol.common.i18n.Relation.setMod(int),5
net.sf.freecol.common.i18n.Relation.setNegated(boolean),5
net.sf.freecol.common.i18n.Relation.toString(),3
net.sf.freecol.common.i18n.Rule.Rule(String),0
net.sf.freecol.common.i18n.Rule.add(List<Relation>),5
net.sf.freecol.common.i18n.Rule.matches(double),9
net.sf.freecol.common.i18n.Rule.parse(String),5
net.sf.freecol.common.i18n.Rule.parseCondition(List<String>),0
net.sf.freecol.common.i18n.Rule.toString(),3
net.sf.freecol.common.i18n.ZeroOneNumberRule.getCategory(double),0
net.sf.freecol.common.io.AllTests.suite(),0
net.sf.freecol.common.io.FreeColDataFile.FreeColDataFile(File),6
"net.sf.freecol.common.io.FreeColDataFile.extendWithAdditionalSizesAndVariations(ResourceFactory, ImageResource, String)",0
"net.sf.freecol.common.io.FreeColDataFile.findFilesWithVariationOrAlternativeSize(Path, boolean)",0
"net.sf.freecol.common.io.FreeColDataFile.findFilesWithVariationOrAlternativeSizeAsUri(Path, boolean)",0
net.sf.freecol.common.io.FreeColDataFile.findJarDirectory(File),7
net.sf.freecol.common.io.FreeColDataFile.findVariationsWithAlternateSizes(String),0
net.sf.freecol.common.io.FreeColDataFile.getFileFilter(String),6
net.sf.freecol.common.io.FreeColDataFile.getInputStream(String),11
net.sf.freecol.common.io.FreeColDataFile.getPath(),7
net.sf.freecol.common.io.FreeColDataFile.getResourceMapping(),6
net.sf.freecol.common.io.FreeColDataFile.getURI(String),6
"net.sf.freecol.common.io.FreeColDataFile.handleNormalResource(ResourceFactory, ResourceMapping, String, String)",0
"net.sf.freecol.common.io.FreeColDataFile.handleResources(Properties, ResourceMapping)",12
"net.sf.freecol.common.io.FreeColDataFile.handleVirtualResources(List<String>, LogBuilder, Properties, ResourceMapping)",0
net.sf.freecol.common.io.FreeColDataFile.readResourcesProperties(LogBuilder),8
"net.sf.freecol.common.io.FreeColDataFile.stripEnding(String, String)",0
net.sf.freecol.common.io.FreeColDirectories.bad(),0
net.sf.freecol.common.io.FreeColDirectories.badCache(File),0
net.sf.freecol.common.io.FreeColDirectories.badConfig(File),0
net.sf.freecol.common.io.FreeColDirectories.badData(File),0
net.sf.freecol.common.io.FreeColDirectories.badDir(File),0
net.sf.freecol.common.io.FreeColDirectories.badHome(),0
net.sf.freecol.common.io.FreeColDirectories.checkDir(File),6
"net.sf.freecol.common.io.FreeColDirectories.collectFiles(File, Predicate<File>)",7
net.sf.freecol.common.io.FreeColDirectories.deriveAutosaveDirectory(),5
"net.sf.freecol.common.io.FreeColDirectories.deriveDirectory(File, String)",7
net.sf.freecol.common.io.FreeColDirectories.getAutosaveDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getAutosaveFile(String),6
"net.sf.freecol.common.io.FreeColDirectories.getAutosaveFiles(String, Predicate<File>)",7
net.sf.freecol.common.io.FreeColDirectories.getBaseClientOptionsFile(),5
net.sf.freecol.common.io.FreeColDirectories.getBaseDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getClientOptionsFile(),5
net.sf.freecol.common.io.FreeColDirectories.getCompatibilityFile(String),8
net.sf.freecol.common.io.FreeColDirectories.getDataDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getDebugRunSaveFile(),5
net.sf.freecol.common.io.FreeColDirectories.getHighScoreFile(),5
net.sf.freecol.common.io.FreeColDirectories.getI18nDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getI18nMessageFileList(Locale),6
net.sf.freecol.common.io.FreeColDirectories.getI18nPluralsFile(),5
net.sf.freecol.common.io.FreeColDirectories.getLanguageId(File),7
net.sf.freecol.common.io.FreeColDirectories.getLanguageIdList(),6
net.sf.freecol.common.io.FreeColDirectories.getLastSaveGameFile(),7
"net.sf.freecol.common.io.FreeColDirectories.getLocaleFileNames(String, String, Locale)",9
net.sf.freecol.common.io.FreeColDirectories.getLogCommsWriter(),6
net.sf.freecol.common.io.FreeColDirectories.getLogFileContents(),5
net.sf.freecol.common.io.FreeColDirectories.getLogFilePath(),5
net.sf.freecol.common.io.FreeColDirectories.getLogWriter(),6
net.sf.freecol.common.io.FreeColDirectories.getMacOSXDirs(File[]),9
net.sf.freecol.common.io.FreeColDirectories.getMapFileList(),5
net.sf.freecol.common.io.FreeColDirectories.getMapsDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getMessageFileNameList(Locale),6
net.sf.freecol.common.io.FreeColDirectories.getModFileList(),5
net.sf.freecol.common.io.FreeColDirectories.getModMessageFileNames(Locale),6
net.sf.freecol.common.io.FreeColDirectories.getOptionsDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getOptionsFile(String),6
net.sf.freecol.common.io.FreeColDirectories.getResourceFileNames(),5
net.sf.freecol.common.io.FreeColDirectories.getRulesClassicDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getRulesDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getRulesFileList(),5
net.sf.freecol.common.io.FreeColDirectories.getSaveDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getSavegameFile(),5
net.sf.freecol.common.io.FreeColDirectories.getSavegameFileList(File),6
net.sf.freecol.common.io.FreeColDirectories.getSavegameFiles(File),6
net.sf.freecol.common.io.FreeColDirectories.getStandardModsDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getStartMapFile(),5
net.sf.freecol.common.io.FreeColDirectories.getUserCacheDirectory(),6
net.sf.freecol.common.io.FreeColDirectories.getUserConfigDirectory(),6
net.sf.freecol.common.io.FreeColDirectories.getUserDataDirectory(),6
net.sf.freecol.common.io.FreeColDirectories.getUserDefaultDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getUserMapsDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getUserModsDirectory(),5
net.sf.freecol.common.io.FreeColDirectories.getWindowsDirs(File[]),14
net.sf.freecol.common.io.FreeColDirectories.getXDGDirs(File[]),12
net.sf.freecol.common.io.FreeColDirectories.insistDirectory(File),6
net.sf.freecol.common.io.FreeColDirectories.isGoodDirectory(File),6
net.sf.freecol.common.io.FreeColDirectories.removeAutosaves(String),6
"net.sf.freecol.common.io.FreeColDirectories.removeOutdatedAutosaves(String, List<String>, long)",12
net.sf.freecol.common.io.FreeColDirectories.requireDirectory(File),7
net.sf.freecol.common.io.FreeColDirectories.sanitize(String),6
net.sf.freecol.common.io.FreeColDirectories.setAutosaveDirectory(File),5
net.sf.freecol.common.io.FreeColDirectories.setClientOptionsFile(String),6
net.sf.freecol.common.io.FreeColDirectories.setDataDirectory(String),9
net.sf.freecol.common.io.FreeColDirectories.setLogFilePath(String),5
net.sf.freecol.common.io.FreeColDirectories.setSavegameFile(String),6
net.sf.freecol.common.io.FreeColDirectories.setUserCacheDirectory(String),7
net.sf.freecol.common.io.FreeColDirectories.setUserConfigDirectory(String),7
net.sf.freecol.common.io.FreeColDirectories.setUserDataDirectory(String),8
net.sf.freecol.common.io.FreeColDirectories.setUserDirectories(),21
net.sf.freecol.common.io.FreeColModFile.FreeColModFile(File),6
net.sf.freecol.common.io.FreeColModFile.getFreeColModFile(String),6
net.sf.freecol.common.io.FreeColModFile.getId(),5
net.sf.freecol.common.io.FreeColModFile.getModDescriptorInputStream(),7
net.sf.freecol.common.io.FreeColModFile.getModsList(),5
net.sf.freecol.common.io.FreeColModFile.getParent(),5
net.sf.freecol.common.io.FreeColModFile.getSpecification(),7
net.sf.freecol.common.io.FreeColModFile.getSpecificationInputStream(),7
net.sf.freecol.common.io.FreeColModFile.hasSpecification(),6
net.sf.freecol.common.io.FreeColModFile.loadMods(),6
net.sf.freecol.common.io.FreeColModFile.readModDescriptor(),5
net.sf.freecol.common.io.FreeColRules.getFreeColRulesFile(String),6
net.sf.freecol.common.io.FreeColRules.getRulesList(),5
net.sf.freecol.common.io.FreeColRules.loadRules(),3
net.sf.freecol.common.io.FreeColSavegameFile.FreeColSavegameFile(File),6
net.sf.freecol.common.io.FreeColSavegameFile.getClientOptionsFreeColXMLReader(),7
net.sf.freecol.common.io.FreeColSavegameFile.getProperties(),6
net.sf.freecol.common.io.FreeColSavegameFile.getSavedGameFreeColXMLReader(),7
net.sf.freecol.common.io.FreeColSavegameFile.getSavegameInputStream(),9
net.sf.freecol.common.io.FreeColSavegameFile.getSavegameVersion(),7
net.sf.freecol.common.io.FreeColSavegameFile.getThumbnailInputStream(),7
net.sf.freecol.common.io.FreeColSavegameFile.peekAttributes(List<String>),8
net.sf.freecol.common.io.FreeColTcFile.FreeColTcFile(File),6
net.sf.freecol.common.io.FreeColTcFile.getFreeColTcFile(String),6
net.sf.freecol.common.io.FreeColTcFile.getResourceMapping(),3
net.sf.freecol.common.io.FreeColXMLReader.FreeColXMLReader(BufferedInputStream),7
net.sf.freecol.common.io.FreeColXMLReader.FreeColXMLReader(File),7
net.sf.freecol.common.io.FreeColXMLReader.FreeColXMLReader(InputStream),7
net.sf.freecol.common.io.FreeColXMLReader.FreeColXMLReader(Reader),7
net.sf.freecol.common.io.FreeColXMLReader.atTag(String),6
net.sf.freecol.common.io.FreeColXMLReader.close(),6
net.sf.freecol.common.io.FreeColXMLReader.closeTag(String),6
"net.sf.freecol.common.io.FreeColXMLReader.closeTag(String, String...)",7
"net.sf.freecol.common.io.FreeColXMLReader.copy(Game, Class<T>)",11
net.sf.freecol.common.io.FreeColXMLReader.currentTag(),6
net.sf.freecol.common.io.FreeColXMLReader.expectTag(String),6
"net.sf.freecol.common.io.FreeColXMLReader.findAIObject(AIMain, String, Class<T>, T, boolean)",12
"net.sf.freecol.common.io.FreeColXMLReader.findFreeColGameObject(Game, String, Class<T>, T, boolean)",17
net.sf.freecol.common.io.FreeColXMLReader.getAllAttributes(),5
net.sf.freecol.common.io.FreeColXMLReader.getArrayAttributeMap(),5
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(AIMain, String, Class<T>, T)",10
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(Game, String, Class<T>, T)",12
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, Class<T>, T)",9
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, String)",7
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, boolean)",7
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, float)",7
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, int)",7
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, long)",7
net.sf.freecol.common.io.FreeColXMLReader.getAttributeMap(String...),6
"net.sf.freecol.common.io.FreeColXMLReader.getLocationAttribute(Game, String, boolean)",11
net.sf.freecol.common.io.FreeColXMLReader.getReadScope(),5
"net.sf.freecol.common.io.FreeColXMLReader.getType(Specification, String, Class<T>, T)",14
net.sf.freecol.common.io.FreeColXMLReader.hasAttribute(String),6
"net.sf.freecol.common.io.FreeColXMLReader.internedRead(Game, Class<T>)",10
"net.sf.freecol.common.io.FreeColXMLReader.lookup(Game, String)",8
"net.sf.freecol.common.io.FreeColXMLReader.lookup(Game, String, Class<T>)",12
"net.sf.freecol.common.io.FreeColXMLReader.makeAIObject(AIMain, String, Class<T>, T, boolean)",16
"net.sf.freecol.common.io.FreeColXMLReader.makeFreeColObject(Game, String, Class<T>, boolean)",17
net.sf.freecol.common.io.FreeColXMLReader.moreTags(),7
net.sf.freecol.common.io.FreeColXMLReader.newXMLInputFactory(),7
net.sf.freecol.common.io.FreeColXMLReader.nextTag(),3
"net.sf.freecol.common.io.FreeColXMLReader.readAttributeValues(Map<String, String>, String)",11
net.sf.freecol.common.io.FreeColXMLReader.readFreeColObject(Game),8
"net.sf.freecol.common.io.FreeColXMLReader.readFreeColObject(Game, Class<T>)",15
net.sf.freecol.common.io.FreeColXMLReader.readId(),10
"net.sf.freecol.common.io.FreeColXMLReader.readList(Specification, String, Class<T>)",13
net.sf.freecol.common.io.FreeColXMLReader.replaceScope(ReadScope),6
net.sf.freecol.common.io.FreeColXMLReader.setReadScope(ReadScope),6
net.sf.freecol.common.io.FreeColXMLReader.setTracing(boolean),6
net.sf.freecol.common.io.FreeColXMLReader.shouldClearContainers(),8
net.sf.freecol.common.io.FreeColXMLReader.shouldIntern(),6
net.sf.freecol.common.io.FreeColXMLReader.swallowTag(String),6
net.sf.freecol.common.io.FreeColXMLReader.unexpectedTag(String),6
"net.sf.freecol.common.io.FreeColXMLReader.uninternedRead(Game, Class<T>)",10
"net.sf.freecol.common.io.FreeColXMLWriter.FreeColXMLWriter(OutputStream, WriteScope, boolean)",11
net.sf.freecol.common.io.FreeColXMLWriter.FreeColXMLWriter(Writer),8
"net.sf.freecol.common.io.FreeColXMLWriter.FreeColXMLWriter(Writer, WriteScope)",9
"net.sf.freecol.common.io.FreeColXMLWriter.FreeColXMLWriter(Writer, WriteScope, boolean)",10
"net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.WriteScope(WriteScopeType, Player)",0
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.getClient(),0
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.isValid(),0
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.toClient(Player),0
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.toSave(),0
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.toServer(),0
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.toString(),0
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.validFor(Player),0
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.validForSave(),0
net.sf.freecol.common.io.FreeColXMLWriter.close(),3
net.sf.freecol.common.io.FreeColXMLWriter.flush(),3
net.sf.freecol.common.io.FreeColXMLWriter.flushBuffer(),6
net.sf.freecol.common.io.FreeColXMLWriter.getClientPlayer(),0
net.sf.freecol.common.io.FreeColXMLWriter.getFactory(),5
net.sf.freecol.common.io.FreeColXMLWriter.getNamespaceContext(),0
net.sf.freecol.common.io.FreeColXMLWriter.getPrefix(String),0
net.sf.freecol.common.io.FreeColXMLWriter.getProperty(String),0
net.sf.freecol.common.io.FreeColXMLWriter.getWriteScope(),5
net.sf.freecol.common.io.FreeColXMLWriter.replaceScope(WriteScope),6
net.sf.freecol.common.io.FreeColXMLWriter.setDefaultNamespace(String),0
net.sf.freecol.common.io.FreeColXMLWriter.setNamespaceContext(NamespaceContext),0
"net.sf.freecol.common.io.FreeColXMLWriter.setPrefix(String, String)",0
net.sf.freecol.common.io.FreeColXMLWriter.setWriteScope(WriteScope),5
net.sf.freecol.common.io.FreeColXMLWriter.validFor(Player),0
net.sf.freecol.common.io.FreeColXMLWriter.validForSave(),0
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, Enum<?>)",7
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, FreeColObject)",7
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, Object)",7
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, String)",0
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, String, String)",0
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, String, String, String)",0
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, boolean)",7
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, float)",7
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, int)",7
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, long)",7
net.sf.freecol.common.io.FreeColXMLWriter.writeCData(String),0
net.sf.freecol.common.io.FreeColXMLWriter.writeCharacters(String),0
"net.sf.freecol.common.io.FreeColXMLWriter.writeCharacters(char[], int, int)",0
net.sf.freecol.common.io.FreeColXMLWriter.writeComment(String),0
net.sf.freecol.common.io.FreeColXMLWriter.writeDTD(String),0
net.sf.freecol.common.io.FreeColXMLWriter.writeDefaultNamespace(String),0
net.sf.freecol.common.io.FreeColXMLWriter.writeEmptyElement(String),0
"net.sf.freecol.common.io.FreeColXMLWriter.writeEmptyElement(String, String)",0
"net.sf.freecol.common.io.FreeColXMLWriter.writeEmptyElement(String, String, String)",0
net.sf.freecol.common.io.FreeColXMLWriter.writeEndDocument(),0
net.sf.freecol.common.io.FreeColXMLWriter.writeEndElement(),0
net.sf.freecol.common.io.FreeColXMLWriter.writeEntityRef(String),0
"net.sf.freecol.common.io.FreeColXMLWriter.writeLocationAttribute(String, Location)",7
"net.sf.freecol.common.io.FreeColXMLWriter.writeNamespace(String, String)",0
net.sf.freecol.common.io.FreeColXMLWriter.writeProcessingInstruction(String),0
"net.sf.freecol.common.io.FreeColXMLWriter.writeProcessingInstruction(String, String)",0
net.sf.freecol.common.io.FreeColXMLWriter.writeStartDocument(),0
net.sf.freecol.common.io.FreeColXMLWriter.writeStartDocument(String),0
"net.sf.freecol.common.io.FreeColXMLWriter.writeStartDocument(String, String)",0
net.sf.freecol.common.io.FreeColXMLWriter.writeStartElement(String),0
"net.sf.freecol.common.io.FreeColXMLWriter.writeStartElement(String, String)",0
"net.sf.freecol.common.io.FreeColXMLWriter.writeStartElement(String, String, String)",0
"net.sf.freecol.common.io.FreeColXMLWriter.writeToListElement(String, Collection<T>)",9
net.sf.freecol.common.io.ModTest.testAllMods(),0
net.sf.freecol.common.io.ModTest.testGetRuleSets(),0
"net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.ImageAnimationEventImpl(BufferedImage, int)",6
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.createScaledVersion(float),6
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.getDurationInMs(),3
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.getHeight(),0
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.getImage(),3
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.getWidth(),0
net.sf.freecol.common.io.sza.SimpleZippedAnimation.SimpleZippedAnimation(InputStream),6
net.sf.freecol.common.io.sza.SimpleZippedAnimation.SimpleZippedAnimation(List<AnimationEvent>),5
"net.sf.freecol.common.io.sza.SimpleZippedAnimation.SimpleZippedAnimation(List<AnimationEvent>, int, int)",7
net.sf.freecol.common.io.sza.SimpleZippedAnimation.SimpleZippedAnimation(URL),7
net.sf.freecol.common.io.sza.SimpleZippedAnimation.SimpleZippedAnimation(ZipInputStream),6
net.sf.freecol.common.io.sza.SimpleZippedAnimation.createScaledVersion(float),7
net.sf.freecol.common.io.sza.SimpleZippedAnimation.getHeight(),5
net.sf.freecol.common.io.sza.SimpleZippedAnimation.getWidth(),5
net.sf.freecol.common.io.sza.SimpleZippedAnimation.iterator(),6
net.sf.freecol.common.io.sza.SimpleZippedAnimation.loadEvents(ZipInputStream),7
"net.sf.freecol.common.logging.DefaultHandler.DefaultHandler(boolean, Writer)",6
net.sf.freecol.common.logging.DefaultHandler.close(),3
net.sf.freecol.common.logging.DefaultHandler.flush(),3
net.sf.freecol.common.logging.DefaultHandler.publish(LogRecord),6
net.sf.freecol.common.logging.TextFormatter.TextFormatter(),3
net.sf.freecol.common.logging.TextFormatter.format(LogRecord),6
net.sf.freecol.common.metaserver.MetaServerUtils.MetaInputHandler.MetaInputHandler(Consumer<List<ServerInfo>>),5
"net.sf.freecol.common.metaserver.MetaServerUtils.MetaInputHandler.handle(Connection, Message)",3
net.sf.freecol.common.metaserver.MetaServerUtils.MetaInputHandler.read(Connection),3
net.sf.freecol.common.metaserver.MetaServerUtils.findTimer(ServerInfo),6
net.sf.freecol.common.metaserver.MetaServerUtils.getMetaServerConnection(List<ServerInfo>),8
net.sf.freecol.common.metaserver.MetaServerUtils.getServerList(),5
"net.sf.freecol.common.metaserver.MetaServerUtils.metaMessage(MetaMessageType, ServerInfo)",7
net.sf.freecol.common.metaserver.MetaServerUtils.registerServer(ServerInfo),9
net.sf.freecol.common.metaserver.MetaServerUtils.removeServer(ServerInfo),6
net.sf.freecol.common.metaserver.MetaServerUtils.startTimer(ServerInfo),6
net.sf.freecol.common.metaserver.MetaServerUtils.stopTimer(ServerInfo),6
net.sf.freecol.common.metaserver.MetaServerUtils.updateServer(ServerInfo),6
net.sf.freecol.common.metaserver.MetaServerUtils.updateTimer(ServerInfo),6
"net.sf.freecol.common.metaserver.ServerInfo.ServerInfo(String, String, int, int, int, boolean, String, ...)",12
net.sf.freecol.common.metaserver.ServerInfo.equals(Object),3
net.sf.freecol.common.metaserver.ServerInfo.getAddress(),5
net.sf.freecol.common.metaserver.ServerInfo.getCurrentlyPlaying(),6
net.sf.freecol.common.metaserver.ServerInfo.getGameState(),5
net.sf.freecol.common.metaserver.ServerInfo.getIsGameStarted(),5
net.sf.freecol.common.metaserver.ServerInfo.getLastUpdated(),5
net.sf.freecol.common.metaserver.ServerInfo.getName(),6
net.sf.freecol.common.metaserver.ServerInfo.getPort(),5
net.sf.freecol.common.metaserver.ServerInfo.getSlotsAvailable(),5
net.sf.freecol.common.metaserver.ServerInfo.getVersion(),6
net.sf.freecol.common.metaserver.ServerInfo.hashCode(),3
net.sf.freecol.common.metaserver.ServerInfo.toString(),3
net.sf.freecol.common.metaserver.ServerInfo.update(ServerInfo),5
"net.sf.freecol.common.metaserver.ServerInfo.update(String, String, int, int, int, boolean, String, ...)",12
net.sf.freecol.common.model.Ability.Ability(Ability),5
"net.sf.freecol.common.model.Ability.Ability(FreeColXMLReader, Specification)",7
net.sf.freecol.common.model.Ability.Ability(Specification),5
net.sf.freecol.common.model.Ability.Ability(String),5
"net.sf.freecol.common.model.Ability.Ability(String, FreeColSpecObjectType, boolean)",7
"net.sf.freecol.common.model.Ability.Ability(String, boolean)",6
net.sf.freecol.common.model.Ability.copyIn(T),3
net.sf.freecol.common.model.Ability.equals(Object),3
net.sf.freecol.common.model.Ability.getValue(),5
net.sf.freecol.common.model.Ability.getXMLTagName(),3
net.sf.freecol.common.model.Ability.hashCode(),3
net.sf.freecol.common.model.Ability.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Ability.setValue(boolean),5
net.sf.freecol.common.model.Ability.toString(),3
net.sf.freecol.common.model.Ability.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.AbstractGoods.AbstractGoods(),3
net.sf.freecol.common.model.AbstractGoods.AbstractGoods(AbstractGoods),5
"net.sf.freecol.common.model.AbstractGoods.AbstractGoods(GoodsType, int)",6
net.sf.freecol.common.model.AbstractGoods.copyIn(T),3
net.sf.freecol.common.model.AbstractGoods.equals(Object),3
net.sf.freecol.common.model.AbstractGoods.evaluateFor(Player),6
"net.sf.freecol.common.model.AbstractGoods.getAbstractLabel(String, int)",9
net.sf.freecol.common.model.AbstractGoods.getAmount(),5
"net.sf.freecol.common.model.AbstractGoods.getCount(GoodsType, Collection<? extends AbstractGoods>)",8
net.sf.freecol.common.model.AbstractGoods.getLabel(),5
net.sf.freecol.common.model.AbstractGoods.getLabel(boolean),6
net.sf.freecol.common.model.AbstractGoods.getNameKey(),3
net.sf.freecol.common.model.AbstractGoods.getType(),5
net.sf.freecol.common.model.AbstractGoods.getXMLTagName(),3
net.sf.freecol.common.model.AbstractGoods.hashCode(),3
net.sf.freecol.common.model.AbstractGoods.isFoodType(),5
net.sf.freecol.common.model.AbstractGoods.isPositive(),5
net.sf.freecol.common.model.AbstractGoods.isStorable(),5
net.sf.freecol.common.model.AbstractGoods.matches(GoodsType),6
net.sf.freecol.common.model.AbstractGoods.setAmount(int),5
net.sf.freecol.common.model.AbstractGoods.setType(GoodsType),5
"net.sf.freecol.common.model.AbstractGoods.toFullString(GoodsType, int)",7
net.sf.freecol.common.model.AbstractGoods.toString(),3
net.sf.freecol.common.model.AbstractUnit.AbstractUnit(),3
net.sf.freecol.common.model.AbstractUnit.AbstractUnit(FreeColXMLReader),6
"net.sf.freecol.common.model.AbstractUnit.AbstractUnit(String, String, int)",7
"net.sf.freecol.common.model.AbstractUnit.AbstractUnit(UnitType, String, int)",7
net.sf.freecol.common.model.AbstractUnit.addToNumber(int),5
"net.sf.freecol.common.model.AbstractUnit.calculateStrength(Specification, List<AbstractUnit>)",7
net.sf.freecol.common.model.AbstractUnit.copyIn(T),3
net.sf.freecol.common.model.AbstractUnit.deepCopy(List<AbstractUnit>),6
net.sf.freecol.common.model.AbstractUnit.getDescription(),5
net.sf.freecol.common.model.AbstractUnit.getLabel(),5
"net.sf.freecol.common.model.AbstractUnit.getLabelInternal(String, String, int)",8
"net.sf.freecol.common.model.AbstractUnit.getListLabel(String, List<AbstractUnit>)",7
net.sf.freecol.common.model.AbstractUnit.getNumber(),5
net.sf.freecol.common.model.AbstractUnit.getOffence(Specification),7
net.sf.freecol.common.model.AbstractUnit.getRole(Specification),6
net.sf.freecol.common.model.AbstractUnit.getRoleId(),5
net.sf.freecol.common.model.AbstractUnit.getSingleLabel(),5
net.sf.freecol.common.model.AbstractUnit.getType(Specification),6
net.sf.freecol.common.model.AbstractUnit.getXMLTagName(),3
net.sf.freecol.common.model.AbstractUnit.matchAll(AbstractUnit),6
"net.sf.freecol.common.model.AbstractUnit.matchUnits(List<AbstractUnit>, List<AbstractUnit>)",7
net.sf.freecol.common.model.AbstractUnit.matcher(AbstractUnit),6
net.sf.freecol.common.model.AbstractUnit.matcher(Unit),6
"net.sf.freecol.common.model.AbstractUnit.matcher(UnitType, String)",7
net.sf.freecol.common.model.AbstractUnit.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.AbstractUnit.setNumber(int),5
net.sf.freecol.common.model.AbstractUnit.setRoleId(String),5
net.sf.freecol.common.model.AbstractUnit.toString(),3
net.sf.freecol.common.model.AbstractUnit.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.AllTests.suite(),0
net.sf.freecol.common.model.BaseCostDeciderTest.setUp(),0
net.sf.freecol.common.model.BaseCostDeciderTest.tearDown(),0
net.sf.freecol.common.model.BaseCostDeciderTest.testGetCostLandLand(),3
net.sf.freecol.common.model.BaseCostDeciderTest.testGetRemainingMovesAndNewTurn(),5
net.sf.freecol.common.model.BaseCostDeciderTest.testInvalidMoveOfLandUnitToAnOceanTile(),4
net.sf.freecol.common.model.BaseCostDeciderTest.testInvalidMoveOfNavalUnitToALandTile(),4
net.sf.freecol.common.model.BaseCostDeciderTest.testInvalidMoveThroughTileWithSettlement(),4
net.sf.freecol.common.model.BaseCostDeciderTest.testNavalUnitMoveToTileWithSettlement(),3
"net.sf.freecol.common.model.BaseProduction.getBaseProduction(ProductionType, GoodsType, UnitType)",11
"net.sf.freecol.common.model.BuildQueue.BuildQueue(Colony, CompletionAction, int)",7
net.sf.freecol.common.model.BuildQueue.add(T),0
net.sf.freecol.common.model.BuildQueue.clear(),0
net.sf.freecol.common.model.BuildQueue.getCompletionAction(),0
net.sf.freecol.common.model.BuildQueue.getConsumedGoods(),3
net.sf.freecol.common.model.BuildQueue.getConsumptionModifiers(String),3
net.sf.freecol.common.model.BuildQueue.getCurrentlyBuilding(),5
net.sf.freecol.common.model.BuildQueue.getPriority(),3
net.sf.freecol.common.model.BuildQueue.getProductionInfo(List<AbstractGoods>),6
net.sf.freecol.common.model.BuildQueue.getValues(),0
net.sf.freecol.common.model.BuildQueue.isEmpty(),0
net.sf.freecol.common.model.BuildQueue.remove(int),0
net.sf.freecol.common.model.BuildQueue.setCompletionAction(CompletionAction),0
net.sf.freecol.common.model.BuildQueue.setCurrentlyBuilding(T),6
net.sf.freecol.common.model.BuildQueue.setValues(List<T>),0
net.sf.freecol.common.model.BuildQueue.size(),0
net.sf.freecol.common.model.BuildQueue.toString(),3
"net.sf.freecol.common.model.BuildableType.BuildableType(String, Specification)",6
net.sf.freecol.common.model.BuildableType.addLimit(Limit),5
"net.sf.freecol.common.model.BuildableType.addRequiredAbility(String, boolean)",8
net.sf.freecol.common.model.BuildableType.addRequiredGoods(AbstractGoods),5
net.sf.freecol.common.model.BuildableType.copyIn(T),3
net.sf.freecol.common.model.BuildableType.getCurrentlyBuildingLabel(),5
net.sf.freecol.common.model.BuildableType.getLimits(),5
"net.sf.freecol.common.model.BuildableType.getMaximumIndex(Colony, JList<BuildableType>, int)",0
"net.sf.freecol.common.model.BuildableType.getMinimumIndex(Colony, JList<BuildableType>, int)",0
net.sf.freecol.common.model.BuildableType.getRequiredAbilities(),5
net.sf.freecol.common.model.BuildableType.getRequiredAmountOf(GoodsType),7
net.sf.freecol.common.model.BuildableType.getRequiredGoods(),6
net.sf.freecol.common.model.BuildableType.getRequiredGoodsList(),8
net.sf.freecol.common.model.BuildableType.getRequiredPopulation(),5
net.sf.freecol.common.model.BuildableType.isAvailableTo(FreeColObject...),6
net.sf.freecol.common.model.BuildableType.needsGoodsToBuild(),5
net.sf.freecol.common.model.BuildableType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.BuildableType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.BuildableType.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.BuildableType.removeRequiredAbility(String),7
net.sf.freecol.common.model.BuildableType.requiresAbility(String),0
net.sf.freecol.common.model.BuildableType.setLimits(List<Limit>),5
"net.sf.freecol.common.model.BuildableType.setRequiredAbilities(Map<String, Boolean>)",5
net.sf.freecol.common.model.BuildableType.setRequiredGoods(List<AbstractGoods>),5
net.sf.freecol.common.model.BuildableType.setRequiredPopulation(int),5
net.sf.freecol.common.model.BuildableType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.BuildableType.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.Building.Building(Game, Colony, BuildingType)",7
"net.sf.freecol.common.model.Building.Building(Game, String)",8
net.sf.freecol.common.model.Building.canAddType(UnitType),6
net.sf.freecol.common.model.Building.canAutoProduce(),3
net.sf.freecol.common.model.Building.canBeDamaged(),5
net.sf.freecol.common.model.Building.canBuildNext(),5
"net.sf.freecol.common.model.Building.canProduce(GoodsType, UnitType)",3
net.sf.freecol.common.model.Building.copyIn(T),3
net.sf.freecol.common.model.Building.downgrade(),8
net.sf.freecol.common.model.Building.evaluateFor(Player),6
"net.sf.freecol.common.model.Building.getAbilities(String, FreeColSpecObjectType, Turn)",3
"net.sf.freecol.common.model.Building.getAdjustedProductionInfo(List<AbstractGoods>, List<AbstractGoods>)",10
net.sf.freecol.common.model.Building.getAvailableProductionTypes(boolean),3
"net.sf.freecol.common.model.Building.getBaseProduction(ProductionType, GoodsType, UnitType)",3
net.sf.freecol.common.model.Building.getCompetenceFactor(),3
net.sf.freecol.common.model.Building.getConsumedGoods(),3
net.sf.freecol.common.model.Building.getConsumptionModifiers(String),3
net.sf.freecol.common.model.Building.getDisplayObject(),3
net.sf.freecol.common.model.Building.getLabel(),3
net.sf.freecol.common.model.Building.getLevel(),3
net.sf.freecol.common.model.Building.getLocationLabel(),3
"net.sf.freecol.common.model.Building.getModifiers(String, FreeColSpecObjectType, Turn)",3
net.sf.freecol.common.model.Building.getNameKey(),3
net.sf.freecol.common.model.Building.getNoAddReason(Locatable),3
net.sf.freecol.common.model.Building.getNoWorkReason(),3
net.sf.freecol.common.model.Building.getPriority(),3
"net.sf.freecol.common.model.Building.getProductionModifiers(GoodsType, UnitType)",3
net.sf.freecol.common.model.Building.getRebelFactor(),3
net.sf.freecol.common.model.Building.getType(),5
net.sf.freecol.common.model.Building.getUnitCapacity(),3
net.sf.freecol.common.model.Building.getWorkTile(),3
net.sf.freecol.common.model.Building.getXMLTagName(),3
"net.sf.freecol.common.model.Building.goodSuggestionCheck(UnitType, Unit, GoodsType)",0
net.sf.freecol.common.model.Building.isAvailable(),3
net.sf.freecol.common.model.Building.isCurrent(),3
net.sf.freecol.common.model.Building.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Building.setType(BuildingType),11
net.sf.freecol.common.model.Building.toShortString(),3
net.sf.freecol.common.model.Building.toString(),3
net.sf.freecol.common.model.Building.up(),3
net.sf.freecol.common.model.Building.upgrade(),8
net.sf.freecol.common.model.Building.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.BuildingTest.clearBuilding(Building),0
"net.sf.freecol.common.model.BuildingTest.productionTest(BuildingType[], int[][][])",0
net.sf.freecol.common.model.BuildingTest.testCanAddToBuilding(),0
net.sf.freecol.common.model.BuildingTest.testCanAddToSchool(),7
net.sf.freecol.common.model.BuildingTest.testCanBuildNext(),0
net.sf.freecol.common.model.BuildingTest.testChurch(),0
net.sf.freecol.common.model.BuildingTest.testCottonClothProduction(),0
net.sf.freecol.common.model.BuildingTest.testCrossProduction(),0
net.sf.freecol.common.model.BuildingTest.testFactoryProduction(),0
net.sf.freecol.common.model.BuildingTest.testFortRequiresMinimumPopulation(),0
net.sf.freecol.common.model.BuildingTest.testFortressRequiresMinimumPopulation(),0
net.sf.freecol.common.model.BuildingTest.testInitialColony(),0
net.sf.freecol.common.model.BuildingTest.testLumberProduction(),0
net.sf.freecol.common.model.BuildingTest.testNewspaperBonus(),0
net.sf.freecol.common.model.BuildingTest.testPasture(),0
net.sf.freecol.common.model.BuildingTest.testPrintingPressBonus(),0
net.sf.freecol.common.model.BuildingTest.testSerialize(),0
net.sf.freecol.common.model.BuildingTest.testStockade(),0
net.sf.freecol.common.model.BuildingTest.testStockadeRequiresMinimumPopulation(),0
net.sf.freecol.common.model.BuildingTest.testToolsMusketProduction(),0
net.sf.freecol.common.model.BuildingTest.testTownhallProduction(),0
net.sf.freecol.common.model.BuildingTest.testUnitProduction(),0
"net.sf.freecol.common.model.BuildingType.BuildingType(String, Specification)",6
net.sf.freecol.common.model.BuildingType.addProductionType(ProductionType),5
net.sf.freecol.common.model.BuildingType.canAdd(UnitType),6
"net.sf.freecol.common.model.BuildingType.canBeBuiltInColony(Colony, List<BuildableType>)",3
"net.sf.freecol.common.model.BuildingType.canProduce(GoodsType, UnitType)",8
net.sf.freecol.common.model.BuildingType.compareTo(FreeColObject),3
net.sf.freecol.common.model.BuildingType.copyIn(T),3
net.sf.freecol.common.model.BuildingType.getAvailableProductionTypes(boolean),7
"net.sf.freecol.common.model.BuildingType.getAvailableProductionTypes(boolean, String)",12
net.sf.freecol.common.model.BuildingType.getCompetenceFactor(),6
"net.sf.freecol.common.model.BuildingType.getCompetenceModifiers(String, UnitType, Turn)",14
net.sf.freecol.common.model.BuildingType.getExpertConnectionProduction(),5
net.sf.freecol.common.model.BuildingType.getFirstLevel(),5
net.sf.freecol.common.model.BuildingType.getLevel(),5
"net.sf.freecol.common.model.BuildingType.getMaximumIndex(Colony, JList<BuildableType>, int)",0
net.sf.freecol.common.model.BuildingType.getMaximumSkill(),0
"net.sf.freecol.common.model.BuildingType.getMinimumIndex(Colony, JList<BuildableType>, int)",0
net.sf.freecol.common.model.BuildingType.getMinimumSkill(),0
net.sf.freecol.common.model.BuildingType.getNoAddReason(UnitType),7
"net.sf.freecol.common.model.BuildingType.getPotentialProduction(GoodsType, UnitType)",12
net.sf.freecol.common.model.BuildingType.getPriority(),7
net.sf.freecol.common.model.BuildingType.getProducedGoodsType(),5
net.sf.freecol.common.model.BuildingType.getProductionTypes(),5
net.sf.freecol.common.model.BuildingType.getRebelFactor(),6
net.sf.freecol.common.model.BuildingType.getType(),6
net.sf.freecol.common.model.BuildingType.getUpgradesFrom(),5
net.sf.freecol.common.model.BuildingType.getUpgradesTo(),5
net.sf.freecol.common.model.BuildingType.getUpkeep(),6
net.sf.freecol.common.model.BuildingType.getWorkPlaces(),6
net.sf.freecol.common.model.BuildingType.getXMLTagName(),3
net.sf.freecol.common.model.BuildingType.isAutomaticBuild(),5
net.sf.freecol.common.model.BuildingType.isDefenceType(),6
net.sf.freecol.common.model.BuildingType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.BuildingType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.BuildingType.setProductionTypes(List<ProductionType>),5
net.sf.freecol.common.model.BuildingType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.BuildingType.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.ClassicTileProductionTest.ProductionTestCombination.ProductionTestCombination(TileType, GoodsType, ResourceType, UnitType, List<TileImprovementTypeWithMagnitude>, int)",0
"net.sf.freecol.common.model.ClassicTileProductionTest.TileImprovementTypeWithMagnitude.TileImprovementTypeWithMagnitude(TileImprovementType, int)",0
net.sf.freecol.common.model.ClassicTileProductionTest.TileImprovementTypeWithMagnitude.getMagnitude(),0
net.sf.freecol.common.model.ClassicTileProductionTest.TileImprovementTypeWithMagnitude.getTileImprovementType(),0
"net.sf.freecol.common.model.ClassicTileProductionTest.compareResultFiles(File, File)",0
net.sf.freecol.common.model.ClassicTileProductionTest.determineTileImprovementPermutations(TileType),0
"net.sf.freecol.common.model.ClassicTileProductionTest.executeProductionTestCombination(ProductionTestCombination, Game, List<TileImprovementType>)",0
"net.sf.freecol.common.model.ClassicTileProductionTest.getProductionAmount(GoodsType, ProductionInfo)",0
net.sf.freecol.common.model.ClassicTileProductionTest.getUnitTypesThatShouldBeTestedFor(GoodsType),0
net.sf.freecol.common.model.ClassicTileProductionTest.nullAnd(List<T>),0
net.sf.freecol.common.model.ClassicTileProductionTest.produceActualResultFile(File),0
net.sf.freecol.common.model.ClassicTileProductionTest.readHeaderFromResultFile(File),0
net.sf.freecol.common.model.ClassicTileProductionTest.readResultFile(File),0
net.sf.freecol.common.model.ClassicTileProductionTest.testTileProduction(),0
"net.sf.freecol.common.model.ClassicTileProductionTest.writeHeaderTo(PrintWriter, List<TileImprovementType>)",0
"net.sf.freecol.common.model.ClassicTileProductionTest.writeOutputTo(PrintWriter, List<Object>, String)",0
"net.sf.freecol.common.model.Colony.Colony(Game, Player, String, Tile)",8
"net.sf.freecol.common.model.Colony.Colony(Game, String)",8
"net.sf.freecol.common.model.Colony.TileImprovementSuggestion.TileImprovementSuggestion(Tile, TileImprovementType, int)",0
net.sf.freecol.common.model.Colony.TileImprovementSuggestion.getAmount(),0
net.sf.freecol.common.model.Colony.TileImprovementSuggestion.isExploration(),0
"net.sf.freecol.common.model.Colony.accumulateChoice(GoodsType, Collection<GoodsType>, List<Collection<GoodsType>>)",0
"net.sf.freecol.common.model.Colony.accumulateChoices(Collection<GoodsType>, Collection<GoodsType>, List<Collection<GoodsType>>)",0
net.sf.freecol.common.model.Colony.add(Locatable),3
net.sf.freecol.common.model.Colony.addBuilding(Building),12
net.sf.freecol.common.model.Colony.addColonyTile(ColonyTile),5
"net.sf.freecol.common.model.Colony.addGoods(GoodsType, int)",3
net.sf.freecol.common.model.Colony.addLiberty(int),6
net.sf.freecol.common.model.Colony.addPortAbility(),3
net.sf.freecol.common.model.Colony.calculateProductionBonus(int),7
"net.sf.freecol.common.model.Colony.calculateRebelCount(int, int)",8
"net.sf.freecol.common.model.Colony.calculateSettlementValue(int, Unit)",9
"net.sf.freecol.common.model.Colony.calculateSoLPercentage(int, int)",8
"net.sf.freecol.common.model.Colony.calculateToryCount(int, int)",8
net.sf.freecol.common.model.Colony.canBeInput(),3
net.sf.freecol.common.model.Colony.canBePillaged(Unit),8
net.sf.freecol.common.model.Colony.canBePlundered(),7
net.sf.freecol.common.model.Colony.canBreed(GoodsType),8
net.sf.freecol.common.model.Colony.canBuild(),0
net.sf.freecol.common.model.Colony.canBuild(BuildableType),6
net.sf.freecol.common.model.Colony.canPayToFinishBuilding(),9
net.sf.freecol.common.model.Colony.canPayToFinishBuilding(BuildableType),10
net.sf.freecol.common.model.Colony.canProduce(GoodsType),6
net.sf.freecol.common.model.Colony.canProvideGoods(List<AbstractGoods>),3
net.sf.freecol.common.model.Colony.canReducePopulation(),8
net.sf.freecol.common.model.Colony.canTrain(Unit),8
net.sf.freecol.common.model.Colony.canTrain(UnitType),10
"net.sf.freecol.common.model.Colony.checkBuildQueueIntegrity(boolean, LogBuilder)",8
net.sf.freecol.common.model.Colony.checkForGovMgtChangeMessage(),5
"net.sf.freecol.common.model.Colony.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.Colony.clearBuildingMap(),3
net.sf.freecol.common.model.Colony.clearColonyTiles(),3
net.sf.freecol.common.model.Colony.contains(Locatable),3
net.sf.freecol.common.model.Colony.copyColony(),13
net.sf.freecol.common.model.Colony.copyIn(T),3
net.sf.freecol.common.model.Colony.evaluateFor(Player),6
net.sf.freecol.common.model.Colony.findStudent(Unit),8
net.sf.freecol.common.model.Colony.findTeacher(Unit),8
"net.sf.freecol.common.model.Colony.getAbilities(String, FreeColSpecObjectType, Turn)",3
net.sf.freecol.common.model.Colony.getAdjustedNetProductionOf(GoodsType),7
net.sf.freecol.common.model.Colony.getAlarmLevelLabel(Player),3
net.sf.freecol.common.model.Colony.getAllWorkLocations(),5
net.sf.freecol.common.model.Colony.getAllWorkLocationsList(),5
net.sf.freecol.common.model.Colony.getApparentUnitCount(),6
net.sf.freecol.common.model.Colony.getAvailableGoodsCount(GoodsType),3
net.sf.freecol.common.model.Colony.getAvailableWorkLocations(),6
net.sf.freecol.common.model.Colony.getAvailableWorkLocationsList(),6
net.sf.freecol.common.model.Colony.getBestDefenderType(),5
net.sf.freecol.common.model.Colony.getBetterExpert(Unit),7
net.sf.freecol.common.model.Colony.getBuildQueue(),5
net.sf.freecol.common.model.Colony.getBuildableUnits(),5
net.sf.freecol.common.model.Colony.getBuilding(BuildingType),9
net.sf.freecol.common.model.Colony.getBuildings(),5
net.sf.freecol.common.model.Colony.getBurnableBuildings(),5
net.sf.freecol.common.model.Colony.getClassIndex(),3
net.sf.freecol.common.model.Colony.getColony(),3
net.sf.freecol.common.model.Colony.getColonyTile(Tile),6
net.sf.freecol.common.model.Colony.getColonyTiles(),7
net.sf.freecol.common.model.Colony.getConsumers(),7
net.sf.freecol.common.model.Colony.getConsumptionOf(GoodsType),7
net.sf.freecol.common.model.Colony.getCorresponding(T),8
net.sf.freecol.common.model.Colony.getCurrentWorkLocations(),5
net.sf.freecol.common.model.Colony.getCurrentWorkLocationsList(),5
net.sf.freecol.common.model.Colony.getCurrentlyBuilding(),5
net.sf.freecol.common.model.Colony.getDefenceRatio(),3
net.sf.freecol.common.model.Colony.getDefendingUnit(Unit),3
net.sf.freecol.common.model.Colony.getDisasterChoices(),7
net.sf.freecol.common.model.Colony.getDisplayUnitCount(),5
net.sf.freecol.common.model.Colony.getDisposables(),3
net.sf.freecol.common.model.Colony.getEstablished(),5
"net.sf.freecol.common.model.Colony.getExportAmount(GoodsType, int)",3
net.sf.freecol.common.model.Colony.getExportData(),5
net.sf.freecol.common.model.Colony.getExportData(GoodsType),6
net.sf.freecol.common.model.Colony.getFoodProduction(),5
net.sf.freecol.common.model.Colony.getFullRequiredGoods(BuildableType),13
net.sf.freecol.common.model.Colony.getGoodsCapacity(),3
net.sf.freecol.common.model.Colony.getImmigration(),3
"net.sf.freecol.common.model.Colony.getImportAmount(GoodsType, int)",3
"net.sf.freecol.common.model.Colony.getInsufficientProductionMessage(ProductionInfo, AbstractGoods)",7
net.sf.freecol.common.model.Colony.getLiberty(),3
net.sf.freecol.common.model.Colony.getLocationLabelFor(Player),3
net.sf.freecol.common.model.Colony.getLocationName(TradeLocation),3
net.sf.freecol.common.model.Colony.getLootableGoodsList(),6
net.sf.freecol.common.model.Colony.getNetProductionOf(GoodsType),8
net.sf.freecol.common.model.Colony.getNewColonistTurns(),6
"net.sf.freecol.common.model.Colony.getNoBuildReason(BuildableType, List<BuildableType>)",11
"net.sf.freecol.common.model.Colony.getOccupationFor(Unit, Collection<GoodsType>)",11
"net.sf.freecol.common.model.Colony.getOccupationFor(Unit, Collection<GoodsType>, LogBuilder)",12
"net.sf.freecol.common.model.Colony.getOccupationFor(Unit, boolean)",10
"net.sf.freecol.common.model.Colony.getOccupationFor(Unit, boolean, LogBuilder)",11
net.sf.freecol.common.model.Colony.getOccupationTrace(),5
net.sf.freecol.common.model.Colony.getOldSonsOfLiberty(),0
net.sf.freecol.common.model.Colony.getOldToryCount(),0
net.sf.freecol.common.model.Colony.getPlunderRange(Unit),3
net.sf.freecol.common.model.Colony.getPopulationQueue(),5
net.sf.freecol.common.model.Colony.getPreferredSizeChange(),9
net.sf.freecol.common.model.Colony.getPriceForBuilding(),7
net.sf.freecol.common.model.Colony.getPriceForBuilding(BuildableType),7
net.sf.freecol.common.model.Colony.getProductionBonus(),5
net.sf.freecol.common.model.Colony.getProductionInfo(Object),6
net.sf.freecol.common.model.Colony.getProductionMap(),6
"net.sf.freecol.common.model.Colony.getProductionModifiers(GoodsType, UnitType, WorkLocation)",9
net.sf.freecol.common.model.Colony.getProductionWarnings(GoodsType),7
net.sf.freecol.common.model.Colony.getReducePopulationMessage(),7
net.sf.freecol.common.model.Colony.getRequiredGoods(BuildableType),7
net.sf.freecol.common.model.Colony.getSonsOfLiberty(),5
net.sf.freecol.common.model.Colony.getStarvationTurns(),7
net.sf.freecol.common.model.Colony.getStockade(),5
net.sf.freecol.common.model.Colony.getStockadeKey(),6
net.sf.freecol.common.model.Colony.getTeachers(),6
net.sf.freecol.common.model.Colony.getTileImprovementSuggestions(),6
net.sf.freecol.common.model.Colony.getToryCount(),0
net.sf.freecol.common.model.Colony.getTotalDefencePower(),5
net.sf.freecol.common.model.Colony.getTotalProductionOf(GoodsType),3
net.sf.freecol.common.model.Colony.getTurnsToComplete(BuildableType),8
"net.sf.freecol.common.model.Colony.getTurnsToComplete(BuildableType, AbstractGoods)",13
net.sf.freecol.common.model.Colony.getUnbuildableMessage(BuildableType),6
net.sf.freecol.common.model.Colony.getUnitCount(),3
net.sf.freecol.common.model.Colony.getUnitList(),3
net.sf.freecol.common.model.Colony.getUnits(),3
net.sf.freecol.common.model.Colony.getUnitsToAdd(),0
net.sf.freecol.common.model.Colony.getUnitsToRemove(),0
net.sf.freecol.common.model.Colony.getUpkeep(),3
net.sf.freecol.common.model.Colony.getWarehouse(),5
net.sf.freecol.common.model.Colony.getWorkLocationFor(Unit),6
"net.sf.freecol.common.model.Colony.getWorkLocationFor(Unit, GoodsType)",8
net.sf.freecol.common.model.Colony.getWorkLocationForProducing(GoodsType),9
net.sf.freecol.common.model.Colony.getWorkLocationWithAbility(String),7
"net.sf.freecol.common.model.Colony.getWorkLocationWithAbility(String, Class<T>)",9
net.sf.freecol.common.model.Colony.getWorkLocationWithModifier(String),7
"net.sf.freecol.common.model.Colony.getWorkLocationWithModifier(String, Class<T>)",9
net.sf.freecol.common.model.Colony.getWorkLocationsForConsuming(GoodsType),7
net.sf.freecol.common.model.Colony.getWorkLocationsForProducing(GoodsType),7
"net.sf.freecol.common.model.Colony.getWorkTypeChoices(Unit, boolean)",9
net.sf.freecol.common.model.Colony.getXMLTagName(),3
net.sf.freecol.common.model.Colony.goodsUseful(GoodsType),11
net.sf.freecol.common.model.Colony.governmentChange(int),8
net.sf.freecol.common.model.Colony.hasContacted(Player),3
net.sf.freecol.common.model.Colony.hasStockade(),5
net.sf.freecol.common.model.Colony.invalidateCache(),3
net.sf.freecol.common.model.Colony.isAutomaticBuild(BuildingType),7
net.sf.freecol.common.model.Colony.isBadlyDefended(),3
net.sf.freecol.common.model.Colony.isConsuming(GoodsType),9
net.sf.freecol.common.model.Colony.isProducing(GoodsType),9
net.sf.freecol.common.model.Colony.isProductive(WorkLocation),7
net.sf.freecol.common.model.Colony.isTileInUse(Tile),6
net.sf.freecol.common.model.Colony.isUndead(),5
net.sf.freecol.common.model.Colony.isUnderSiege(),12
net.sf.freecol.common.model.Colony.isVeryWellDefended(),0
net.sf.freecol.common.model.Colony.joinColony(Unit),6
net.sf.freecol.common.model.Colony.modifyImmigration(int),5
net.sf.freecol.common.model.Colony.modifyLiberty(int),5
"net.sf.freecol.common.model.Colony.modifySpecialGoods(GoodsType, int)",7
net.sf.freecol.common.model.Colony.priceGoodsForBuilding(List<AbstractGoods>),7
net.sf.freecol.common.model.Colony.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Colony.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Colony.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Colony.rebelHelper(int),12
net.sf.freecol.common.model.Colony.remove(Locatable),3
net.sf.freecol.common.model.Colony.removeBuilding(Building),9
"net.sf.freecol.common.model.Colony.removeGoods(GoodsType, int)",3
"net.sf.freecol.common.model.Colony.returnPresent(GoodsType, int)",7
net.sf.freecol.common.model.Colony.setBuildQueue(List<BuildableType>),5
net.sf.freecol.common.model.Colony.setBuildingMap(List<Building>),5
net.sf.freecol.common.model.Colony.setColonyTiles(List<ColonyTile>),5
net.sf.freecol.common.model.Colony.setCurrentlyBuilding(BuildableType),6
net.sf.freecol.common.model.Colony.setDisplayUnitCount(int),7
net.sf.freecol.common.model.Colony.setEstablished(Turn),5
net.sf.freecol.common.model.Colony.setExportData(Collection<ExportData>),5
net.sf.freecol.common.model.Colony.setExportData(ExportData),5
net.sf.freecol.common.model.Colony.setOccupationTrace(boolean),6
net.sf.freecol.common.model.Colony.setPopulationQueue(List<UnitType>),5
net.sf.freecol.common.model.Colony.setProductionBonus(int),7
net.sf.freecol.common.model.Colony.toShortString(),3
net.sf.freecol.common.model.Colony.toString(),3
net.sf.freecol.common.model.Colony.up(),3
"net.sf.freecol.common.model.Colony.updateEducation(Unit, boolean)",11
net.sf.freecol.common.model.Colony.updatePopulation(),5
net.sf.freecol.common.model.Colony.updateProductionBonus(),5
net.sf.freecol.common.model.Colony.updateProductionTypes(),7
net.sf.freecol.common.model.Colony.updateSoL(),4
net.sf.freecol.common.model.Colony.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Colony.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.ColonyProductionTest.testBellNetProduction(),0
net.sf.freecol.common.model.ColonyProductionTest.testConsumers(),0
net.sf.freecol.common.model.ColonyProductionTest.testGetPotentialProduction(),0
net.sf.freecol.common.model.ColonyProductionTest.testNoHorsesOverProduction(),5
net.sf.freecol.common.model.ColonyProductionTest.testProduction(),0
net.sf.freecol.common.model.ColonyProductionTest.testProductionMap(),0
net.sf.freecol.common.model.ColonyProductionTest.testProductionPioneer(),0
net.sf.freecol.common.model.ColonyProductionTest.testProductionSoldier(),0
net.sf.freecol.common.model.ColonyTest.countParties(Colony),0
net.sf.freecol.common.model.ColonyTest.testAddUnitToColony(),0
net.sf.freecol.common.model.ColonyTest.testBuildQueueAcceptsUnitDoubles(),0
net.sf.freecol.common.model.ColonyTest.testBuildQueueDoesNotAcceptBuildingDoubles(),0
net.sf.freecol.common.model.ColonyTest.testCopyColony(),0
net.sf.freecol.common.model.ColonyTest.testCurrentlyBuilding(),0
net.sf.freecol.common.model.ColonyTest.testFoundColony(),0
net.sf.freecol.common.model.ColonyTest.testOccupationWithFood(),0
net.sf.freecol.common.model.ColonyTest.testTeaParty(),0
net.sf.freecol.common.model.ColonyTest.testUnderSiege(),0
net.sf.freecol.common.model.ColonyTest.testUpkeep(),0
"net.sf.freecol.common.model.ColonyTile.ColonyTile(Game, Colony, Tile)",8
"net.sf.freecol.common.model.ColonyTile.ColonyTile(Game, String)",8
net.sf.freecol.common.model.ColonyTile.canAutoProduce(),3
"net.sf.freecol.common.model.ColonyTile.canProduce(GoodsType, UnitType)",3
net.sf.freecol.common.model.ColonyTile.copyIn(T),3
net.sf.freecol.common.model.ColonyTile.evaluateFor(Player),6
net.sf.freecol.common.model.ColonyTile.getAvailableProductionTypes(boolean),3
"net.sf.freecol.common.model.ColonyTile.getBaseProduction(ProductionType, GoodsType, UnitType)",3
net.sf.freecol.common.model.ColonyTile.getBasicProductionInfo(),15
net.sf.freecol.common.model.ColonyTile.getClaimTemplate(),3
net.sf.freecol.common.model.ColonyTile.getCompetenceFactor(),3
net.sf.freecol.common.model.ColonyTile.getDisplayObject(),3
net.sf.freecol.common.model.ColonyTile.getLabel(),3
net.sf.freecol.common.model.ColonyTile.getLevel(),3
net.sf.freecol.common.model.ColonyTile.getLocationLabel(),3
net.sf.freecol.common.model.ColonyTile.getNoAddReason(Locatable),3
net.sf.freecol.common.model.ColonyTile.getNoWorkReason(),3
net.sf.freecol.common.model.ColonyTile.getOccupyingUnit(),6
"net.sf.freecol.common.model.ColonyTile.getProductionModifiers(GoodsType, UnitType)",3
net.sf.freecol.common.model.ColonyTile.getRebelFactor(),3
net.sf.freecol.common.model.ColonyTile.getUnitCapacity(),3
net.sf.freecol.common.model.ColonyTile.getWorkTile(),7
net.sf.freecol.common.model.ColonyTile.getXMLTagName(),3
"net.sf.freecol.common.model.ColonyTile.goodSuggestionCheck(UnitType, Unit, GoodsType)",0
net.sf.freecol.common.model.ColonyTile.improvedBy(TileImprovementType),6
net.sf.freecol.common.model.ColonyTile.isAvailable(),3
net.sf.freecol.common.model.ColonyTile.isColonyCenterTile(),5
net.sf.freecol.common.model.ColonyTile.isCurrent(),3
net.sf.freecol.common.model.ColonyTile.isOccupied(),6
net.sf.freecol.common.model.ColonyTile.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.ColonyTile.setWorkTile(Tile),6
net.sf.freecol.common.model.ColonyTile.toShortString(),3
net.sf.freecol.common.model.ColonyTile.toString(),3
net.sf.freecol.common.model.ColonyTile.up(),3
net.sf.freecol.common.model.ColonyTile.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.ColonyTradeItem.ColonyTradeItem(Game, FreeColXMLReader)",7
"net.sf.freecol.common.model.ColonyTradeItem.ColonyTradeItem(Game, Player, Player, Colony)",8
net.sf.freecol.common.model.ColonyTradeItem.copyIn(T),3
net.sf.freecol.common.model.ColonyTradeItem.equals(Object),3
net.sf.freecol.common.model.ColonyTradeItem.evaluateFor(Player),3
net.sf.freecol.common.model.ColonyTradeItem.getColony(Game),3
net.sf.freecol.common.model.ColonyTradeItem.getColonyId(),0
net.sf.freecol.common.model.ColonyTradeItem.getColonyName(),0
net.sf.freecol.common.model.ColonyTradeItem.getLabel(),3
net.sf.freecol.common.model.ColonyTradeItem.getXMLTagName(),3
net.sf.freecol.common.model.ColonyTradeItem.hashCode(),3
net.sf.freecol.common.model.ColonyTradeItem.isUnique(),3
net.sf.freecol.common.model.ColonyTradeItem.isValid(),3
net.sf.freecol.common.model.ColonyTradeItem.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.ColonyTradeItem.toString(),3
net.sf.freecol.common.model.ColonyTradeItem.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.ColonyWas.ColonyWas(Colony),5
net.sf.freecol.common.model.ColonyWas.fireChanges(),3
net.sf.freecol.common.model.CombatModel.CombatModel(),3
net.sf.freecol.common.model.CombatModel.CombatOdds.CombatOdds(double),0
net.sf.freecol.common.model.CombatModel.CombatResult.CombatResult(List<CombatEffectType>),0
"net.sf.freecol.common.model.CombatModel.CombatResult.CombatResult(List<CombatEffectType>, int, int)",0
net.sf.freecol.common.model.CombatModel.CombatResult.getAttackerHitpointsAfter(),0
net.sf.freecol.common.model.CombatModel.CombatResult.getDefenderHitpointsAfter(),0
net.sf.freecol.common.model.CombatModel.CombatResult.getEffects(),0
net.sf.freecol.common.model.CombatModel.CombatResult.isAttackerHitpointsAffected(),0
net.sf.freecol.common.model.CombatModel.CombatResult.isDefenderHitpointsAffected(),0
"net.sf.freecol.common.model.CombatModel.combatIsAmphibious(FreeColGameObject, FreeColGameObject)",7
"net.sf.freecol.common.model.CombatModel.combatIsAttack(FreeColGameObject, FreeColGameObject)",7
"net.sf.freecol.common.model.CombatModel.combatIsAttackMeasurement(FreeColGameObject, FreeColGameObject)",7
"net.sf.freecol.common.model.CombatModel.combatIsBombard(FreeColGameObject, FreeColGameObject)",7
"net.sf.freecol.common.model.CombatModel.combatIsDefenceMeasurement(FreeColGameObject, FreeColGameObject)",7
"net.sf.freecol.common.model.CombatModel.combatIsSettlementAttack(FreeColGameObject, FreeColGameObject)",10
"net.sf.freecol.common.model.CombatModel.combatIsWarOfIndependence(FreeColGameObject, FreeColGameObject)",7
net.sf.freecol.common.model.CombatModel.getMilitaryStrengthComparator(),6
net.sf.freecol.common.model.CombatTest.testAttackIgnoresMovementPoints(),0
net.sf.freecol.common.model.CombatTest.testAttackShipWithLandUnit(),0
net.sf.freecol.common.model.CombatTest.testCaptureConvert(),0
net.sf.freecol.common.model.CombatTest.testColonistAttackedByVeteran(),0
net.sf.freecol.common.model.CombatTest.testDefendColonyWithRevere(),0
net.sf.freecol.common.model.CombatTest.testDefendColonyWithUnarmedColonist(),0
net.sf.freecol.common.model.CombatTest.testDefendSettlement(),0
net.sf.freecol.common.model.CombatTest.testGalleonAttackedByPrivateer(),9
net.sf.freecol.common.model.CombatTest.testRegulars(),0
net.sf.freecol.common.model.CombatTest.testSpanishAgainstNatives(),0
net.sf.freecol.common.model.Constants.IntegrityType.IntegrityType(int),5
net.sf.freecol.common.model.Constants.IntegrityType.combine(IntegrityType),6
net.sf.freecol.common.model.Constants.IntegrityType.fail(),5
net.sf.freecol.common.model.Constants.IntegrityType.fix(),7
net.sf.freecol.common.model.Constants.IntegrityType.safe(),5
"net.sf.freecol.common.model.DiplomaticTrade.DiplomaticTrade(Game, String)",6
"net.sf.freecol.common.model.DiplomaticTrade.DiplomaticTrade(Game, TradeContext, Player, Player, List<TradeItem>, int)",10
net.sf.freecol.common.model.DiplomaticTrade.TradeContext.getKey(),5
net.sf.freecol.common.model.DiplomaticTrade.add(TradeItem),5
net.sf.freecol.common.model.DiplomaticTrade.clear(),3
net.sf.freecol.common.model.DiplomaticTrade.copyIn(T),3
net.sf.freecol.common.model.DiplomaticTrade.getColoniesGivenBy(Player),6
net.sf.freecol.common.model.DiplomaticTrade.getContext(),5
net.sf.freecol.common.model.DiplomaticTrade.getGoldGivenBy(Player),6
net.sf.freecol.common.model.DiplomaticTrade.getGoodsGivenBy(Player),6
net.sf.freecol.common.model.DiplomaticTrade.getItems(),5
net.sf.freecol.common.model.DiplomaticTrade.getItemsGivenBy(Player),6
net.sf.freecol.common.model.DiplomaticTrade.getOtherPlayer(Player),6
net.sf.freecol.common.model.DiplomaticTrade.getReceiveMessage(Player),7
net.sf.freecol.common.model.DiplomaticTrade.getRecipient(),5
"net.sf.freecol.common.model.DiplomaticTrade.getSendMessage(Player, Settlement)",8
net.sf.freecol.common.model.DiplomaticTrade.getSender(),5
net.sf.freecol.common.model.DiplomaticTrade.getStance(),5
net.sf.freecol.common.model.DiplomaticTrade.getStatus(),5
net.sf.freecol.common.model.DiplomaticTrade.getUnitsGivenBy(Player),6
net.sf.freecol.common.model.DiplomaticTrade.getVersion(),5
net.sf.freecol.common.model.DiplomaticTrade.getVictim(),5
net.sf.freecol.common.model.DiplomaticTrade.getXMLTagName(),3
net.sf.freecol.common.model.DiplomaticTrade.incrementVersion(),3
net.sf.freecol.common.model.DiplomaticTrade.isEmpty(),5
net.sf.freecol.common.model.DiplomaticTrade.isInternable(),3
"net.sf.freecol.common.model.DiplomaticTrade.makePeaceTreaty(TradeContext, Player, Player)",9
net.sf.freecol.common.model.DiplomaticTrade.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.DiplomaticTrade.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.DiplomaticTrade.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.DiplomaticTrade.remove(TradeItem),5
net.sf.freecol.common.model.DiplomaticTrade.remove(int),5
net.sf.freecol.common.model.DiplomaticTrade.removeType(Class<? extends TradeItem>),6
net.sf.freecol.common.model.DiplomaticTrade.setRecipient(Player),5
net.sf.freecol.common.model.DiplomaticTrade.setSender(Player),5
net.sf.freecol.common.model.DiplomaticTrade.setStatus(TradeStatus),5
net.sf.freecol.common.model.DiplomaticTrade.toString(),3
net.sf.freecol.common.model.DiplomaticTrade.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.DiplomaticTrade.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.Direction.Direction(int, int, int, int)",8
net.sf.freecol.common.model.Direction.angleToDirection(double),6
"net.sf.freecol.common.model.Direction.getClosestDirections(String, Logger, Random)",16
net.sf.freecol.common.model.Direction.getEWMirroredDirection(),5
net.sf.freecol.common.model.Direction.getKey(),5
net.sf.freecol.common.model.Direction.getNameKey(),3
net.sf.freecol.common.model.Direction.getNextDirection(),5
net.sf.freecol.common.model.Direction.getPreviousDirection(),5
"net.sf.freecol.common.model.Direction.getRandomDirection(String, Logger, Random)",8
"net.sf.freecol.common.model.Direction.getRandomDirections(String, Logger, Random)",8
net.sf.freecol.common.model.Direction.getReverseDirection(),5
net.sf.freecol.common.model.Direction.rotate(int),7
"net.sf.freecol.common.model.Direction.step(int, int)",7
"net.sf.freecol.common.model.Disaster.Disaster(String, Specification)",6
net.sf.freecol.common.model.Disaster.addEffect(Effect),5
net.sf.freecol.common.model.Disaster.copyIn(T),3
net.sf.freecol.common.model.Disaster.getEffects(),5
net.sf.freecol.common.model.Disaster.getNumberOfEffects(),5
net.sf.freecol.common.model.Disaster.getXMLTagName(),3
net.sf.freecol.common.model.Disaster.isNatural(),5
net.sf.freecol.common.model.Disaster.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Disaster.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Disaster.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Disaster.setEffects(List<RandomChoice<Effect>>),5
net.sf.freecol.common.model.Disaster.toString(),3
net.sf.freecol.common.model.Disaster.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Disaster.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.DisasterTest.testDisastersPresent(),0
net.sf.freecol.common.model.Effect.Effect(),3
net.sf.freecol.common.model.Effect.Effect(Effect),5
"net.sf.freecol.common.model.Effect.Effect(FreeColXMLReader, Specification)",7
net.sf.freecol.common.model.Effect.copyIn(T),3
net.sf.freecol.common.model.Effect.getProbability(),5
net.sf.freecol.common.model.Effect.getXMLTagName(),3
net.sf.freecol.common.model.Effect.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Effect.toString(),3
net.sf.freecol.common.model.Effect.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.Europe.Europe(Game, Player)",6
"net.sf.freecol.common.model.Europe.Europe(Game, String)",8
net.sf.freecol.common.model.Europe.MigrationType.convertToMigrantSlot(Integer),0
net.sf.freecol.common.model.Europe.MigrationType.getDefaultSlot(),0
net.sf.freecol.common.model.Europe.MigrationType.getMigrantCount(),0
net.sf.freecol.common.model.Europe.MigrationType.getUnspecificSlot(),0
net.sf.freecol.common.model.Europe.MigrationType.migrantIndexToSlot(int),0
net.sf.freecol.common.model.Europe.MigrationType.migrantSlotToIndex(int),0
net.sf.freecol.common.model.Europe.MigrationType.specificMigrantSlot(int),0
net.sf.freecol.common.model.Europe.MigrationType.unspecificMigrantSlot(int),0
net.sf.freecol.common.model.Europe.MigrationType.validMigrantIndex(int),0
net.sf.freecol.common.model.Europe.MigrationType.validMigrantSlot(int),0
net.sf.freecol.common.model.Europe.add(Locatable),3
"net.sf.freecol.common.model.Europe.addRecruitable(AbstractUnit, boolean)",7
"net.sf.freecol.common.model.Europe.addRecruitable(UnitType, boolean)",7
net.sf.freecol.common.model.Europe.canAdd(Locatable),3
net.sf.freecol.common.model.Europe.canBeInput(),3
net.sf.freecol.common.model.Europe.copyIn(T),3
net.sf.freecol.common.model.Europe.disposeResources(),3
"net.sf.freecol.common.model.Europe.equipForRole(Unit, Role, int)",3
"net.sf.freecol.common.model.Europe.getAbilities(String, FreeColSpecObjectType, Turn)",3
net.sf.freecol.common.model.Europe.getAvailableGoodsCount(GoodsType),3
net.sf.freecol.common.model.Europe.getBaseRecruitPrice(),5
net.sf.freecol.common.model.Europe.getClassIndex(),3
net.sf.freecol.common.model.Europe.getCurrentRecruitPrice(),5
net.sf.freecol.common.model.Europe.getExpandedRecruitables(boolean),8
"net.sf.freecol.common.model.Europe.getExportAmount(GoodsType, int)",3
net.sf.freecol.common.model.Europe.getFeatureContainer(),3
net.sf.freecol.common.model.Europe.getImmigration(int),11
"net.sf.freecol.common.model.Europe.getImportAmount(GoodsType, int)",3
net.sf.freecol.common.model.Europe.getLinkTarget(Player),3
net.sf.freecol.common.model.Europe.getLocationImageKey(),3
net.sf.freecol.common.model.Europe.getLocationLabel(),3
net.sf.freecol.common.model.Europe.getLocationName(TradeLocation),3
net.sf.freecol.common.model.Europe.getNameAsJlabel(),3
net.sf.freecol.common.model.Europe.getNameKey(),3
net.sf.freecol.common.model.Europe.getOwner(),3
net.sf.freecol.common.model.Europe.getRank(),3
net.sf.freecol.common.model.Europe.getRecruitLowerCap(),5
net.sf.freecol.common.model.Europe.getRecruitables(),5
net.sf.freecol.common.model.Europe.getUnitPrice(UnitType),7
net.sf.freecol.common.model.Europe.getUnitPrices(),5
net.sf.freecol.common.model.Europe.getXMLTagName(),3
net.sf.freecol.common.model.Europe.priceGoods(List<AbstractGoods>),3
net.sf.freecol.common.model.Europe.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Europe.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Europe.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Europe.setOwner(Player),3
net.sf.freecol.common.model.Europe.setRecruitables(List<AbstractUnit>),5
"net.sf.freecol.common.model.Europe.setUnitPrices(Map<UnitType, Integer>)",5
net.sf.freecol.common.model.Europe.toShortString(),3
net.sf.freecol.common.model.Europe.toString(),3
net.sf.freecol.common.model.Europe.up(),3
net.sf.freecol.common.model.Europe.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Europe.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.EuropeTest.testMissionary(),0
net.sf.freecol.common.model.EuropeWas.EuropeWas(Europe),5
net.sf.freecol.common.model.EuropeWas.fireChanges(),3
net.sf.freecol.common.model.EuropeWas.getNewUnit(),8
"net.sf.freecol.common.model.EuropeanNationType.EuropeanNationType(String, Specification)",6
"net.sf.freecol.common.model.EuropeanNationType.addStartingUnit(String, AbstractUnit, boolean)",7
net.sf.freecol.common.model.EuropeanNationType.copyIn(T),3
net.sf.freecol.common.model.EuropeanNationType.getMapKey(boolean),6
net.sf.freecol.common.model.EuropeanNationType.getStartingUnitMap(),5
net.sf.freecol.common.model.EuropeanNationType.getStartingUnits(),5
net.sf.freecol.common.model.EuropeanNationType.getStartingUnits(String),7
net.sf.freecol.common.model.EuropeanNationType.getXMLTagName(),3
net.sf.freecol.common.model.EuropeanNationType.isEuropean(),5
net.sf.freecol.common.model.EuropeanNationType.isIndian(),5
net.sf.freecol.common.model.EuropeanNationType.isREF(),5
net.sf.freecol.common.model.EuropeanNationType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.EuropeanNationType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.EuropeanNationType.readChildren(FreeColXMLReader),3
"net.sf.freecol.common.model.EuropeanNationType.setStartingUnitMap(Map<String, Map<String, AbstractUnit>>)",5
net.sf.freecol.common.model.EuropeanNationType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.EuropeanNationType.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.EuropeanNationType.writeUnit(FreeColXMLWriter, String, AbstractUnit, boolean)",0
"net.sf.freecol.common.model.Event.Event(FreeColXMLReader, Specification)",7
"net.sf.freecol.common.model.Event.Event(String, Specification)",6
net.sf.freecol.common.model.Event.addLimit(Limit),5
net.sf.freecol.common.model.Event.copyIn(T),3
net.sf.freecol.common.model.Event.getLimit(String),6
net.sf.freecol.common.model.Event.getLimitValues(),5
net.sf.freecol.common.model.Event.getLimits(),5
net.sf.freecol.common.model.Event.getScoreValue(),5
net.sf.freecol.common.model.Event.getValue(),5
net.sf.freecol.common.model.Event.getXMLTagName(),3
net.sf.freecol.common.model.Event.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Event.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Event.readChildren(FreeColXMLReader),3
"net.sf.freecol.common.model.Event.setLimits(Map<String, Limit>)",5
net.sf.freecol.common.model.Event.setScoreValue(int),5
net.sf.freecol.common.model.Event.setValue(String),5
net.sf.freecol.common.model.Event.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Event.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.ExportData.ExportData(),3
net.sf.freecol.common.model.ExportData.ExportData(FreeColXMLReader),6
"net.sf.freecol.common.model.ExportData.ExportData(GoodsType, int)",6
net.sf.freecol.common.model.ExportData.copyIn(T),3
net.sf.freecol.common.model.ExportData.getEffectiveImportLevel(int),7
net.sf.freecol.common.model.ExportData.getExportLevel(),5
net.sf.freecol.common.model.ExportData.getExported(),5
net.sf.freecol.common.model.ExportData.getHighLevel(),5
net.sf.freecol.common.model.ExportData.getImportLevel(),5
net.sf.freecol.common.model.ExportData.getLowLevel(),5
net.sf.freecol.common.model.ExportData.getXMLTagName(),3
net.sf.freecol.common.model.ExportData.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.ExportData.setExportLevel(int),6
net.sf.freecol.common.model.ExportData.setExported(boolean),5
net.sf.freecol.common.model.ExportData.setHighLevel(int),6
net.sf.freecol.common.model.ExportData.setImportLevel(int),6
net.sf.freecol.common.model.ExportData.setLowLevel(int),6
net.sf.freecol.common.model.ExportData.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Feature.Feature(Specification),5
net.sf.freecol.common.model.Feature.addScope(Scope),0
net.sf.freecol.common.model.Feature.appliesTo(FreeColObject),0
"net.sf.freecol.common.model.Feature.appliesTo(FreeColSpecObjectType, Turn)",7
net.sf.freecol.common.model.Feature.appliesTo(Turn),6
net.sf.freecol.common.model.Feature.copyIn(T),3
net.sf.freecol.common.model.Feature.copyScopes(Collection<Scope>),0
net.sf.freecol.common.model.Feature.equals(Object),3
net.sf.freecol.common.model.Feature.getDuration(),5
net.sf.freecol.common.model.Feature.getFirstTurn(),5
net.sf.freecol.common.model.Feature.getLastTurn(),5
net.sf.freecol.common.model.Feature.getNameKey(),3
net.sf.freecol.common.model.Feature.getScopeList(),0
net.sf.freecol.common.model.Feature.getScopes(),0
net.sf.freecol.common.model.Feature.getSource(),5
net.sf.freecol.common.model.Feature.hasScope(),0
net.sf.freecol.common.model.Feature.hasTimeLimit(),5
net.sf.freecol.common.model.Feature.hashCode(),3
net.sf.freecol.common.model.Feature.isIndependent(),9
net.sf.freecol.common.model.Feature.isOutOfDate(Turn),7
net.sf.freecol.common.model.Feature.isTemporary(),5
net.sf.freecol.common.model.Feature.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Feature.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Feature.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Feature.setDuration(int),5
net.sf.freecol.common.model.Feature.setFirstTurn(Turn),5
net.sf.freecol.common.model.Feature.setLastTurn(Turn),5
net.sf.freecol.common.model.Feature.setSource(FreeColObject),5
net.sf.freecol.common.model.Feature.setTemporary(boolean),5
net.sf.freecol.common.model.Feature.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Feature.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.FeatureContainer.abilitiesPresent(),5
net.sf.freecol.common.model.FeatureContainer.addAbility(Ability),6
net.sf.freecol.common.model.FeatureContainer.addFeatures(FreeColObject),5
net.sf.freecol.common.model.FeatureContainer.addModifier(Modifier),6
net.sf.freecol.common.model.FeatureContainer.allAbilities(Stream<Ability>),7
"net.sf.freecol.common.model.FeatureContainer.applyModifiers(float, Turn, Collection<Modifier>)",8
"net.sf.freecol.common.model.FeatureContainer.applyModifiers(float, Turn, Stream<Modifier>)",8
"net.sf.freecol.common.model.FeatureContainer.applyModifiersInternal(float, Turn, Collection<Modifier>)",8
net.sf.freecol.common.model.FeatureContainer.clear(),3
net.sf.freecol.common.model.FeatureContainer.containsAbilityKey(String),6
net.sf.freecol.common.model.FeatureContainer.copy(FeatureContainer),5
"net.sf.freecol.common.model.FeatureContainer.getAbilities(String, FreeColSpecObjectType, Turn)",10
net.sf.freecol.common.model.FeatureContainer.getAbilityValues(),0
net.sf.freecol.common.model.FeatureContainer.getModifierValues(),4
"net.sf.freecol.common.model.FeatureContainer.getModifiers(String, FreeColSpecObjectType, Turn)",10
"net.sf.freecol.common.model.FeatureContainer.hasAbility(String, FreeColSpecObjectType, Turn)",10
net.sf.freecol.common.model.FeatureContainer.modifiersPresent(),5
net.sf.freecol.common.model.FeatureContainer.removeAbilities(String),5
net.sf.freecol.common.model.FeatureContainer.removeAbility(Ability),6
net.sf.freecol.common.model.FeatureContainer.removeFeatures(FreeColObject),6
net.sf.freecol.common.model.FeatureContainer.removeModifier(Modifier),6
net.sf.freecol.common.model.FeatureContainer.removeModifiers(String),5
"net.sf.freecol.common.model.FeatureContainer.replaceSource(FreeColSpecObjectType, FreeColSpecObjectType)",7
net.sf.freecol.common.model.FeatureContainer.requireAbilities(),3
net.sf.freecol.common.model.FeatureContainer.requireModifiers(),3
net.sf.freecol.common.model.FeatureContainer.toString(),3
net.sf.freecol.common.model.Force.Force(Specification),5
"net.sf.freecol.common.model.Force.Force(Specification, List<AbstractUnit>, String)",8
net.sf.freecol.common.model.Force.add(AbstractUnit),5
net.sf.freecol.common.model.Force.calculateStrength(boolean),7
net.sf.freecol.common.model.Force.clearLandUnits(),3
net.sf.freecol.common.model.Force.clearNavalUnits(),3
net.sf.freecol.common.model.Force.copyIn(T),3
net.sf.freecol.common.model.Force.getCapacity(),5
net.sf.freecol.common.model.Force.getLandUnitsList(),5
net.sf.freecol.common.model.Force.getNavalUnitsList(),5
net.sf.freecol.common.model.Force.getSpaceRequired(),5
net.sf.freecol.common.model.Force.getUnitList(),5
net.sf.freecol.common.model.Force.getXMLTagName(),3
net.sf.freecol.common.model.Force.isEmpty(),5
net.sf.freecol.common.model.Force.matchAll(Force),6
net.sf.freecol.common.model.Force.prepareToBoard(UnitType),6
net.sf.freecol.common.model.Force.readFromXML(FreeColXMLReader),3
net.sf.freecol.common.model.Force.setLandUnitList(List<AbstractUnit>),5
net.sf.freecol.common.model.Force.setNavalUnitList(List<AbstractUnit>),5
net.sf.freecol.common.model.Force.toString(),3
"net.sf.freecol.common.model.Force.toXML(FreeColXMLWriter, String)",3
"net.sf.freecol.common.model.FoundingFather.FoundingFather(String, Specification)",6
net.sf.freecol.common.model.FoundingFather.FoundingFatherType.getKey(),5
net.sf.freecol.common.model.FoundingFather.FoundingFatherType.getTypeKey(),5
net.sf.freecol.common.model.FoundingFather.addEvent(Event),5
net.sf.freecol.common.model.FoundingFather.addUnit(AbstractUnit),5
net.sf.freecol.common.model.FoundingFather.copyIn(T),3
net.sf.freecol.common.model.FoundingFather.getEvents(),5
net.sf.freecol.common.model.FoundingFather.getType(),5
net.sf.freecol.common.model.FoundingFather.getTypeKey(),5
net.sf.freecol.common.model.FoundingFather.getUnitList(),5
net.sf.freecol.common.model.FoundingFather.getWeight(int),7
net.sf.freecol.common.model.FoundingFather.getXMLTagName(),3
net.sf.freecol.common.model.FoundingFather.isAvailableTo(Player),8
net.sf.freecol.common.model.FoundingFather.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.FoundingFather.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.FoundingFather.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.FoundingFather.setEvents(List<Event>),7
net.sf.freecol.common.model.FoundingFather.setType(FoundingFatherType),7
net.sf.freecol.common.model.FoundingFather.setUnits(List<AbstractUnit>),7
net.sf.freecol.common.model.FoundingFather.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.FoundingFather.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.FoundingFatherTest.testAddAllFathers(),0
net.sf.freecol.common.model.FoundingFatherTest.testAvailableTo(),0
net.sf.freecol.common.model.FoundingFatherTest.testBellsRequired(),0
net.sf.freecol.common.model.FoundingFatherTest.testFeatures(),0
net.sf.freecol.common.model.FreeColGameObject.FreeColGameObject(),5
net.sf.freecol.common.model.FreeColGameObject.FreeColGameObject(Game),5
"net.sf.freecol.common.model.FreeColGameObject.FreeColGameObject(Game, String)",10
"net.sf.freecol.common.model.FreeColGameObject.checkIntegrity(boolean, LogBuilder)",7
net.sf.freecol.common.model.FreeColGameObject.copyIn(T),3
net.sf.freecol.common.model.FreeColGameObject.dispose(),4
net.sf.freecol.common.model.FreeColGameObject.disposeResources(),7
net.sf.freecol.common.model.FreeColGameObject.equals(Object),3
net.sf.freecol.common.model.FreeColGameObject.fundamentalDispose(),3
net.sf.freecol.common.model.FreeColGameObject.getClassIndex(),3
net.sf.freecol.common.model.FreeColGameObject.getDisposables(),9
net.sf.freecol.common.model.FreeColGameObject.getGame(),3
net.sf.freecol.common.model.FreeColGameObject.getLinkTarget(Player),11
net.sf.freecol.common.model.FreeColGameObject.getSpecification(),3
net.sf.freecol.common.model.FreeColGameObject.hashCode(),3
net.sf.freecol.common.model.FreeColGameObject.intern(),3
net.sf.freecol.common.model.FreeColGameObject.internId(String),6
net.sf.freecol.common.model.FreeColGameObject.isDisposed(),6
net.sf.freecol.common.model.FreeColGameObject.isInitialized(),5
net.sf.freecol.common.model.FreeColGameObject.isInternable(),9
net.sf.freecol.common.model.FreeColGameObject.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.FreeColGameObject.readFromXML(FreeColXMLReader),3
net.sf.freecol.common.model.FreeColGameObject.setGame(Game),3
net.sf.freecol.common.model.FreeColGameObject.setSpecification(Specification),3
net.sf.freecol.common.model.FreeColObject.addAbility(Ability),6
net.sf.freecol.common.model.FreeColObject.addFeatures(FreeColObject),5
net.sf.freecol.common.model.FreeColObject.addModifier(Modifier),6
net.sf.freecol.common.model.FreeColObject.addPropertyChangeListener(PropertyChangeListener),0
"net.sf.freecol.common.model.FreeColObject.addPropertyChangeListener(String, PropertyChangeListener)",0
"net.sf.freecol.common.model.FreeColObject.apply(float, Turn, String)",9
"net.sf.freecol.common.model.FreeColObject.apply(float, Turn, String, FreeColSpecObjectType)",11
"net.sf.freecol.common.model.FreeColObject.applyModifiers(float, Turn, Collection<Modifier>)",8
"net.sf.freecol.common.model.FreeColObject.applyModifiers(float, Turn, Stream<Modifier>)",8
net.sf.freecol.common.model.FreeColObject.arrayKey(int),6
"net.sf.freecol.common.model.FreeColObject.compareIds(FreeColObject, FreeColObject)",7
net.sf.freecol.common.model.FreeColObject.compareTo(FreeColObject),6
net.sf.freecol.common.model.FreeColObject.containsAbilityKey(String),6
net.sf.freecol.common.model.FreeColObject.containsModifierKey(String),6
net.sf.freecol.common.model.FreeColObject.copy(Game),7
"net.sf.freecol.common.model.FreeColObject.copy(Game, Class<T>)",16
"net.sf.freecol.common.model.FreeColObject.copy(Game, Class<T>, Player)",9
"net.sf.freecol.common.model.FreeColObject.copy(Game, Player)",8
net.sf.freecol.common.model.FreeColObject.copyIn(T),7
"net.sf.freecol.common.model.FreeColObject.copyInCast(T, Class<R>)",10
net.sf.freecol.common.model.FreeColObject.dumpObject(),3
net.sf.freecol.common.model.FreeColObject.equals(Object),3
"net.sf.freecol.common.model.FreeColObject.fireIndexedPropertyChange(String, int, Object, Object)",0
"net.sf.freecol.common.model.FreeColObject.fireIndexedPropertyChange(String, int, boolean, boolean)",0
"net.sf.freecol.common.model.FreeColObject.fireIndexedPropertyChange(String, int, int, int)",0
net.sf.freecol.common.model.FreeColObject.firePropertyChange(PropertyChangeEvent),0
"net.sf.freecol.common.model.FreeColObject.firePropertyChange(String, Object, Object)",0
"net.sf.freecol.common.model.FreeColObject.firePropertyChange(String, boolean, boolean)",0
"net.sf.freecol.common.model.FreeColObject.firePropertyChange(String, int, int)",0
net.sf.freecol.common.model.FreeColObject.getAbilities(),5
net.sf.freecol.common.model.FreeColObject.getAbilities(String),6
"net.sf.freecol.common.model.FreeColObject.getAbilities(String, FreeColSpecObjectType)",8
"net.sf.freecol.common.model.FreeColObject.getAbilities(String, FreeColSpecObjectType, Turn)",11
net.sf.freecol.common.model.FreeColObject.getClassIndex(),6
net.sf.freecol.common.model.FreeColObject.getDefenceModifiers(),5
net.sf.freecol.common.model.FreeColObject.getDisplayObject(),8
net.sf.freecol.common.model.FreeColObject.getFeatureContainer(),5
net.sf.freecol.common.model.FreeColObject.getFreeColObjectClass(),6
net.sf.freecol.common.model.FreeColObject.getFreeColObjectClassByName(String),7
net.sf.freecol.common.model.FreeColObject.getGame(),5
net.sf.freecol.common.model.FreeColObject.getId(),5
net.sf.freecol.common.model.FreeColObject.getIdNumber(),5
net.sf.freecol.common.model.FreeColObject.getIdType(),5
net.sf.freecol.common.model.FreeColObject.getIdTypeByName(String),6
net.sf.freecol.common.model.FreeColObject.getModifiers(),5
net.sf.freecol.common.model.FreeColObject.getModifiers(String),6
"net.sf.freecol.common.model.FreeColObject.getModifiers(String, FreeColSpecObjectType)",8
"net.sf.freecol.common.model.FreeColObject.getModifiers(String, FreeColSpecObjectType, Turn)",12
net.sf.freecol.common.model.FreeColObject.getObjectClassIndex(Object),6
net.sf.freecol.common.model.FreeColObject.getPropertyChangeListeners(),0
net.sf.freecol.common.model.FreeColObject.getPropertyChangeListeners(String),0
net.sf.freecol.common.model.FreeColObject.getPropertyChangeSupport(),0
net.sf.freecol.common.model.FreeColObject.getSortedAbilities(),5
net.sf.freecol.common.model.FreeColObject.getSortedModifiers(),5
net.sf.freecol.common.model.FreeColObject.getSpecification(),5
net.sf.freecol.common.model.FreeColObject.getSuffix(),6
net.sf.freecol.common.model.FreeColObject.getSuffix(String),8
net.sf.freecol.common.model.FreeColObject.hasAbility(String),6
"net.sf.freecol.common.model.FreeColObject.hasAbility(String, FreeColSpecObjectType)",8
"net.sf.freecol.common.model.FreeColObject.hasAbility(String, FreeColSpecObjectType, Turn)",9
net.sf.freecol.common.model.FreeColObject.hasListeners(String),0
net.sf.freecol.common.model.FreeColObject.hasModifier(String),6
"net.sf.freecol.common.model.FreeColObject.hasModifier(String, FreeColSpecObjectType)",8
"net.sf.freecol.common.model.FreeColObject.hasModifier(String, FreeColSpecObjectType, Turn)",9
net.sf.freecol.common.model.FreeColObject.hashCode(),3
net.sf.freecol.common.model.FreeColObject.idEquals(FreeColObject),6
"net.sf.freecol.common.model.FreeColObject.invokeMethod(String, Class<T>, T)",10
"net.sf.freecol.common.model.FreeColObject.logFreeColObjects(Collection<T>, LogBuilder)",7
net.sf.freecol.common.model.FreeColObject.readAttributes(FreeColXMLReader),6
net.sf.freecol.common.model.FreeColObject.readChild(FreeColXMLReader),11
net.sf.freecol.common.model.FreeColObject.readChildren(FreeColXMLReader),6
net.sf.freecol.common.model.FreeColObject.readFromXML(FreeColXMLReader),9
net.sf.freecol.common.model.FreeColObject.readFromXMLPartial(FreeColXMLReader),12
net.sf.freecol.common.model.FreeColObject.removeAbilities(String),5
net.sf.freecol.common.model.FreeColObject.removeAbility(Ability),6
net.sf.freecol.common.model.FreeColObject.removeFeatures(FreeColObject),5
net.sf.freecol.common.model.FreeColObject.removeModifier(Modifier),6
net.sf.freecol.common.model.FreeColObject.removeModifiers(String),5
net.sf.freecol.common.model.FreeColObject.removePropertyChangeListener(PropertyChangeListener),0
"net.sf.freecol.common.model.FreeColObject.removePropertyChangeListener(String, PropertyChangeListener)",0
net.sf.freecol.common.model.FreeColObject.save(File),6
"net.sf.freecol.common.model.FreeColObject.save(File, WriteScope)",7
"net.sf.freecol.common.model.FreeColObject.save(File, WriteScope, boolean)",8
"net.sf.freecol.common.model.FreeColObject.save(OutputStream, WriteScope, boolean)",8
net.sf.freecol.common.model.FreeColObject.serialize(),8
net.sf.freecol.common.model.FreeColObject.serialize(Player),9
net.sf.freecol.common.model.FreeColObject.serialize(WriteScope),9
"net.sf.freecol.common.model.FreeColObject.serialize(WriteScope, List<String>)",11
net.sf.freecol.common.model.FreeColObject.setGame(Game),5
net.sf.freecol.common.model.FreeColObject.setId(String),5
net.sf.freecol.common.model.FreeColObject.setSpecification(Specification),5
net.sf.freecol.common.model.FreeColObject.toString(),3
net.sf.freecol.common.model.FreeColObject.toXML(FreeColXMLWriter),10
"net.sf.freecol.common.model.FreeColObject.toXML(FreeColXMLWriter, String)",16
"net.sf.freecol.common.model.FreeColObject.toXMLPartial(FreeColXMLWriter, List<String>)",9
"net.sf.freecol.common.model.FreeColObject.toXMLPartial(FreeColXMLWriter, String[])",14
net.sf.freecol.common.model.FreeColObject.writeAttributes(FreeColXMLWriter),10
net.sf.freecol.common.model.FreeColObject.writeChildren(FreeColXMLWriter),10
net.sf.freecol.common.model.FreeColSpecObject.FreeColSpecObject(Specification),5
net.sf.freecol.common.model.FreeColSpecObject.copyIn(T),3
net.sf.freecol.common.model.FreeColSpecObject.getSpecification(),5
net.sf.freecol.common.model.FreeColSpecObject.setSpecification(Specification),5
net.sf.freecol.common.model.FreeColSpecObjectType.FreeColSpecObjectType(),3
net.sf.freecol.common.model.FreeColSpecObjectType.FreeColSpecObjectType(Specification),6
net.sf.freecol.common.model.FreeColSpecObjectType.FreeColSpecObjectType(String),5
"net.sf.freecol.common.model.FreeColSpecObjectType.FreeColSpecObjectType(String, Specification)",7
net.sf.freecol.common.model.FreeColSpecObjectType.addScope(Scope),0
net.sf.freecol.common.model.FreeColSpecObjectType.appliesTo(FreeColObject),0
net.sf.freecol.common.model.FreeColSpecObjectType.copyIn(T),3
net.sf.freecol.common.model.FreeColSpecObjectType.copyScopes(Collection<Scope>),0
net.sf.freecol.common.model.FreeColSpecObjectType.getDescriptionKey(),6
net.sf.freecol.common.model.FreeColSpecObjectType.getFeatureContainer(),3
net.sf.freecol.common.model.FreeColSpecObjectType.getIndex(),11
net.sf.freecol.common.model.FreeColSpecObjectType.getNameKey(),3
net.sf.freecol.common.model.FreeColSpecObjectType.getScopeList(),0
net.sf.freecol.common.model.FreeColSpecObjectType.getScopes(),0
net.sf.freecol.common.model.FreeColSpecObjectType.isAbstractType(),5
net.sf.freecol.common.model.FreeColSpecObjectType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.FreeColSpecObjectType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.FreeColSpecObjectType.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.FreeColSpecObjectType.removeScope(Scope),0
net.sf.freecol.common.model.FreeColSpecObjectType.setIndex(int),5
net.sf.freecol.common.model.FreeColSpecObjectType.toString(),3
net.sf.freecol.common.model.FreeColSpecObjectType.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.Game.Game(),5
"net.sf.freecol.common.model.Game.Game(Game, FreeColXMLReader)",8
net.sf.freecol.common.model.Game.Game(Specification),5
"net.sf.freecol.common.model.Game.addFreeColGameObject(String, FreeColGameObject)",6
net.sf.freecol.common.model.Game.addPlayer(Player),5
net.sf.freecol.common.model.Game.addPlayers(List<Player>),9
net.sf.freecol.common.model.Game.allPlayersReadyToLaunch(),5
net.sf.freecol.common.model.Game.canAddNewPlayer(),5
net.sf.freecol.common.model.Game.changeMap(Map),5
"net.sf.freecol.common.model.Game.checkIntegrity(boolean, LogBuilder)",3
"net.sf.freecol.common.model.Game.checkOwners(Ownable, Player)",9
net.sf.freecol.common.model.Game.copyIn(T),3
net.sf.freecol.common.model.Game.equals(Object),3
net.sf.freecol.common.model.Game.findFreeColLocation(String),10
net.sf.freecol.common.model.Game.getAge(),5
net.sf.freecol.common.model.Game.getAllColonies(Player),6
net.sf.freecol.common.model.Game.getAllColoniesList(Player),6
net.sf.freecol.common.model.Game.getClientPlayer(),6
net.sf.freecol.common.model.Game.getClientUserName(),5
net.sf.freecol.common.model.Game.getCombatModel(),5
net.sf.freecol.common.model.Game.getCurrentPlayer(),5
net.sf.freecol.common.model.Game.getDifficultyOptionGroup(),5
net.sf.freecol.common.model.Game.getFirstPlayer(),5
net.sf.freecol.common.model.Game.getFreeColGameObject(String),6
"net.sf.freecol.common.model.Game.getFreeColGameObject(String, Class<T>)",9
net.sf.freecol.common.model.Game.getFreeColGameObjectIterator(),18
net.sf.freecol.common.model.Game.getFreeColGameObjectList(),5
net.sf.freecol.common.model.Game.getGameOptions(),5
net.sf.freecol.common.model.Game.getInitialActiveUnit(),5
net.sf.freecol.common.model.Game.getInitialActiveUnitId(),5
net.sf.freecol.common.model.Game.getLiveEuropeanPlayerList(Player...),7
net.sf.freecol.common.model.Game.getLiveEuropeanPlayers(Player...),7
net.sf.freecol.common.model.Game.getLiveNativePlayerList(Player...),6
net.sf.freecol.common.model.Game.getLiveNativePlayers(Player...),6
net.sf.freecol.common.model.Game.getLivePlayerList(Player...),7
net.sf.freecol.common.model.Game.getLivePlayers(Player...),8
net.sf.freecol.common.model.Game.getLocationClass(String),6
net.sf.freecol.common.model.Game.getMap(),5
net.sf.freecol.common.model.Game.getMapGeneratorOptions(),6
net.sf.freecol.common.model.Game.getMessageDisplay(ModelMessage),7
net.sf.freecol.common.model.Game.getMessageSource(ModelMessage),6
net.sf.freecol.common.model.Game.getNationOptions(),5
net.sf.freecol.common.model.Game.getNextId(),5
net.sf.freecol.common.model.Game.getNextPlayer(),5
net.sf.freecol.common.model.Game.getPlayer(Predicate<? super Player>),6
net.sf.freecol.common.model.Game.getPlayerAfter(Player),10
net.sf.freecol.common.model.Game.getPlayerByName(String),6
net.sf.freecol.common.model.Game.getPlayerByNation(Nation),7
net.sf.freecol.common.model.Game.getPlayerByNationId(String),7
net.sf.freecol.common.model.Game.getPlayerList(Predicate<? super Player>),6
net.sf.freecol.common.model.Game.getPlayers(Predicate<? super Player>),6
net.sf.freecol.common.model.Game.getSettlementByName(String),8
net.sf.freecol.common.model.Game.getSpanishSuccession(),5
net.sf.freecol.common.model.Game.getSpecification(),3
net.sf.freecol.common.model.Game.getStatistics(),5
net.sf.freecol.common.model.Game.getTurn(),5
net.sf.freecol.common.model.Game.getUUID(),6
net.sf.freecol.common.model.Game.getUnknownEnemy(),5
net.sf.freecol.common.model.Game.getVacantNation(),5
net.sf.freecol.common.model.Game.getVacantNations(),5
net.sf.freecol.common.model.Game.getXMLTagName(),3
net.sf.freecol.common.model.Game.hashCode(),3
net.sf.freecol.common.model.Game.isInClient(),5
net.sf.freecol.common.model.Game.isInRevengeMode(),5
net.sf.freecol.common.model.Game.isInServer(),5
"net.sf.freecol.common.model.Game.newInstance(Game, Class<T>, boolean)",9
"net.sf.freecol.common.model.Game.notifyOwnerChanged(FreeColGameObject, Player, Player)",7
net.sf.freecol.common.model.Game.notifyRemoveFreeColGameObject(String),5
"net.sf.freecol.common.model.Game.notifySetFreeColGameObject(String, FreeColGameObject)",6
net.sf.freecol.common.model.Game.preGameUpdate(Game),15
net.sf.freecol.common.model.Game.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Game.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Game.readChildren(FreeColXMLReader),3
"net.sf.freecol.common.model.Game.removeFreeColGameObject(String, String)",8
net.sf.freecol.common.model.Game.removePlayer(Player),9
net.sf.freecol.common.model.Game.setCurrentPlayer(Player),5
"net.sf.freecol.common.model.Game.setFreeColGameObject(String, FreeColGameObject)",6
net.sf.freecol.common.model.Game.setFreeColGameObjectListener(FreeColGameObjectListener),5
net.sf.freecol.common.model.Game.setGameOptions(OptionGroup),5
net.sf.freecol.common.model.Game.setInitialActiveUnitId(String),5
net.sf.freecol.common.model.Game.setMap(Map),6
net.sf.freecol.common.model.Game.setMapGeneratorOptions(OptionGroup),6
net.sf.freecol.common.model.Game.setNationOptions(NationOptions),7
net.sf.freecol.common.model.Game.setPlayers(List<Player>),5
net.sf.freecol.common.model.Game.setSpanishSuccession(boolean),5
net.sf.freecol.common.model.Game.setSpecification(Specification),3
net.sf.freecol.common.model.Game.setTurn(Turn),5
net.sf.freecol.common.model.Game.setUnknownEnemy(Player),5
net.sf.freecol.common.model.Game.sortPlayers(Comparator<Player>),5
"net.sf.freecol.common.model.Game.unserialize(String, Class<T>)",10
"net.sf.freecol.common.model.Game.update(Collection<T>, boolean)",8
"net.sf.freecol.common.model.Game.update(T, Class<T>, boolean)",10
"net.sf.freecol.common.model.Game.update(T, boolean)",8
net.sf.freecol.common.model.Game.updateLocationRef(Location),6
net.sf.freecol.common.model.Game.updateRef(Collection<T>),8
net.sf.freecol.common.model.Game.updateRef(T),7
"net.sf.freecol.common.model.Game.updateRef(T, Class<T>)",8
net.sf.freecol.common.model.Game.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Game.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.GameTest.testAddPlayer(),0
net.sf.freecol.common.model.GameTest.testGame(),0
net.sf.freecol.common.model.GameTest.testTurn(),0
"net.sf.freecol.common.model.GoldTradeItem.GoldTradeItem(Game, FreeColXMLReader)",7
"net.sf.freecol.common.model.GoldTradeItem.GoldTradeItem(Game, Player, Player, int)",8
net.sf.freecol.common.model.GoldTradeItem.copyIn(T),3
net.sf.freecol.common.model.GoldTradeItem.equals(Object),3
net.sf.freecol.common.model.GoldTradeItem.evaluateFor(Player),3
net.sf.freecol.common.model.GoldTradeItem.getGold(),3
net.sf.freecol.common.model.GoldTradeItem.getLabel(),3
net.sf.freecol.common.model.GoldTradeItem.getXMLTagName(),3
net.sf.freecol.common.model.GoldTradeItem.hashCode(),3
net.sf.freecol.common.model.GoldTradeItem.isUnique(),3
net.sf.freecol.common.model.GoldTradeItem.isValid(),3
net.sf.freecol.common.model.GoldTradeItem.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.GoldTradeItem.setGold(int),3
net.sf.freecol.common.model.GoldTradeItem.toString(),3
net.sf.freecol.common.model.GoldTradeItem.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Goods.Goods(Game),5
"net.sf.freecol.common.model.Goods.Goods(Game, FreeColXMLReader)",7
"net.sf.freecol.common.model.Goods.Goods(Game, Location, GoodsType, int)",13
"net.sf.freecol.common.model.Goods.Goods(Game, String)",9
net.sf.freecol.common.model.Goods.adjustAmount(),4
net.sf.freecol.common.model.Goods.copyIn(T),3
net.sf.freecol.common.model.Goods.equals(Object),3
net.sf.freecol.common.model.Goods.getDisplayObject(),3
net.sf.freecol.common.model.Goods.getGame(),3
net.sf.freecol.common.model.Goods.getLocation(),3
net.sf.freecol.common.model.Goods.getOwner(),3
net.sf.freecol.common.model.Goods.getSpaceTaken(),3
net.sf.freecol.common.model.Goods.getSpecification(),3
net.sf.freecol.common.model.Goods.getTile(),3
net.sf.freecol.common.model.Goods.getXMLTagName(),3
net.sf.freecol.common.model.Goods.hashCode(),3
net.sf.freecol.common.model.Goods.isInEurope(),3
net.sf.freecol.common.model.Goods.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Goods.setGame(Game),3
net.sf.freecol.common.model.Goods.setLocation(Location),3
net.sf.freecol.common.model.Goods.setOwner(Player),3
net.sf.freecol.common.model.Goods.setSpecification(Specification),3
net.sf.freecol.common.model.Goods.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.GoodsContainer.GoodsContainer(Game, Location)",7
"net.sf.freecol.common.model.GoodsContainer.GoodsContainer(Game, String)",6
"net.sf.freecol.common.model.GoodsContainer.addGoods(GoodsType, int)",9
net.sf.freecol.common.model.GoodsContainer.addGoods(T),7
net.sf.freecol.common.model.GoodsContainer.clearContainers(),3
net.sf.freecol.common.model.GoodsContainer.contains(T),8
net.sf.freecol.common.model.GoodsContainer.copyIn(T),3
net.sf.freecol.common.model.GoodsContainer.disposeResources(),3
net.sf.freecol.common.model.GoodsContainer.fireChanges(),6
net.sf.freecol.common.model.GoodsContainer.getCompactGoodsList(),6
net.sf.freecol.common.model.GoodsContainer.getGoodsCount(GoodsType),6
net.sf.freecol.common.model.GoodsContainer.getGoodsList(),6
net.sf.freecol.common.model.GoodsContainer.getOldGoodsCount(GoodsType),7
net.sf.freecol.common.model.GoodsContainer.getOldStoredGoods(),5
net.sf.freecol.common.model.GoodsContainer.getOwner(),3
net.sf.freecol.common.model.GoodsContainer.getParent(),5
net.sf.freecol.common.model.GoodsContainer.getSpaceTaken(),6
net.sf.freecol.common.model.GoodsContainer.getStoredGoods(),5
net.sf.freecol.common.model.GoodsContainer.getXMLTagName(),3
net.sf.freecol.common.model.GoodsContainer.hasChanged(),6
net.sf.freecol.common.model.GoodsContainer.hasReachedCapacity(int),7
"net.sf.freecol.common.model.GoodsContainer.moveGoods(GoodsContainer, GoodsType, int, GoodsContainer)",8
net.sf.freecol.common.model.GoodsContainer.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.GoodsContainer.readChildren(FreeColXMLReader),3
"net.sf.freecol.common.model.GoodsContainer.readStorage(FreeColXMLReader, Map<GoodsType, Integer>)",8
net.sf.freecol.common.model.GoodsContainer.removeAbove(int),6
net.sf.freecol.common.model.GoodsContainer.removeAll(),3
net.sf.freecol.common.model.GoodsContainer.removeGoods(GoodsType),6
"net.sf.freecol.common.model.GoodsContainer.removeGoods(GoodsType, int)",8
net.sf.freecol.common.model.GoodsContainer.removeGoods(T),7
net.sf.freecol.common.model.GoodsContainer.restoreState(),4
net.sf.freecol.common.model.GoodsContainer.saveState(),4
"net.sf.freecol.common.model.GoodsContainer.setAmount(GoodsType, int)",6
net.sf.freecol.common.model.GoodsContainer.setLocation(Location),5
"net.sf.freecol.common.model.GoodsContainer.setOldStoredGoods(Map<GoodsType, Integer>)",5
net.sf.freecol.common.model.GoodsContainer.setOwner(Player),3
"net.sf.freecol.common.model.GoodsContainer.setStoredGoods(Map<GoodsType, Integer>)",5
net.sf.freecol.common.model.GoodsContainer.toString(),3
net.sf.freecol.common.model.GoodsContainer.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.GoodsContainer.writeStorage(FreeColXMLWriter, String, Map<GoodsType, Integer>)",9
net.sf.freecol.common.model.GoodsContainerTest.testContainer(),0
net.sf.freecol.common.model.GoodsLocation.GoodsLocation(Game),5
"net.sf.freecol.common.model.GoodsLocation.GoodsLocation(Game, String)",6
net.sf.freecol.common.model.GoodsLocation.add(Locatable),3
net.sf.freecol.common.model.GoodsLocation.addGoods(AbstractGoods),6
"net.sf.freecol.common.model.GoodsLocation.addGoods(GoodsType, int)",7
net.sf.freecol.common.model.GoodsLocation.addGoods(List<AbstractGoods>),6
net.sf.freecol.common.model.GoodsLocation.contains(Locatable),3
net.sf.freecol.common.model.GoodsLocation.containsGoods(List<AbstractGoods>),7
net.sf.freecol.common.model.GoodsLocation.copyIn(T),3
net.sf.freecol.common.model.GoodsLocation.getCompactGoodsList(),7
net.sf.freecol.common.model.GoodsLocation.getDisposables(),3
net.sf.freecol.common.model.GoodsLocation.getGoodsContainer(),3
net.sf.freecol.common.model.GoodsLocation.getGoodsCount(GoodsType),6
net.sf.freecol.common.model.GoodsLocation.getGoodsList(),7
net.sf.freecol.common.model.GoodsLocation.getNoAddReason(Locatable),3
"net.sf.freecol.common.model.GoodsLocation.moveGoods(GoodsLocation, GoodsType, int, GoodsLocation)",8
net.sf.freecol.common.model.GoodsLocation.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.GoodsLocation.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.GoodsLocation.remove(Locatable),3
net.sf.freecol.common.model.GoodsLocation.removeAll(),3
net.sf.freecol.common.model.GoodsLocation.removeGoods(AbstractGoods),7
net.sf.freecol.common.model.GoodsLocation.removeGoods(GoodsType),6
"net.sf.freecol.common.model.GoodsLocation.removeGoods(GoodsType, int)",8
net.sf.freecol.common.model.GoodsLocation.setGoodsContainer(GoodsContainer),0
net.sf.freecol.common.model.GoodsLocation.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.GoodsTest.dutch(),0
net.sf.freecol.common.model.GoodsTest.testAdjustAmount(),0
net.sf.freecol.common.model.GoodsTest.testBuildingMaterials(),0
net.sf.freecol.common.model.GoodsTest.testGetInputType(),0
net.sf.freecol.common.model.GoodsTest.testGetName(),0
net.sf.freecol.common.model.GoodsTest.testGetOutputType(),0
net.sf.freecol.common.model.GoodsTest.testGetTakeSpace(),0
net.sf.freecol.common.model.GoodsTest.testGoodsGameLocationIntInt(),0
net.sf.freecol.common.model.GoodsTest.testIsFarmedGoods(),0
net.sf.freecol.common.model.GoodsTest.testMilitaryGoods(),0
net.sf.freecol.common.model.GoodsTest.testProductionChain(),0
net.sf.freecol.common.model.GoodsTest.testSetGetAmount(),0
net.sf.freecol.common.model.GoodsTest.testSetOwner(),0
net.sf.freecol.common.model.GoodsTest.testToString(),0
net.sf.freecol.common.model.GoodsTest.testTradeGoods(),0
"net.sf.freecol.common.model.GoodsTradeItem.GoodsTradeItem(Game, FreeColXMLReader)",7
"net.sf.freecol.common.model.GoodsTradeItem.GoodsTradeItem(Game, Player, Player, Goods)",8
net.sf.freecol.common.model.GoodsTradeItem.copyIn(T),3
net.sf.freecol.common.model.GoodsTradeItem.equals(Object),3
net.sf.freecol.common.model.GoodsTradeItem.evaluateFor(Player),3
net.sf.freecol.common.model.GoodsTradeItem.getGoods(),3
net.sf.freecol.common.model.GoodsTradeItem.getLabel(),3
net.sf.freecol.common.model.GoodsTradeItem.getXMLTagName(),3
net.sf.freecol.common.model.GoodsTradeItem.hashCode(),3
net.sf.freecol.common.model.GoodsTradeItem.isUnique(),3
net.sf.freecol.common.model.GoodsTradeItem.isValid(),3
net.sf.freecol.common.model.GoodsTradeItem.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.GoodsTradeItem.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.GoodsTradeItem.setGoods(Goods),3
net.sf.freecol.common.model.GoodsTradeItem.toString(),3
net.sf.freecol.common.model.GoodsTradeItem.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.GoodsType.GoodsType(String, Specification)",6
net.sf.freecol.common.model.GoodsType.copyIn(T),3
net.sf.freecol.common.model.GoodsType.getBreedingNumber(),5
net.sf.freecol.common.model.GoodsType.getEquivalentTypes(),7
net.sf.freecol.common.model.GoodsType.getInitialAmount(),5
net.sf.freecol.common.model.GoodsType.getInitialBuyPrice(),5
net.sf.freecol.common.model.GoodsType.getInitialSellPrice(),9
net.sf.freecol.common.model.GoodsType.getInputType(),5
net.sf.freecol.common.model.GoodsType.getLabel(),5
net.sf.freecol.common.model.GoodsType.getLowProductionThreshold(),5
net.sf.freecol.common.model.GoodsType.getMilitary(),5
net.sf.freecol.common.model.GoodsType.getOutputType(),5
net.sf.freecol.common.model.GoodsType.getPrice(),5
net.sf.freecol.common.model.GoodsType.getPriceDifference(),6
net.sf.freecol.common.model.GoodsType.getProductionChain(),12
net.sf.freecol.common.model.GoodsType.getProductionWeight(),5
net.sf.freecol.common.model.GoodsType.getRank(),5
net.sf.freecol.common.model.GoodsType.getStoredAs(),5
net.sf.freecol.common.model.GoodsType.getWorkingAsKey(),5
net.sf.freecol.common.model.GoodsType.getXMLTagName(),3
net.sf.freecol.common.model.GoodsType.getZeroProductionFactor(),5
net.sf.freecol.common.model.GoodsType.isBreedable(),5
net.sf.freecol.common.model.GoodsType.isBuildingMaterial(),6
net.sf.freecol.common.model.GoodsType.isFarmed(),5
net.sf.freecol.common.model.GoodsType.isFoodType(),5
net.sf.freecol.common.model.GoodsType.isImmigrationType(),5
net.sf.freecol.common.model.GoodsType.isLibertyType(),5
net.sf.freecol.common.model.GoodsType.isNewWorldGoodsType(),5
net.sf.freecol.common.model.GoodsType.isNewWorldLuxuryType(),5
net.sf.freecol.common.model.GoodsType.isRawBuildingMaterial(),7
net.sf.freecol.common.model.GoodsType.isRawMaterial(),5
net.sf.freecol.common.model.GoodsType.isRawMaterialForUnstorableBuildingMaterial(),7
net.sf.freecol.common.model.GoodsType.isRefined(),5
net.sf.freecol.common.model.GoodsType.isStorable(),5
net.sf.freecol.common.model.GoodsType.isStoredAs(),5
net.sf.freecol.common.model.GoodsType.isTradeGoods(),5
net.sf.freecol.common.model.GoodsType.limitIgnored(),5
net.sf.freecol.common.model.GoodsType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.GoodsType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.GoodsType.setDerivedAttributes(Specification),18
net.sf.freecol.common.model.GoodsType.setMilitary(),0
net.sf.freecol.common.model.GoodsType.setPrice(int),0
net.sf.freecol.common.model.GoodsType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.GoodsType.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.HighScore.HighScore(),3
net.sf.freecol.common.model.HighScore.HighScore(FreeColXMLReader),6
net.sf.freecol.common.model.HighScore.HighScore(Player),7
net.sf.freecol.common.model.HighScore.ScoreLevel.ScoreLevel(int),0
net.sf.freecol.common.model.HighScore.ScoreLevel.getMinimumScore(),0
"net.sf.freecol.common.model.HighScore.checkHighScore(HighScore, List<HighScore>)",7
net.sf.freecol.common.model.HighScore.copyIn(T),3
net.sf.freecol.common.model.HighScore.getColonyCount(),5
net.sf.freecol.common.model.HighScore.getDate(),5
net.sf.freecol.common.model.HighScore.getDateString(),5
net.sf.freecol.common.model.HighScore.getDifficulty(),5
net.sf.freecol.common.model.HighScore.getGameUUID(),5
net.sf.freecol.common.model.HighScore.getIndependenceTurn(),5
net.sf.freecol.common.model.HighScore.getLevel(),5
net.sf.freecol.common.model.HighScore.getNationId(),5
net.sf.freecol.common.model.HighScore.getNationName(),5
net.sf.freecol.common.model.HighScore.getNationTypeId(),5
net.sf.freecol.common.model.HighScore.getNewLandName(),5
net.sf.freecol.common.model.HighScore.getOldNationNameKey(),5
net.sf.freecol.common.model.HighScore.getPlayerName(),5
net.sf.freecol.common.model.HighScore.getRetirementTurn(),5
net.sf.freecol.common.model.HighScore.getScore(),5
net.sf.freecol.common.model.HighScore.getUnitCount(),5
net.sf.freecol.common.model.HighScore.getXMLTagName(),3
net.sf.freecol.common.model.HighScore.loadHighScores(),5
net.sf.freecol.common.model.HighScore.newHighScore(Player),7
net.sf.freecol.common.model.HighScore.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.HighScore.saveHighScores(List<HighScore>),6
net.sf.freecol.common.model.HighScore.tidyScores(List<HighScore>),6
net.sf.freecol.common.model.HighScore.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.HighScoreTest.testAddHighScore(),0
net.sf.freecol.common.model.HighSeas.HighSeas(Game),5
"net.sf.freecol.common.model.HighSeas.HighSeas(Game, String)",6
net.sf.freecol.common.model.HighSeas.addDestination(Location),5
net.sf.freecol.common.model.HighSeas.copyIn(T),3
net.sf.freecol.common.model.HighSeas.destinationsToString(),5
net.sf.freecol.common.model.HighSeas.getDestinations(),5
net.sf.freecol.common.model.HighSeas.getLinkTarget(Player),3
net.sf.freecol.common.model.HighSeas.getLocationLabel(),3
net.sf.freecol.common.model.HighSeas.getNoAddReason(Locatable),3
net.sf.freecol.common.model.HighSeas.getRank(),3
net.sf.freecol.common.model.HighSeas.getXMLTagName(),3
net.sf.freecol.common.model.HighSeas.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.HighSeas.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.HighSeas.removeDestination(Location),5
net.sf.freecol.common.model.HighSeas.setDestinations(List<Location>),5
net.sf.freecol.common.model.HighSeas.toShortString(),3
net.sf.freecol.common.model.HighSeas.toString(),3
net.sf.freecol.common.model.HighSeas.up(),3
net.sf.freecol.common.model.HighSeas.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.HighSeasTest.test(),0
net.sf.freecol.common.model.HistoryEvent.HistoryEvent(),3
net.sf.freecol.common.model.HistoryEvent.HistoryEvent(FreeColXMLReader),6
"net.sf.freecol.common.model.HistoryEvent.HistoryEvent(Turn, HistoryEventType, Player)",8
net.sf.freecol.common.model.HistoryEvent.HistoryEventType.getDescriptionKey(),0
net.sf.freecol.common.model.HistoryEvent.HistoryEventType.getKey(),5
net.sf.freecol.common.model.HistoryEvent.HistoryEventType.getNameKey(),3
net.sf.freecol.common.model.HistoryEvent.copyIn(T),3
net.sf.freecol.common.model.HistoryEvent.equals(Object),3
net.sf.freecol.common.model.HistoryEvent.getEventType(),5
net.sf.freecol.common.model.HistoryEvent.getEventTypeFromStance(Stance),6
net.sf.freecol.common.model.HistoryEvent.getPlayerId(),5
net.sf.freecol.common.model.HistoryEvent.getScore(),5
net.sf.freecol.common.model.HistoryEvent.getTurn(),5
net.sf.freecol.common.model.HistoryEvent.getXMLTagName(),3
net.sf.freecol.common.model.HistoryEvent.hashCode(),3
net.sf.freecol.common.model.HistoryEvent.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.HistoryEvent.setPlayerId(String),5
net.sf.freecol.common.model.HistoryEvent.setScore(int),5
net.sf.freecol.common.model.HistoryEvent.toString(),3
net.sf.freecol.common.model.HistoryEvent.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.HitpointsCombatModel.HitpointsCombatModel(),3
"net.sf.freecol.common.model.HitpointsCombatModel.generateAttackResult(Random, FreeColGameObject, FreeColGameObject)",9
"net.sf.freecol.common.model.InciteTradeItem.InciteTradeItem(Game, FreeColXMLReader)",7
"net.sf.freecol.common.model.InciteTradeItem.InciteTradeItem(Game, Player, Player, Player)",8
net.sf.freecol.common.model.InciteTradeItem.copyIn(T),3
net.sf.freecol.common.model.InciteTradeItem.equals(Object),3
net.sf.freecol.common.model.InciteTradeItem.evaluateFor(Player),3
net.sf.freecol.common.model.InciteTradeItem.getLabel(),3
net.sf.freecol.common.model.InciteTradeItem.getVictim(),3
net.sf.freecol.common.model.InciteTradeItem.getXMLTagName(),3
net.sf.freecol.common.model.InciteTradeItem.hashCode(),3
net.sf.freecol.common.model.InciteTradeItem.isUnique(),3
net.sf.freecol.common.model.InciteTradeItem.isValid(),3
net.sf.freecol.common.model.InciteTradeItem.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.InciteTradeItem.toString(),3
net.sf.freecol.common.model.InciteTradeItem.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.IndianNationType.IndianNationType(String, Specification)",6
net.sf.freecol.common.model.IndianNationType.addRegion(String),5
"net.sf.freecol.common.model.IndianNationType.addSkill(UnitType, int)",6
net.sf.freecol.common.model.IndianNationType.copyIn(T),3
net.sf.freecol.common.model.IndianNationType.generateSkillsForTile(Tile),7
net.sf.freecol.common.model.IndianNationType.getRegions(),5
net.sf.freecol.common.model.IndianNationType.getSettlementTypeKey(boolean),6
net.sf.freecol.common.model.IndianNationType.getSkills(),5
net.sf.freecol.common.model.IndianNationType.getXMLTagName(),3
net.sf.freecol.common.model.IndianNationType.isEuropean(),5
net.sf.freecol.common.model.IndianNationType.isIndian(),5
net.sf.freecol.common.model.IndianNationType.isREF(),5
net.sf.freecol.common.model.IndianNationType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.IndianNationType.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.IndianNationType.setRegions(List<String>),5
net.sf.freecol.common.model.IndianNationType.setSkills(List<RandomChoice<UnitType>>),5
net.sf.freecol.common.model.IndianNationType.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.IndianSettlement.IndianSettlement(Game, Player, String, Tile)",8
"net.sf.freecol.common.model.IndianSettlement.IndianSettlement(Game, String)",8
net.sf.freecol.common.model.IndianSettlement.add(Locatable),3
net.sf.freecol.common.model.IndianSettlement.addOwnedUnit(Unit),6
net.sf.freecol.common.model.IndianSettlement.addRandomGoods(Random),6
net.sf.freecol.common.model.IndianSettlement.allowContact(Unit),10
"net.sf.freecol.common.model.IndianSettlement.calculateSettlementValue(int, Unit)",9
"net.sf.freecol.common.model.IndianSettlement.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.IndianSettlement.clearAlarm(),3
net.sf.freecol.common.model.IndianSettlement.clearContactLevels(),3
net.sf.freecol.common.model.IndianSettlement.clearOwnedUnits(),3
net.sf.freecol.common.model.IndianSettlement.copyIn(T),3
net.sf.freecol.common.model.IndianSettlement.disposeResources(),3
net.sf.freecol.common.model.IndianSettlement.emptyWantedGoods(),5
net.sf.freecol.common.model.IndianSettlement.getAlarm(),5
net.sf.freecol.common.model.IndianSettlement.getAlarm(Player),7
net.sf.freecol.common.model.IndianSettlement.getAlarmLevelKey(Player),7
net.sf.freecol.common.model.IndianSettlement.getAlarmLevelLabel(Player),3
net.sf.freecol.common.model.IndianSettlement.getAvailableGoodsCount(GoodsType),3
net.sf.freecol.common.model.IndianSettlement.getContactLevel(Player),6
net.sf.freecol.common.model.IndianSettlement.getConvertProgress(),5
net.sf.freecol.common.model.IndianSettlement.getDefenceRatio(),3
net.sf.freecol.common.model.IndianSettlement.getDefendingUnit(Unit),3
"net.sf.freecol.common.model.IndianSettlement.getExportAmount(GoodsType, int)",3
net.sf.freecol.common.model.IndianSettlement.getGoodsCapacity(),3
net.sf.freecol.common.model.IndianSettlement.getGoodsForSale(),5
"net.sf.freecol.common.model.IndianSettlement.getImportAmount(GoodsType, int)",3
net.sf.freecol.common.model.IndianSettlement.getIndianSettlement(),3
net.sf.freecol.common.model.IndianSettlement.getLastTribute(),5
net.sf.freecol.common.model.IndianSettlement.getLearnableSkill(),5
net.sf.freecol.common.model.IndianSettlement.getLearnableSkillLabel(boolean),7
net.sf.freecol.common.model.IndianSettlement.getLocationLabelFor(Player),3
net.sf.freecol.common.model.IndianSettlement.getLocationName(TradeLocation),3
net.sf.freecol.common.model.IndianSettlement.getMaximumProduction(GoodsType),7
"net.sf.freecol.common.model.IndianSettlement.getMilitaryGoodsPriceToBuy(GoodsType, int)",7
net.sf.freecol.common.model.IndianSettlement.getMissionary(),5
net.sf.freecol.common.model.IndianSettlement.getMissionaryLineOfSight(),5
net.sf.freecol.common.model.IndianSettlement.getMissionaryVisibleTiles(),6
net.sf.freecol.common.model.IndianSettlement.getMostHated(),5
net.sf.freecol.common.model.IndianSettlement.getMostHatedLabel(boolean),8
"net.sf.freecol.common.model.IndianSettlement.getNormalGoodsPriceToBuy(GoodsType, int)",7
net.sf.freecol.common.model.IndianSettlement.getOwnedUnitList(),5
net.sf.freecol.common.model.IndianSettlement.getPlunderRange(Unit),3
"net.sf.freecol.common.model.IndianSettlement.getPriceToBuy(GoodsType, int)",16
net.sf.freecol.common.model.IndianSettlement.getPriceToBuy(T),12
"net.sf.freecol.common.model.IndianSettlement.getPriceToSell(GoodsType, int)",12
net.sf.freecol.common.model.IndianSettlement.getPriceToSell(T),12
net.sf.freecol.common.model.IndianSettlement.getRandomGift(Random),6
net.sf.freecol.common.model.IndianSettlement.getRequiredDefenders(),6
net.sf.freecol.common.model.IndianSettlement.getSellGoods(Unit),9
net.sf.freecol.common.model.IndianSettlement.getSonsOfLiberty(),3
net.sf.freecol.common.model.IndianSettlement.getTotalProductionOf(GoodsType),3
net.sf.freecol.common.model.IndianSettlement.getUpkeep(),3
net.sf.freecol.common.model.IndianSettlement.getWantedGoods(),5
net.sf.freecol.common.model.IndianSettlement.getWantedGoods(int),7
net.sf.freecol.common.model.IndianSettlement.getWantedGoodsAmount(GoodsType),7
net.sf.freecol.common.model.IndianSettlement.getWantedGoodsCount(),6
"net.sf.freecol.common.model.IndianSettlement.getWantedGoodsLabel(int, Player)",8
net.sf.freecol.common.model.IndianSettlement.getXMLTagName(),3
net.sf.freecol.common.model.IndianSettlement.goodsToMake(),9
net.sf.freecol.common.model.IndianSettlement.hasAnyScouted(),5
net.sf.freecol.common.model.IndianSettlement.hasContacted(Player),3
net.sf.freecol.common.model.IndianSettlement.hasMissionary(),5
net.sf.freecol.common.model.IndianSettlement.hasMissionary(Player),6
net.sf.freecol.common.model.IndianSettlement.hasScouted(Player),7
net.sf.freecol.common.model.IndianSettlement.hasVisited(Player),6
net.sf.freecol.common.model.IndianSettlement.initializeAlarm(Player),6
net.sf.freecol.common.model.IndianSettlement.invalidateCache(),3
net.sf.freecol.common.model.IndianSettlement.isBadlyDefended(),3
net.sf.freecol.common.model.IndianSettlement.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.IndianSettlement.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.IndianSettlement.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.IndianSettlement.removeOwnedUnit(Unit),9
"net.sf.freecol.common.model.IndianSettlement.setAlarm(Map<Player, Tension>)",5
"net.sf.freecol.common.model.IndianSettlement.setAlarm(Player, Tension)",8
"net.sf.freecol.common.model.IndianSettlement.setContactLevel(Player, ContactLevel)",6
"net.sf.freecol.common.model.IndianSettlement.setContactLevels(Map<Player, ContactLevel>)",5
net.sf.freecol.common.model.IndianSettlement.setContacted(Player),10
net.sf.freecol.common.model.IndianSettlement.setConvertProgress(int),5
net.sf.freecol.common.model.IndianSettlement.setGoodsForSale(List<Goods>),5
net.sf.freecol.common.model.IndianSettlement.setLastTribute(int),5
net.sf.freecol.common.model.IndianSettlement.setLearnableSkill(UnitType),5
net.sf.freecol.common.model.IndianSettlement.setMissionary(Unit),9
net.sf.freecol.common.model.IndianSettlement.setMostHated(Player),7
net.sf.freecol.common.model.IndianSettlement.setOwnedUnitList(List<Unit>),5
net.sf.freecol.common.model.IndianSettlement.setScouted(Player),8
net.sf.freecol.common.model.IndianSettlement.setVisited(Player),8
net.sf.freecol.common.model.IndianSettlement.setWantedGoods(List<GoodsType>),5
"net.sf.freecol.common.model.IndianSettlement.setWantedGoods(int, GoodsType)",6
net.sf.freecol.common.model.IndianSettlement.toShortString(),3
net.sf.freecol.common.model.IndianSettlement.toString(),3
net.sf.freecol.common.model.IndianSettlement.tradeGoodsWithSettlement(IndianSettlement),5
net.sf.freecol.common.model.IndianSettlement.up(),3
net.sf.freecol.common.model.IndianSettlement.updateWantedGoods(),7
net.sf.freecol.common.model.IndianSettlement.validWantedGoodsIndex(int),6
net.sf.freecol.common.model.IndianSettlement.willSell(GoodsType),7
net.sf.freecol.common.model.IndianSettlement.worthScouting(Player),8
net.sf.freecol.common.model.IndianSettlement.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.IndianSettlement.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.IndianSettlementTest.testAutomaticEquipBraves(),0
net.sf.freecol.common.model.IndianSettlementTest.testSettlementDoesNotOwnWaterTiles(),0
net.sf.freecol.common.model.IndianSettlementTest.testTradeGoodsWithSetlement(),0
net.sf.freecol.common.model.IndividualFatherTest.testBolivar(),0
net.sf.freecol.common.model.IndividualFatherTest.testBrebeuf(),0
net.sf.freecol.common.model.IndividualFatherTest.testBrewster(),0
net.sf.freecol.common.model.IndividualFatherTest.testCortes(),0
net.sf.freecol.common.model.IndividualFatherTest.testDeLasCasas(),0
net.sf.freecol.common.model.IndividualFatherTest.testDeWitt(),0
net.sf.freecol.common.model.IndividualFatherTest.testJefferson(),0
net.sf.freecol.common.model.IndividualFatherTest.testMinuit(),0
net.sf.freecol.common.model.IndividualFatherTest.testPaine(),0
net.sf.freecol.common.model.IndividualFatherTest.testRevere(),0
net.sf.freecol.common.model.IndividualFatherTest.testStuyvesant(),0
"net.sf.freecol.common.model.LandMap.LandMap(Map, RandomIntCache)",6
"net.sf.freecol.common.model.LandMap.LandMap(OptionGroup, RandomIntCache)",7
"net.sf.freecol.common.model.LandMap.LandMap(int, int, RandomIntCache)",7
"net.sf.freecol.common.model.LandMap.addLandMass(int, int, int, int, int)",12
net.sf.freecol.common.model.LandMap.addPolarRegions(),6
net.sf.freecol.common.model.LandMap.cleanMap(),3
"net.sf.freecol.common.model.LandMap.createClassicLandMap(int, int)",6
"net.sf.freecol.common.model.LandMap.generate(int, int, int)",7
net.sf.freecol.common.model.LandMap.getHeight(),5
net.sf.freecol.common.model.LandMap.getWidth(),5
"net.sf.freecol.common.model.LandMap.growLand(int, int, int)",12
"net.sf.freecol.common.model.LandMap.hasAdjacentLand(int, int)",10
net.sf.freecol.common.model.LandMap.hasLand(),5
"net.sf.freecol.common.model.LandMap.isLand(int, int)",7
"net.sf.freecol.common.model.LandMap.isValid(int, int)",7
"net.sf.freecol.common.model.LandMap.newPositions(Position, int)",8
"net.sf.freecol.common.model.LandMap.setLand(int, int)",7
"net.sf.freecol.common.model.LandMap.setLand(int, int, int)",10
net.sf.freecol.common.model.LastSale.LastSale(),3
net.sf.freecol.common.model.LastSale.LastSale(FreeColXMLReader),6
"net.sf.freecol.common.model.LastSale.LastSale(Location, GoodsType, Turn, int)",8
"net.sf.freecol.common.model.LastSale.LastSale(String, Turn, int)",7
net.sf.freecol.common.model.LastSale.copyIn(T),3
net.sf.freecol.common.model.LastSale.getPrice(),5
net.sf.freecol.common.model.LastSale.getWhen(),5
net.sf.freecol.common.model.LastSale.getXMLTagName(),3
"net.sf.freecol.common.model.LastSale.makeKey(Location, GoodsType)",8
net.sf.freecol.common.model.LastSale.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.LastSale.toString(),3
net.sf.freecol.common.model.LastSale.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.Limit.Limit(FreeColXMLReader, Specification)",7
net.sf.freecol.common.model.Limit.Limit(Specification),5
"net.sf.freecol.common.model.Limit.Limit(String, Operand, Operator, Operand)",8
net.sf.freecol.common.model.Limit.appliesTo(FreeColObject),6
net.sf.freecol.common.model.Limit.copyIn(T),3
net.sf.freecol.common.model.Limit.evaluate(Game),6
"net.sf.freecol.common.model.Limit.evaluate(Integer, Integer)",7
net.sf.freecol.common.model.Limit.evaluate(Player),6
net.sf.freecol.common.model.Limit.evaluate(Settlement),6
net.sf.freecol.common.model.Limit.getLeftHandSide(),5
net.sf.freecol.common.model.Limit.getOperator(),5
net.sf.freecol.common.model.Limit.getRightHandSide(),5
net.sf.freecol.common.model.Limit.getXMLTagName(),3
net.sf.freecol.common.model.Limit.hasOperandType(OperandType),6
net.sf.freecol.common.model.Limit.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Limit.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Limit.setLeftHandSide(Operand),5
net.sf.freecol.common.model.Limit.setOperator(Operator),0
net.sf.freecol.common.model.Limit.setRightHandSide(Operand),5
net.sf.freecol.common.model.Limit.toString(),3
net.sf.freecol.common.model.Limit.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Limit.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.LimitTest.testIndependenceLimits(),0
net.sf.freecol.common.model.LimitTest.testOperand(),0
net.sf.freecol.common.model.LimitTest.testSuccessionLimits(),0
net.sf.freecol.common.model.LimitTest.testWagonTrainLimit(),0
net.sf.freecol.common.model.Location.getLocationImageKey(),5
net.sf.freecol.common.model.Location.rankOf(Location),6
net.sf.freecol.common.model.Location.upLoc(Location),6
"net.sf.freecol.common.model.LostCityRumour.LostCityRumour(Game, String)",6
"net.sf.freecol.common.model.LostCityRumour.LostCityRumour(Game, Tile)",6
"net.sf.freecol.common.model.LostCityRumour.LostCityRumour(Game, Tile, RumourType, String)",8
net.sf.freecol.common.model.LostCityRumour.RumourType.getAlternateDescriptionKey(String),0
net.sf.freecol.common.model.LostCityRumour.RumourType.getDescriptionKey(),0
net.sf.freecol.common.model.LostCityRumour.RumourType.getKey(),5
"net.sf.freecol.common.model.LostCityRumour.applyBonus(GoodsType, UnitType, int)",3
"net.sf.freecol.common.model.LostCityRumour.canProduce(GoodsType, UnitType)",3
"net.sf.freecol.common.model.LostCityRumour.checkIntegrity(boolean, LogBuilder)",3
"net.sf.freecol.common.model.LostCityRumour.chooseType(Unit, Random)",14
net.sf.freecol.common.model.LostCityRumour.copyIn(T),3
net.sf.freecol.common.model.LostCityRumour.getLayer(),3
net.sf.freecol.common.model.LostCityRumour.getName(),5
net.sf.freecol.common.model.LostCityRumour.getNameKey(),3
"net.sf.freecol.common.model.LostCityRumour.getNothingMessage(Player, boolean, Random)",8
"net.sf.freecol.common.model.LostCityRumour.getProductionModifiers(GoodsType, UnitType)",3
net.sf.freecol.common.model.LostCityRumour.getType(),5
net.sf.freecol.common.model.LostCityRumour.getXMLTagName(),3
net.sf.freecol.common.model.LostCityRumour.getZIndex(),3
net.sf.freecol.common.model.LostCityRumour.isComplete(),3
net.sf.freecol.common.model.LostCityRumour.isNatural(),3
net.sf.freecol.common.model.LostCityRumour.isTileTypeAllowed(TileType),3
net.sf.freecol.common.model.LostCityRumour.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.LostCityRumour.setType(RumourType),5
net.sf.freecol.common.model.LostCityRumour.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.Map.CircleIterator.CircleIterator(Tile, boolean, int)",7
net.sf.freecol.common.model.Map.CircleIterator.getCurrentRadius(),6
net.sf.freecol.common.model.Map.CircleIterator.hasNext(),3
net.sf.freecol.common.model.Map.CircleIterator.next(),3
net.sf.freecol.common.model.Map.CircleIterator.nextTile(),3
net.sf.freecol.common.model.Map.CircleIterator.remove(),3
"net.sf.freecol.common.model.Map.Map(Game, FreeColXMLReader)",7
"net.sf.freecol.common.model.Map.Map(Game, String)",8
"net.sf.freecol.common.model.Map.Map(Game, int, int)",7
"net.sf.freecol.common.model.Map.MoveCandidate.MoveCandidate(Unit, PathNode, Location, int, int, boolean, CostDecider)",12
"net.sf.freecol.common.model.Map.MoveCandidate.add(HashMap<String, PathNode>, PriorityQueue<PathNode>, HashMap<String, Integer>, SearchHeuristic)",8
net.sf.freecol.common.model.Map.MoveCandidate.canImprove(PathNode),6
net.sf.freecol.common.model.Map.MoveCandidate.embarkUnit(Unit),5
net.sf.freecol.common.model.Map.MoveCandidate.getCost(),5
"net.sf.freecol.common.model.Map.MoveCandidate.improve(HashMap<String, PathNode>, PriorityQueue<PathNode>, HashMap<String, Integer>, SearchHeuristic)",8
net.sf.freecol.common.model.Map.MoveCandidate.toString(),3
"net.sf.freecol.common.model.Map.Position.Position(Position, Direction)",7
net.sf.freecol.common.model.Map.Position.Position(Tile),6
"net.sf.freecol.common.model.Map.Position.Position(int, int)",7
net.sf.freecol.common.model.Map.Position.equals(Object),3
net.sf.freecol.common.model.Map.Position.getDirection(Position),6
net.sf.freecol.common.model.Map.Position.getDistance(Position),10
net.sf.freecol.common.model.Map.Position.getX(),5
"net.sf.freecol.common.model.Map.Position.getXYDistance(int, int, int, int)",13
net.sf.freecol.common.model.Map.Position.getY(),5
net.sf.freecol.common.model.Map.Position.hashCode(),3
"net.sf.freecol.common.model.Map.Position.isValid(int, int)",7
net.sf.freecol.common.model.Map.Position.toString(),3
net.sf.freecol.common.model.Map.add(Locatable),3
net.sf.freecol.common.model.Map.addRegion(Region),5
net.sf.freecol.common.model.Map.calculateLatitudePerRow(),3
net.sf.freecol.common.model.Map.canAdd(Locatable),3
"net.sf.freecol.common.model.Map.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.Map.clearRegions(),3
"net.sf.freecol.common.model.Map.collectStartingTiles(List<Tile>, List<Tile>)",10
net.sf.freecol.common.model.Map.contains(Locatable),3
net.sf.freecol.common.model.Map.copyIn(T),3
"net.sf.freecol.common.model.Map.findMapPath(Unit, Tile, Tile, Unit, CostDecider, LogBuilder)",15
"net.sf.freecol.common.model.Map.findPath(Unit, Location, Location, Unit, CostDecider, LogBuilder)",15
"net.sf.freecol.common.model.Map.findRealEnd(Unit, Location)",8
"net.sf.freecol.common.model.Map.finishPath(PathNode, Unit, LogBuilder)",7
net.sf.freecol.common.model.Map.fixupRegions(),3
"net.sf.freecol.common.model.Map.floodFill(int, int, int, boolean[][])",8
"net.sf.freecol.common.model.Map.floodFillBool(boolean[][], int, int)",10
"net.sf.freecol.common.model.Map.floodFillBool(boolean[][], int, int, int)",11
net.sf.freecol.common.model.Map.forEachTile(Consumer<Tile>),5
"net.sf.freecol.common.model.Map.forEachTile(Predicate<Tile>, Consumer<Tile>)",6
"net.sf.freecol.common.model.Map.forSubMap(int, int, int, int, Consumer<Tile>)",11
"net.sf.freecol.common.model.Map.getAdjacentTile(Tile, Direction)",8
"net.sf.freecol.common.model.Map.getAdjacentTile(int, int, Direction)",9
"net.sf.freecol.common.model.Map.getBestEntryPath(Unit, Tile, Unit, CostDecider)",11
"net.sf.freecol.common.model.Map.getBestEntryTile(Unit, Tile, Unit, CostDecider)",11
"net.sf.freecol.common.model.Map.getCircleIterator(Tile, boolean, int)",10
"net.sf.freecol.common.model.Map.getCircleTiles(Tile, boolean, int)",11
"net.sf.freecol.common.model.Map.getClosestTile(Tile, Collection<Tile>)",7
net.sf.freecol.common.model.Map.getColony(),3
"net.sf.freecol.common.model.Map.getDirection(Tile, Tile)",11
"net.sf.freecol.common.model.Map.getDistance(Tile, Tile)",7
net.sf.freecol.common.model.Map.getFixedRegions(),5
net.sf.freecol.common.model.Map.getGoodsContainer(),3
net.sf.freecol.common.model.Map.getHeight(),5
net.sf.freecol.common.model.Map.getIndianSettlement(),3
"net.sf.freecol.common.model.Map.getLandWithinDistance(int, int, int)",9
net.sf.freecol.common.model.Map.getLatitude(int),6
net.sf.freecol.common.model.Map.getLatitudePerRow(),5
net.sf.freecol.common.model.Map.getLayer(),5
net.sf.freecol.common.model.Map.getLocationImageKey(),3
net.sf.freecol.common.model.Map.getLocationLabel(),3
net.sf.freecol.common.model.Map.getLocationLabelFor(Player),3
net.sf.freecol.common.model.Map.getManhattenHeuristic(Tile),6
net.sf.freecol.common.model.Map.getMaximumLatitude(),5
net.sf.freecol.common.model.Map.getMinimumLatitude(),5
net.sf.freecol.common.model.Map.getRandomLandTile(Random),6
net.sf.freecol.common.model.Map.getRank(),3
net.sf.freecol.common.model.Map.getRegionByKey(String),7
net.sf.freecol.common.model.Map.getRegionByName(String),7
net.sf.freecol.common.model.Map.getRegions(),5
"net.sf.freecol.common.model.Map.getRoughDirection(Tile, Tile)",8
net.sf.freecol.common.model.Map.getRow(int),6
net.sf.freecol.common.model.Map.getSearchTrace(),5
net.sf.freecol.common.model.Map.getSettlement(),3
net.sf.freecol.common.model.Map.getShuffledTiles(Random),6
net.sf.freecol.common.model.Map.getTile(),5
net.sf.freecol.common.model.Map.getTile(Position),6
"net.sf.freecol.common.model.Map.getTile(int, int)",10
net.sf.freecol.common.model.Map.getTileList(Predicate<Tile>),6
net.sf.freecol.common.model.Map.getTileSet(Predicate<Tile>),6
net.sf.freecol.common.model.Map.getUnitCount(),3
net.sf.freecol.common.model.Map.getUnitList(),3
net.sf.freecol.common.model.Map.getUnits(),3
net.sf.freecol.common.model.Map.getWidth(),5
net.sf.freecol.common.model.Map.getXMLTagName(),3
"net.sf.freecol.common.model.Map.importTile(Tile, int, int, Layer)",9
"net.sf.freecol.common.model.Map.inBox(int, int, int, int)",10
net.sf.freecol.common.model.Map.initializeTraceSearch(),3
net.sf.freecol.common.model.Map.isPolar(Tile),6
"net.sf.freecol.common.model.Map.isSameContiguity(Location, Location)",8
"net.sf.freecol.common.model.Map.isSameLocation(Location, Location)",8
net.sf.freecol.common.model.Map.isValid(Position),6
"net.sf.freecol.common.model.Map.isValid(int, int)",7
"net.sf.freecol.common.model.Map.populateTiles(BiFunction<Integer, Integer, Tile>)",9
net.sf.freecol.common.model.Map.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Map.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Map.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Map.remove(Locatable),3
net.sf.freecol.common.model.Map.resetContiguity(),3
"net.sf.freecol.common.model.Map.resetHighSeas(int, int)",10
net.sf.freecol.common.model.Map.resetHighSeasCount(),14
net.sf.freecol.common.model.Map.resetLayers(),3
"net.sf.freecol.common.model.Map.scale(int, int)",15
"net.sf.freecol.common.model.Map.search(Unit, Location, GoalDecider, CostDecider, int, Unit, LogBuilder)",22
"net.sf.freecol.common.model.Map.searchCircle(Tile, GoalDecider, int)",11
"net.sf.freecol.common.model.Map.searchMap(Unit, Tile, GoalDecider, CostDecider, int, Unit, SearchHeuristic, ...)",34
net.sf.freecol.common.model.Map.setLayer(Layer),5
net.sf.freecol.common.model.Map.setMaximumLatitude(int),5
net.sf.freecol.common.model.Map.setMinimumLatitude(int),5
net.sf.freecol.common.model.Map.setSearchTrace(boolean),6
"net.sf.freecol.common.model.Map.setTile(Tile, int, int)",13
"net.sf.freecol.common.model.Map.setTiles(int, int)",7
"net.sf.freecol.common.model.Map.subMap(int, int, int, int)",9
net.sf.freecol.common.model.Map.toShortString(),3
net.sf.freecol.common.model.Map.up(),3
net.sf.freecol.common.model.Map.updateTile(Tile),6
"net.sf.freecol.common.model.Map.updateTiles(int, int)",8
net.sf.freecol.common.model.Map.usedCarrier(PathNode),10
net.sf.freecol.common.model.Map.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Map.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.MapTest.getShortLongPathMap(Game),0
net.sf.freecol.common.model.MapTest.getSingleLandPathMap(Game),0
net.sf.freecol.common.model.MapTest.iteratorToList(Iterator<T>),0
net.sf.freecol.common.model.MapTest.testCircleIterator(),0
net.sf.freecol.common.model.MapTest.testCopy(),0
net.sf.freecol.common.model.MapTest.testFindPath(),0
net.sf.freecol.common.model.MapTest.testGetReverseDirection(),0
net.sf.freecol.common.model.MapTest.testGetSurroundingTiles(),0
net.sf.freecol.common.model.MapTest.testGetTiles(),0
net.sf.freecol.common.model.MapTest.testLatitude(),0
net.sf.freecol.common.model.MapTest.testMapGameInt(),0
net.sf.freecol.common.model.MapTest.testMoveThroughTileWithEnemyUnit(),0
net.sf.freecol.common.model.MapTest.testNoPathAvailableDueToCampInTheWay(),4
net.sf.freecol.common.model.MapTest.testNoPathAvailableDueToColonyInTheWay(),4
net.sf.freecol.common.model.MapTest.testNoPathAvailableDueToUnitInTheWay(),4
net.sf.freecol.common.model.MapTest.testRandomDirection(),0
net.sf.freecol.common.model.MapTest.testSearchForColony(),0
net.sf.freecol.common.model.MapTest.testShortestPathObstructed(),0
"net.sf.freecol.common.model.Market.Market(Game, Player)",6
"net.sf.freecol.common.model.Market.Market(Game, String)",8
"net.sf.freecol.common.model.Market.addGoodsToMarket(GoodsType, int)",7
net.sf.freecol.common.model.Market.addTransactionListener(TransactionListener),5
net.sf.freecol.common.model.Market.clearMarketData(),3
net.sf.freecol.common.model.Market.copyIn(T),3
net.sf.freecol.common.model.Market.flushPriceChange(GoodsType),5
net.sf.freecol.common.model.Market.getAmountInMarket(GoodsType),6
net.sf.freecol.common.model.Market.getArrears(GoodsType),6
"net.sf.freecol.common.model.Market.getBidPrice(GoodsType, int)",7
net.sf.freecol.common.model.Market.getCostToBuy(GoodsType),6
net.sf.freecol.common.model.Market.getIncomeAfterTaxes(GoodsType),6
net.sf.freecol.common.model.Market.getIncomeBeforeTaxes(GoodsType),6
net.sf.freecol.common.model.Market.getInitialPrice(GoodsType),6
net.sf.freecol.common.model.Market.getLinkTarget(Player),3
net.sf.freecol.common.model.Market.getMarketData(),5
net.sf.freecol.common.model.Market.getMarketData(GoodsType),8
net.sf.freecol.common.model.Market.getMarketDataValues(),5
net.sf.freecol.common.model.Market.getOwner(),3
net.sf.freecol.common.model.Market.getPaidForSale(GoodsType),8
"net.sf.freecol.common.model.Market.getSalePrice(GoodsType, int)",7
net.sf.freecol.common.model.Market.getSalePrice(T),7
net.sf.freecol.common.model.Market.getSalePriceComparator(),6
net.sf.freecol.common.model.Market.getSales(GoodsType),6
net.sf.freecol.common.model.Market.getTransactionListener(),6
net.sf.freecol.common.model.Market.getXMLTagName(),3
net.sf.freecol.common.model.Market.hasBeenTraded(GoodsType),6
net.sf.freecol.common.model.Market.hasPriceChanged(GoodsType),6
net.sf.freecol.common.model.Market.makePriceChangeMessage(GoodsType),7
"net.sf.freecol.common.model.Market.modifyIncomeAfterTaxes(GoodsType, int)",6
"net.sf.freecol.common.model.Market.modifyIncomeBeforeTaxes(GoodsType, int)",6
"net.sf.freecol.common.model.Market.modifySales(GoodsType, int)",6
"net.sf.freecol.common.model.Market.putMarketData(GoodsType, MarketData)",6
net.sf.freecol.common.model.Market.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Market.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Market.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Market.removeTransactionListener(TransactionListener),5
net.sf.freecol.common.model.Market.requireMarketData(GoodsType),7
"net.sf.freecol.common.model.Market.setArrears(GoodsType, int)",6
"net.sf.freecol.common.model.Market.setInitialPrice(GoodsType, int)",6
"net.sf.freecol.common.model.Market.setMarketData(Map<GoodsType, MarketData>)",5
net.sf.freecol.common.model.Market.setOwner(Player),3
net.sf.freecol.common.model.Market.toString(),3
net.sf.freecol.common.model.Market.update(GoodsType),10
net.sf.freecol.common.model.Market.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Market.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.MarketData.MarketData(Game, GoodsType)",6
"net.sf.freecol.common.model.MarketData.MarketData(Game, String)",8
net.sf.freecol.common.model.MarketData.copyIn(T),3
net.sf.freecol.common.model.MarketData.getAmountInMarket(),5
net.sf.freecol.common.model.MarketData.getArrears(),5
net.sf.freecol.common.model.MarketData.getCostToBuy(),5
net.sf.freecol.common.model.MarketData.getGoodsType(),5
net.sf.freecol.common.model.MarketData.getIncomeAfterTaxes(),5
net.sf.freecol.common.model.MarketData.getIncomeBeforeTaxes(),5
net.sf.freecol.common.model.MarketData.getInitialPrice(),5
net.sf.freecol.common.model.MarketData.getOldPrice(),5
net.sf.freecol.common.model.MarketData.getPaidForSale(),5
net.sf.freecol.common.model.MarketData.getSales(),5
net.sf.freecol.common.model.MarketData.getTraded(),5
net.sf.freecol.common.model.MarketData.getXMLTagName(),3
net.sf.freecol.common.model.MarketData.price(),10
net.sf.freecol.common.model.MarketData.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.MarketData.setAmountInMarket(int),5
net.sf.freecol.common.model.MarketData.setArrears(int),5
net.sf.freecol.common.model.MarketData.setCostToBuy(int),5
net.sf.freecol.common.model.MarketData.setIncomeAfterTaxes(int),5
net.sf.freecol.common.model.MarketData.setIncomeBeforeTaxes(int),5
net.sf.freecol.common.model.MarketData.setInitialPrice(int),5
net.sf.freecol.common.model.MarketData.setOldPrice(int),5
net.sf.freecol.common.model.MarketData.setPaidForSale(int),5
net.sf.freecol.common.model.MarketData.setSales(int),5
net.sf.freecol.common.model.MarketData.setTraded(boolean),5
net.sf.freecol.common.model.MarketData.toString(),3
net.sf.freecol.common.model.MarketData.update(),3
net.sf.freecol.common.model.MarketData.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.MarketTest.testEuropeMarketPricing(),0
net.sf.freecol.common.model.MarketTest.testInitialMarket(),4
net.sf.freecol.common.model.MarketTest.testSerialization(),3
net.sf.freecol.common.model.MarketTest.testTransactionListeners(),3
net.sf.freecol.common.model.MarketWas.MarketWas(Player),5
net.sf.freecol.common.model.MarketWas.add(AbstractGoods),5
net.sf.freecol.common.model.MarketWas.addAll(List<AbstractGoods>),5
"net.sf.freecol.common.model.MarketWas.fireChange(GoodsType, int)",6
net.sf.freecol.common.model.MarketWas.fireChanges(),3
net.sf.freecol.common.model.ModelMessage.MessageType.MessageType(String),0
net.sf.freecol.common.model.ModelMessage.MessageType.getKey(),5
net.sf.freecol.common.model.ModelMessage.MessageType.getNameKey(),3
net.sf.freecol.common.model.ModelMessage.MessageType.getOptionName(),0
net.sf.freecol.common.model.ModelMessage.ModelMessage(),3
net.sf.freecol.common.model.ModelMessage.ModelMessage(FreeColXMLReader),6
"net.sf.freecol.common.model.ModelMessage.ModelMessage(MessageType, String, FreeColGameObject)",8
"net.sf.freecol.common.model.ModelMessage.ModelMessage(MessageType, String, FreeColGameObject, FreeColObject)",9
"net.sf.freecol.common.model.ModelMessage.ModelMessage(MessageType, String, String, FreeColGameObject, FreeColObject)",10
net.sf.freecol.common.model.ModelMessage.addDefaultId(String),6
net.sf.freecol.common.model.ModelMessage.copyIn(T),3
net.sf.freecol.common.model.ModelMessage.divert(FreeColGameObject),6
net.sf.freecol.common.model.ModelMessage.equals(Object),3
"net.sf.freecol.common.model.ModelMessage.getDefaultDisplay(MessageType, FreeColGameObject)",7
net.sf.freecol.common.model.ModelMessage.getDisplayId(),5
net.sf.freecol.common.model.ModelMessage.getDisplayed(),5
net.sf.freecol.common.model.ModelMessage.getIgnoredMessageKey(),5
net.sf.freecol.common.model.ModelMessage.getMessageType(),5
net.sf.freecol.common.model.ModelMessage.getOptionName(),5
"net.sf.freecol.common.model.ModelMessage.getSourceComparator(Game, Map<String, Comparator<?>>)",10
net.sf.freecol.common.model.ModelMessage.getSourceId(),5
net.sf.freecol.common.model.ModelMessage.getXMLTagName(),3
net.sf.freecol.common.model.ModelMessage.hashCode(),3
net.sf.freecol.common.model.ModelMessage.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.ModelMessage.setDisplayId(String),5
net.sf.freecol.common.model.ModelMessage.setDisplayed(boolean),5
net.sf.freecol.common.model.ModelMessage.setMessageType(MessageType),5
net.sf.freecol.common.model.ModelMessage.setSourceId(String),5
net.sf.freecol.common.model.ModelMessage.splitLinks(Player),6
net.sf.freecol.common.model.ModelMessage.toString(),3
net.sf.freecol.common.model.ModelMessage.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.ModelMessageTest.testDefaultId(),0
net.sf.freecol.common.model.ModelMessageTest.testHashCode(),0
net.sf.freecol.common.model.ModelMessageTest.testModelMapSet2(),0
"net.sf.freecol.common.model.Modifier.Modifier(FreeColXMLReader, Specification)",8
net.sf.freecol.common.model.Modifier.Modifier(Specification),5
"net.sf.freecol.common.model.Modifier.Modifier(String, float, ModifierType)",7
"net.sf.freecol.common.model.Modifier.Modifier(String, float, ModifierType, FreeColObject)",8
"net.sf.freecol.common.model.Modifier.Modifier(String, float, ModifierType, FreeColObject, int)",9
"net.sf.freecol.common.model.Modifier.apply(float, float)",8
"net.sf.freecol.common.model.Modifier.apply(float, float, ModifierType)",9
net.sf.freecol.common.model.Modifier.applyTo(float),7
"net.sf.freecol.common.model.Modifier.applyTo(float, Turn)",8
net.sf.freecol.common.model.Modifier.copyIn(T),3
net.sf.freecol.common.model.Modifier.equals(Object),3
net.sf.freecol.common.model.Modifier.getIncrement(),5
net.sf.freecol.common.model.Modifier.getIncrementType(),5
net.sf.freecol.common.model.Modifier.getModifierIndex(),5
net.sf.freecol.common.model.Modifier.getType(),5
net.sf.freecol.common.model.Modifier.getValue(),5
net.sf.freecol.common.model.Modifier.getValue(Turn),6
net.sf.freecol.common.model.Modifier.getXMLTagName(),3
net.sf.freecol.common.model.Modifier.hasIncrement(),5
net.sf.freecol.common.model.Modifier.hashCode(),3
net.sf.freecol.common.model.Modifier.isFloatKnown(float),6
net.sf.freecol.common.model.Modifier.isKnown(),7
net.sf.freecol.common.model.Modifier.makeModifier(Modifier),6
"net.sf.freecol.common.model.Modifier.makeTimedModifier(String, Modifier, Turn)",13
net.sf.freecol.common.model.Modifier.readAttributes(FreeColXMLReader),3
"net.sf.freecol.common.model.Modifier.setIncrement(ModifierType, float, Turn, Turn)",11
net.sf.freecol.common.model.Modifier.setIncrement(float),6
net.sf.freecol.common.model.Modifier.setIncrementType(ModifierType),6
net.sf.freecol.common.model.Modifier.setModifierIndex(int),6
net.sf.freecol.common.model.Modifier.setType(ModifierType),6
net.sf.freecol.common.model.Modifier.setValue(float),6
net.sf.freecol.common.model.Modifier.toString(),3
net.sf.freecol.common.model.Modifier.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.ModifierTest.testAdditiveModifier(),0
net.sf.freecol.common.model.ModifierTest.testCombineAdditiveModifiers(),0
net.sf.freecol.common.model.ModifierTest.testCombineMultiplicativeModifiers(),0
net.sf.freecol.common.model.ModifierTest.testCombinePercentageModifiers(),0
net.sf.freecol.common.model.ModifierTest.testCombinedModifier(),0
net.sf.freecol.common.model.ModifierTest.testHashEquals(),0
net.sf.freecol.common.model.ModifierTest.testIncrements(),0
net.sf.freecol.common.model.ModifierTest.testModifierUnknown(),4
net.sf.freecol.common.model.ModifierTest.testMultiplicativeModifier(),0
net.sf.freecol.common.model.ModifierTest.testPercentageModifier(),0
net.sf.freecol.common.model.ModifierTest.testScope(),0
net.sf.freecol.common.model.ModifierTest.testTimeLimits(),0
"net.sf.freecol.common.model.Monarch.Monarch(Game, Player)",7
"net.sf.freecol.common.model.Monarch.Monarch(Game, String)",8
net.sf.freecol.common.model.Monarch.MonarchAction.getHeaderKey(),0
net.sf.freecol.common.model.Monarch.MonarchAction.getKey(),5
net.sf.freecol.common.model.Monarch.MonarchAction.getNoKey(),0
net.sf.freecol.common.model.Monarch.MonarchAction.getTextKey(),0
net.sf.freecol.common.model.Monarch.MonarchAction.getYesKey(),0
net.sf.freecol.common.model.Monarch.actionIsValid(MonarchAction),6
"net.sf.freecol.common.model.Monarch.addIfValid(List<RandomChoice<MonarchAction>>, MonarchAction, int)",8
net.sf.freecol.common.model.Monarch.addToREF(Random),6
net.sf.freecol.common.model.Monarch.collectPotentialEnemies(),5
net.sf.freecol.common.model.Monarch.collectPotentialFriends(),7
net.sf.freecol.common.model.Monarch.copyIn(T),3
net.sf.freecol.common.model.Monarch.getActionChoices(),5
net.sf.freecol.common.model.Monarch.getDispleasure(),5
net.sf.freecol.common.model.Monarch.getExpeditionaryForce(),5
net.sf.freecol.common.model.Monarch.getInterventionForce(),5
net.sf.freecol.common.model.Monarch.getMercenaryForce(),7
net.sf.freecol.common.model.Monarch.getNameKey(),3
net.sf.freecol.common.model.Monarch.getNavalREFUnitType(),5
net.sf.freecol.common.model.Monarch.getPlayer(),7
"net.sf.freecol.common.model.Monarch.getSupport(Random, boolean)",14
net.sf.freecol.common.model.Monarch.getSupportSea(),5
"net.sf.freecol.common.model.Monarch.getWarSupport(Player, Random)",7
net.sf.freecol.common.model.Monarch.getWarSupportForce(),7
net.sf.freecol.common.model.Monarch.getXMLTagName(),3
net.sf.freecol.common.model.Monarch.initializeCaches(),3
"net.sf.freecol.common.model.Monarch.loadMercenaries(Random, List<AbstractUnit>)",7
"net.sf.freecol.common.model.Monarch.loadMercenaryForce(Random, List<AbstractUnit>)",8
net.sf.freecol.common.model.Monarch.lowerTax(Random),6
net.sf.freecol.common.model.Monarch.raiseTax(Random),6
net.sf.freecol.common.model.Monarch.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Monarch.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Monarch.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Monarch.setDispleasure(boolean),5
net.sf.freecol.common.model.Monarch.setSupportSea(boolean),5
net.sf.freecol.common.model.Monarch.shouldAddNavalUnit(),7
net.sf.freecol.common.model.Monarch.taxMaximum(),5
net.sf.freecol.common.model.Monarch.updateInterventionForce(),7
net.sf.freecol.common.model.Monarch.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Monarch.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.MonarchTest.choicesContain(List<RandomChoice<MonarchAction>>, MonarchAction)",0
net.sf.freecol.common.model.MonarchTest.testSerialize(),0
net.sf.freecol.common.model.MonarchTest.testTaxActionChoices(),0
net.sf.freecol.common.model.MovementTest.testMoveAlongRiver(),0
net.sf.freecol.common.model.MovementTest.testMoveAlongRoad(),0
net.sf.freecol.common.model.MovementTest.testMoveFromPlainsToHills(),0
net.sf.freecol.common.model.MovementTest.testMoveFromPlainsToPlains(),0
net.sf.freecol.common.model.MovementTest.testScoutColony(),0
net.sf.freecol.common.model.MovementTest.testScoutIndianSettlement(),0
"net.sf.freecol.common.model.Nation.Nation(String, Specification)",6
net.sf.freecol.common.model.Nation.copyIn(T),3
net.sf.freecol.common.model.Nation.getColor(),5
net.sf.freecol.common.model.Nation.getPreferredLatitude(),5
net.sf.freecol.common.model.Nation.getREFNation(),5
"net.sf.freecol.common.model.Nation.getRandomNonPlayerNationNameKey(Game, Random)",7
net.sf.freecol.common.model.Nation.getRebelNation(),5
net.sf.freecol.common.model.Nation.getRulerName(),5
net.sf.freecol.common.model.Nation.getRulerNameKey(),5
net.sf.freecol.common.model.Nation.getStartsOnEastCoast(),5
net.sf.freecol.common.model.Nation.getType(),5
net.sf.freecol.common.model.Nation.getXMLTagName(),3
net.sf.freecol.common.model.Nation.isSelectable(),5
net.sf.freecol.common.model.Nation.isUnknownEnemy(),5
net.sf.freecol.common.model.Nation.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Nation.setColor(Color),5
net.sf.freecol.common.model.Nation.setType(NationType),5
net.sf.freecol.common.model.Nation.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.NationOptions.Advantages.getKey(),5
net.sf.freecol.common.model.NationOptions.Advantages.getNameKey(),3
net.sf.freecol.common.model.NationOptions.Advantages.getShortDescriptionKey(),0
"net.sf.freecol.common.model.NationOptions.NationOptions(FreeColXMLReader, Specification)",7
net.sf.freecol.common.model.NationOptions.NationOptions(Specification),5
net.sf.freecol.common.model.NationOptions.NationState.getKey(),5
net.sf.freecol.common.model.NationOptions.NationState.getNameKey(),3
net.sf.freecol.common.model.NationOptions.NationState.getShortDescriptionKey(),0
net.sf.freecol.common.model.NationOptions.copyIn(T),3
net.sf.freecol.common.model.NationOptions.getNationState(Nation),6
net.sf.freecol.common.model.NationOptions.getNationalAdvantages(),5
net.sf.freecol.common.model.NationOptions.getNations(),5
net.sf.freecol.common.model.NationOptions.getXMLTagName(),3
net.sf.freecol.common.model.NationOptions.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.NationOptions.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.NationOptions.readChildren(FreeColXMLReader),3
"net.sf.freecol.common.model.NationOptions.setNationState(Nation, NationState)",6
"net.sf.freecol.common.model.NationOptions.setNations(Map<Nation, NationState>)",5
net.sf.freecol.common.model.NationOptions.toString(),3
net.sf.freecol.common.model.NationOptions.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.NationOptions.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.NationSummary.NationSummary(),3
"net.sf.freecol.common.model.NationSummary.NationSummary(Player, Player)",6
net.sf.freecol.common.model.NationSummary.copyIn(T),3
net.sf.freecol.common.model.NationSummary.getFoundingFathers(),0
net.sf.freecol.common.model.NationSummary.getGold(),0
net.sf.freecol.common.model.NationSummary.getMilitaryStrength(),0
net.sf.freecol.common.model.NationSummary.getNavalStrength(),0
net.sf.freecol.common.model.NationSummary.getNumberOfSettlements(),0
net.sf.freecol.common.model.NationSummary.getNumberOfUnits(),0
net.sf.freecol.common.model.NationSummary.getSoL(),0
net.sf.freecol.common.model.NationSummary.getStance(),0
net.sf.freecol.common.model.NationSummary.getTax(),0
net.sf.freecol.common.model.NationSummary.getXMLTagName(),3
net.sf.freecol.common.model.NationSummary.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.NationSummary.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.NationType.AggressionLevel.getKey(),5
"net.sf.freecol.common.model.NationType.NationType(String, Specification)",6
net.sf.freecol.common.model.NationType.SettlementNumber.getKey(),5
net.sf.freecol.common.model.NationType.addSettlementType(SettlementType),5
net.sf.freecol.common.model.NationType.addSettlementTypes(List<SettlementType>),5
net.sf.freecol.common.model.NationType.copyIn(T),3
net.sf.freecol.common.model.NationType.getAggression(),5
net.sf.freecol.common.model.NationType.getCapitalType(),5
net.sf.freecol.common.model.NationType.getNumberOfSettlements(),5
net.sf.freecol.common.model.NationType.getSettlementType(String),6
net.sf.freecol.common.model.NationType.getSettlementType(boolean),6
net.sf.freecol.common.model.NationType.getSettlementTypes(),5
net.sf.freecol.common.model.NationType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.NationType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.NationType.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.NationType.setSettlementTypes(List<SettlementType>),5
net.sf.freecol.common.model.NationType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.NationType.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.NationTypeTest.testAdvantagesThatOnlyApplyToPersons(),0
net.sf.freecol.common.model.NationTypeTest.testHasType(),0
net.sf.freecol.common.model.NationTypeTest.testIsREF(),0
net.sf.freecol.common.model.NationTypeTest.testSettlementType(),0
net.sf.freecol.common.model.NationTypeTest.testStartingUnits(),0
net.sf.freecol.common.model.NationTypeTest.testisRef(),0
"net.sf.freecol.common.model.NativeTrade.NativeTrade(Game, String)",6
"net.sf.freecol.common.model.NativeTrade.NativeTrade(Unit, IndianSettlement)",6
"net.sf.freecol.common.model.NativeTrade.NativeTradeAction.NativeTradeAction(boolean, boolean)",6
net.sf.freecol.common.model.NativeTrade.NativeTradeAction.isClosing(),5
net.sf.freecol.common.model.NativeTrade.NativeTradeAction.isEuropean(),5
net.sf.freecol.common.model.NativeTrade.addToUnit(NativeTradeItem),5
net.sf.freecol.common.model.NativeTrade.atWar(),5
net.sf.freecol.common.model.NativeTrade.canBuy(),6
net.sf.freecol.common.model.NativeTrade.canGift(),5
net.sf.freecol.common.model.NativeTrade.canSell(),5
net.sf.freecol.common.model.NativeTrade.copyIn(T),3
net.sf.freecol.common.model.NativeTrade.getBuy(),5
net.sf.freecol.common.model.NativeTrade.getCount(),5
net.sf.freecol.common.model.NativeTrade.getDone(),5
net.sf.freecol.common.model.NativeTrade.getGift(),5
net.sf.freecol.common.model.NativeTrade.getIndianSettlement(),5
net.sf.freecol.common.model.NativeTrade.getItem(),5
net.sf.freecol.common.model.NativeTrade.getKey(),5
"net.sf.freecol.common.model.NativeTrade.getNativeTradeKey(Unit, IndianSettlement)",7
net.sf.freecol.common.model.NativeTrade.getSell(),5
net.sf.freecol.common.model.NativeTrade.getSettlementToUnit(),7
net.sf.freecol.common.model.NativeTrade.getUnit(),5
net.sf.freecol.common.model.NativeTrade.getUnitToSettlement(),7
net.sf.freecol.common.model.NativeTrade.getXMLTagName(),3
net.sf.freecol.common.model.NativeTrade.haggleDown(int),6
net.sf.freecol.common.model.NativeTrade.haggleUp(int),6
net.sf.freecol.common.model.NativeTrade.hasNotTraded(),5
net.sf.freecol.common.model.NativeTrade.initialize(),4
net.sf.freecol.common.model.NativeTrade.isCompatible(NativeTrade),6
net.sf.freecol.common.model.NativeTrade.isInternable(),3
net.sf.freecol.common.model.NativeTrade.limitSettlementToUnit(int),7
net.sf.freecol.common.model.NativeTrade.mergeFrom(NativeTrade),5
net.sf.freecol.common.model.NativeTrade.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.NativeTrade.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.NativeTrade.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.NativeTrade.removeFromUnit(NativeTradeItem),5
net.sf.freecol.common.model.NativeTrade.setBuy(boolean),5
net.sf.freecol.common.model.NativeTrade.setCount(int),5
net.sf.freecol.common.model.NativeTrade.setDone(),3
net.sf.freecol.common.model.NativeTrade.setGift(boolean),5
net.sf.freecol.common.model.NativeTrade.setItem(NativeTradeItem),5
net.sf.freecol.common.model.NativeTrade.setSell(boolean),5
net.sf.freecol.common.model.NativeTrade.toString(),3
net.sf.freecol.common.model.NativeTrade.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.NativeTrade.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.NativeTradeItem.NativeTradeItem(Game, FreeColXMLReader)",7
"net.sf.freecol.common.model.NativeTradeItem.NativeTradeItem(Game, Player, Player, Goods)",8
net.sf.freecol.common.model.NativeTradeItem.NativeTradeItem(NativeTradeItem),5
net.sf.freecol.common.model.NativeTradeItem.copyIn(T),3
net.sf.freecol.common.model.NativeTradeItem.equals(Object),3
net.sf.freecol.common.model.NativeTradeItem.getHaggleCount(),5
net.sf.freecol.common.model.NativeTradeItem.getPrice(),5
net.sf.freecol.common.model.NativeTradeItem.getXMLTagName(),3
net.sf.freecol.common.model.NativeTradeItem.goodsMatcher(),5
net.sf.freecol.common.model.NativeTradeItem.hashCode(),3
net.sf.freecol.common.model.NativeTradeItem.priceIsSet(),5
net.sf.freecol.common.model.NativeTradeItem.priceIsValid(),5
net.sf.freecol.common.model.NativeTradeItem.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.NativeTradeItem.setHaggleCount(int),5
net.sf.freecol.common.model.NativeTradeItem.setPrice(int),5
net.sf.freecol.common.model.NativeTradeItem.toString(),3
net.sf.freecol.common.model.NativeTradeItem.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.Occupation.Occupation(WorkLocation, ProductionType, GoodsType)",9
"net.sf.freecol.common.model.Occupation.improve(Unit, WorkLocation, int, Collection<GoodsType>, LogBuilder)",12
"net.sf.freecol.common.model.Occupation.improve(UnitType, WorkLocation, int, Collection<GoodsType>, LogBuilder)",12
"net.sf.freecol.common.model.Occupation.improve(UnitType, WorkLocation, int, Collection<GoodsType>, boolean, LogBuilder)",14
net.sf.freecol.common.model.Occupation.install(Unit),6
net.sf.freecol.common.model.Occupation.toString(),3
net.sf.freecol.common.model.Operand.Operand(),3
net.sf.freecol.common.model.Operand.Operand(FreeColXMLReader),6
"net.sf.freecol.common.model.Operand.Operand(OperandType, ScopeLevel)",6
net.sf.freecol.common.model.Operand.Operand(int),5
net.sf.freecol.common.model.Operand.copyIn(T),3
net.sf.freecol.common.model.Operand.equals(Object),3
net.sf.freecol.common.model.Operand.getOperandType(),5
net.sf.freecol.common.model.Operand.getScopeLevel(),5
net.sf.freecol.common.model.Operand.getValue(),5
net.sf.freecol.common.model.Operand.getValue(Game),6
net.sf.freecol.common.model.Operand.getValue(Player),6
net.sf.freecol.common.model.Operand.getValue(Settlement),6
net.sf.freecol.common.model.Operand.hashCode(),3
net.sf.freecol.common.model.Operand.ourCount(Collection<? extends FreeColObject>),7
net.sf.freecol.common.model.Operand.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Operand.setOperandType(OperandType),5
net.sf.freecol.common.model.Operand.setScopeLevel(ScopeLevel),5
net.sf.freecol.common.model.Operand.setValue(Integer),5
net.sf.freecol.common.model.Operand.toString(),3
net.sf.freecol.common.model.Operand.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.PathNode.PathNode(Location, int, int, boolean, PathNode, PathNode)",14
net.sf.freecol.common.model.PathNode.addTurns(int),5
net.sf.freecol.common.model.PathNode.convertToGoodsDeliveryPath(),5
net.sf.freecol.common.model.PathNode.embarkedThisTurn(int),6
net.sf.freecol.common.model.PathNode.ensureDisembark(),3
net.sf.freecol.common.model.PathNode.fullPathToString(),5
net.sf.freecol.common.model.PathNode.getCarrierMove(),6
net.sf.freecol.common.model.PathNode.getCost(),5
net.sf.freecol.common.model.PathNode.getDirection(),8
net.sf.freecol.common.model.PathNode.getFirstNode(),5
net.sf.freecol.common.model.PathNode.getLastNode(),5
net.sf.freecol.common.model.PathNode.getLength(),5
net.sf.freecol.common.model.PathNode.getLocation(),5
net.sf.freecol.common.model.PathNode.getMovesLeft(),6
"net.sf.freecol.common.model.PathNode.getNodeCost(int, int)",11
net.sf.freecol.common.model.PathNode.getTile(),6
net.sf.freecol.common.model.PathNode.getTotalTurns(),6
net.sf.freecol.common.model.PathNode.getTransportDropNode(),6
net.sf.freecol.common.model.PathNode.getTransportDropTurns(),7
net.sf.freecol.common.model.PathNode.getTurns(),8
net.sf.freecol.common.model.PathNode.isOnCarrier(),7
net.sf.freecol.common.model.PathNode.setMovesLeft(int),5
net.sf.freecol.common.model.PathNode.setOnCarrier(boolean),8
net.sf.freecol.common.model.PathNode.setTurns(int),6
net.sf.freecol.common.model.PathNode.toString(),3
net.sf.freecol.common.model.PathNode.usesCarrier(),5
net.sf.freecol.common.model.PathfindingTest.testComposedGoalDeciders(),0
net.sf.freecol.common.model.Player.ColonyValueCategory.toString(),3
net.sf.freecol.common.model.Player.NoClaimReason.getDescriptionKey(),0
net.sf.freecol.common.model.Player.NoClaimReason.getKey(),5
net.sf.freecol.common.model.Player.NoClaimReason.getNameKey(),3
net.sf.freecol.common.model.Player.NoValueType.NoValueType(int),0
net.sf.freecol.common.model.Player.NoValueType.fromValue(int),0
net.sf.freecol.common.model.Player.NoValueType.getDouble(),0
net.sf.freecol.common.model.Player.NoValueType.getValue(),0
net.sf.freecol.common.model.Player.Player(Game),5
"net.sf.freecol.common.model.Player.Player(Game, String)",8
net.sf.freecol.common.model.Player.addFather(FoundingFather),5
net.sf.freecol.common.model.Player.addHistory(HistoryEvent),5
net.sf.freecol.common.model.Player.addLastSale(LastSale),5
net.sf.freecol.common.model.Player.addMissionBan(Player),5
net.sf.freecol.common.model.Player.addModelMessage(ModelMessage),5
net.sf.freecol.common.model.Player.addOwnable(Ownable),7
net.sf.freecol.common.model.Player.addSettlement(Settlement),9
net.sf.freecol.common.model.Player.addStartGameMessage(),3
net.sf.freecol.common.model.Player.addTradeRoute(TradeRoute),5
net.sf.freecol.common.model.Player.addUnit(Unit),6
net.sf.freecol.common.model.Player.atWarWith(Player),6
net.sf.freecol.common.model.Player.calculateStrength(boolean),6
net.sf.freecol.common.model.Player.canAcquireForImprovement(Tile),8
net.sf.freecol.common.model.Player.canBuildColonies(),5
net.sf.freecol.common.model.Player.canClaimForImprovement(Tile),11
net.sf.freecol.common.model.Player.canClaimForSettlement(Tile),6
net.sf.freecol.common.model.Player.canClaimForSettlementReason(Tile),13
net.sf.freecol.common.model.Player.canClaimFreeCenterTile(Tile),7
net.sf.freecol.common.model.Player.canClaimToFoundSettlement(Tile),6
net.sf.freecol.common.model.Player.canClaimToFoundSettlementReason(Tile),9
net.sf.freecol.common.model.Player.canHaveFoundingFathers(),5
net.sf.freecol.common.model.Player.canMoveToEurope(),5
net.sf.freecol.common.model.Player.canOwnTile(Tile),6
net.sf.freecol.common.model.Player.canOwnTileReason(Tile),8
net.sf.freecol.common.model.Player.canSee(Tile),8
net.sf.freecol.common.model.Player.canSeeUnit(Unit),6
net.sf.freecol.common.model.Player.canTrade(GoodsType),6
"net.sf.freecol.common.model.Player.canTrade(GoodsType, Access)",7
net.sf.freecol.common.model.Player.changeNationType(NationType),5
net.sf.freecol.common.model.Player.changePlayerType(PlayerType),9
net.sf.freecol.common.model.Player.checkDeclareIndependence(),6
net.sf.freecol.common.model.Player.checkEmigrate(),5
net.sf.freecol.common.model.Player.checkGold(int),8
"net.sf.freecol.common.model.Player.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.Player.clearHistory(),3
net.sf.freecol.common.model.Player.clearModelMessages(),3
net.sf.freecol.common.model.Player.clearNationCache(),3
net.sf.freecol.common.model.Player.clearNationSummary(Player),5
net.sf.freecol.common.model.Player.clearOfferedFathers(),3
net.sf.freecol.common.model.Player.clearTradeRoutes(),3
net.sf.freecol.common.model.Player.clientError(String),7
net.sf.freecol.common.model.Player.clientError(StringTemplate),7
net.sf.freecol.common.model.Player.copyIn(T),3
"net.sf.freecol.common.model.Player.divertModelMessages(FreeColGameObject, FreeColGameObject)",9
net.sf.freecol.common.model.Player.getAllColonyValues(Tile),9
net.sf.freecol.common.model.Player.getArrears(GoodsType),6
net.sf.freecol.common.model.Player.getAttackedByPrivateers(),5
net.sf.freecol.common.model.Player.getBankrupt(),7
net.sf.freecol.common.model.Player.getBannedMissions(),5
net.sf.freecol.common.model.Player.getCapitalName(Random),6
net.sf.freecol.common.model.Player.getCarriersForUnit(Unit),6
"net.sf.freecol.common.model.Player.getClaimableTiles(Tile, int)",11
net.sf.freecol.common.model.Player.getClassIndex(),3
net.sf.freecol.common.model.Player.getClosestPortForEurope(),5
net.sf.freecol.common.model.Player.getColonies(),5
net.sf.freecol.common.model.Player.getColoniesPopulation(),6
net.sf.freecol.common.model.Player.getColonyByName(String),7
net.sf.freecol.common.model.Player.getColonyList(),5
net.sf.freecol.common.model.Player.getColonyValue(Tile),9
net.sf.freecol.common.model.Player.getConnectedPortList(),5
net.sf.freecol.common.model.Player.getConnectedPorts(),5
net.sf.freecol.common.model.Player.getConnection(),5
net.sf.freecol.common.model.Player.getCountryLabel(),5
net.sf.freecol.common.model.Player.getCurrentFather(),9
net.sf.freecol.common.model.Player.getDead(),7
net.sf.freecol.common.model.Player.getDebugName(),5
net.sf.freecol.common.model.Player.getDisplayObject(),3
net.sf.freecol.common.model.Player.getElectionTurns(),6
net.sf.freecol.common.model.Player.getEmigrationMessage(Unit),6
net.sf.freecol.common.model.Player.getEntryTile(),6
net.sf.freecol.common.model.Player.getEurope(),6
net.sf.freecol.common.model.Player.getEuropeNameKey(),5
net.sf.freecol.common.model.Player.getEuropeanPurchasePrice(AbstractUnit),6
net.sf.freecol.common.model.Player.getEuropeanRecruitPrice(),5
net.sf.freecol.common.model.Player.getFallbackTile(),8
net.sf.freecol.common.model.Player.getFatherCount(),6
net.sf.freecol.common.model.Player.getFeatureContainer(),3
net.sf.freecol.common.model.Player.getForcesLabel(),5
net.sf.freecol.common.model.Player.getFoundingFathers(),5
net.sf.freecol.common.model.Player.getGold(),8
net.sf.freecol.common.model.Player.getHighSeas(),5
net.sf.freecol.common.model.Player.getHistory(),5
net.sf.freecol.common.model.Player.getImmigration(),6
net.sf.freecol.common.model.Player.getImmigrationRequired(),6
net.sf.freecol.common.model.Player.getIncomeAfterTaxes(GoodsType),6
net.sf.freecol.common.model.Player.getIncomeBeforeTaxes(GoodsType),6
net.sf.freecol.common.model.Player.getIndependentNationName(),5
net.sf.freecol.common.model.Player.getIndianSettlementByName(String),7
net.sf.freecol.common.model.Player.getIndianSettlementList(),5
net.sf.freecol.common.model.Player.getIndianSettlements(),5
net.sf.freecol.common.model.Player.getIndianSettlementsWithMissionary(Player),8
net.sf.freecol.common.model.Player.getIndianSettlementsWithMissionaryList(Player),8
net.sf.freecol.common.model.Player.getInterventionBells(),5
net.sf.freecol.common.model.Player.getLabel(),5
net.sf.freecol.common.model.Player.getLandPrice(Tile),8
"net.sf.freecol.common.model.Player.getLastSale(Location, GoodsType)",9
"net.sf.freecol.common.model.Player.getLastSaleString(Location, GoodsType)",7
"net.sf.freecol.common.model.Player.getLastSaleTip(Location, GoodsType)",8
net.sf.freecol.common.model.Player.getLastSales(),5
net.sf.freecol.common.model.Player.getLiberty(),6
net.sf.freecol.common.model.Player.getLibertyProductionNextTurn(),7
net.sf.freecol.common.model.Player.getMarket(),8
net.sf.freecol.common.model.Player.getMarketName(),7
net.sf.freecol.common.model.Player.getMaximumFoodConsumption(),6
net.sf.freecol.common.model.Player.getMercenaryHirePrice(AbstractUnit),9
net.sf.freecol.common.model.Player.getMilitaryUnits(),5
net.sf.freecol.common.model.Player.getModelMessages(),6
net.sf.freecol.common.model.Player.getMonarch(),6
net.sf.freecol.common.model.Player.getMostValuableGoods(),9
net.sf.freecol.common.model.Player.getName(),5
net.sf.freecol.common.model.Player.getNameForNewLand(),5
net.sf.freecol.common.model.Player.getNameForRegion(Region),6
net.sf.freecol.common.model.Player.getNameForTradeRoute(),5
"net.sf.freecol.common.model.Player.getNameForUnit(UnitType, Random)",7
net.sf.freecol.common.model.Player.getNation(),5
net.sf.freecol.common.model.Player.getNationColor(),5
net.sf.freecol.common.model.Player.getNationId(),5
net.sf.freecol.common.model.Player.getNationLabel(),5
net.sf.freecol.common.model.Player.getNationResourceKey(),5
net.sf.freecol.common.model.Player.getNationSummary(Player),6
net.sf.freecol.common.model.Player.getNationType(),5
net.sf.freecol.common.model.Player.getNewLandName(),6
net.sf.freecol.common.model.Player.getNewModelMessages(),6
net.sf.freecol.common.model.Player.getNewestTradeRoute(),7
net.sf.freecol.common.model.Player.getNextActiveUnit(),5
net.sf.freecol.common.model.Player.getNextGoingToUnit(),5
net.sf.freecol.common.model.Player.getNumberOfKingLandUnits(),5
net.sf.freecol.common.model.Player.getNumberOfPorts(),5
net.sf.freecol.common.model.Player.getOfferedFathers(),5
net.sf.freecol.common.model.Player.getOldSoL(),5
"net.sf.freecol.common.model.Player.getOurFreeColGameObject(String, Class<T>)",11
net.sf.freecol.common.model.Player.getPlayerType(),5
net.sf.freecol.common.model.Player.getREFPlayer(),7
net.sf.freecol.common.model.Player.getREFUnits(),6
net.sf.freecol.common.model.Player.getRank(),6
net.sf.freecol.common.model.Player.getReady(),5
net.sf.freecol.common.model.Player.getRebelStrengthRatio(boolean),6
net.sf.freecol.common.model.Player.getRebels(),5
net.sf.freecol.common.model.Player.getRemainingFoundingFatherCost(),7
net.sf.freecol.common.model.Player.getRulerNameKey(),5
net.sf.freecol.common.model.Player.getSales(GoodsType),6
net.sf.freecol.common.model.Player.getScore(),5
net.sf.freecol.common.model.Player.getSettlementByName(String),6
net.sf.freecol.common.model.Player.getSettlementCount(),5
net.sf.freecol.common.model.Player.getSettlementList(),5
net.sf.freecol.common.model.Player.getSettlementName(Random),6
net.sf.freecol.common.model.Player.getSettlements(),5
net.sf.freecol.common.model.Player.getSoL(),5
net.sf.freecol.common.model.Player.getSortedColonies(Comparator<Colony>),6
net.sf.freecol.common.model.Player.getSpanishSuccessionScore(),6
net.sf.freecol.common.model.Player.getStance(Player),6
net.sf.freecol.common.model.Player.getStances(),5
"net.sf.freecol.common.model.Player.getStrengthRatio(Player, boolean)",11
net.sf.freecol.common.model.Player.getTax(),5
net.sf.freecol.common.model.Player.getTension(),5
net.sf.freecol.common.model.Player.getTension(Player),6
net.sf.freecol.common.model.Player.getTotalFoundingFatherCost(),9
net.sf.freecol.common.model.Player.getTotalImmigrationProduction(),5
"net.sf.freecol.common.model.Player.getTradeRouteByName(String, TradeRoute)",7
net.sf.freecol.common.model.Player.getTradeRouteCount(),5
net.sf.freecol.common.model.Player.getTradeRoutes(),5
net.sf.freecol.common.model.Player.getUnitByName(String),6
net.sf.freecol.common.model.Player.getUnitCount(),5
net.sf.freecol.common.model.Player.getUnitCount(boolean),6
net.sf.freecol.common.model.Player.getUnitSet(),5
net.sf.freecol.common.model.Player.getUnits(),8
net.sf.freecol.common.model.Player.getVisibleTileSet(),5
net.sf.freecol.common.model.Player.getWaitingLabel(),5
net.sf.freecol.common.model.Player.getXMLTagName(),3
net.sf.freecol.common.model.Player.hasContacted(Player),6
net.sf.freecol.common.model.Player.hasContactedEuropeans(),5
net.sf.freecol.common.model.Player.hasContactedIndians(),5
net.sf.freecol.common.model.Player.hasExplored(Tile),6
net.sf.freecol.common.model.Player.hasFather(FoundingFather),7
net.sf.freecol.common.model.Player.hasNextActiveUnit(),5
net.sf.freecol.common.model.Player.hasNextGoingToUnit(),5
net.sf.freecol.common.model.Player.hasSettlement(Settlement),7
net.sf.freecol.common.model.Player.hasSettlements(),5
net.sf.freecol.common.model.Player.hasTraded(GoodsType),6
net.sf.freecol.common.model.Player.hasUnit(Unit),6
net.sf.freecol.common.model.Player.hasUnitType(String),6
net.sf.freecol.common.model.Player.hasZeroSettlements(),11
net.sf.freecol.common.model.Player.initializeHighSeas(),5
net.sf.freecol.common.model.Player.invalidateCanSeeTiles(),41
net.sf.freecol.common.model.Player.isAI(),5
net.sf.freecol.common.model.Player.isAdmin(),5
net.sf.freecol.common.model.Player.isAtWar(),5
net.sf.freecol.common.model.Player.isColonial(),6
net.sf.freecol.common.model.Player.isConnected(),5
net.sf.freecol.common.model.Player.isDead(),6
net.sf.freecol.common.model.Player.isEuropean(),5
net.sf.freecol.common.model.Player.isIndian(),5
net.sf.freecol.common.model.Player.isNewLandNamed(),5
net.sf.freecol.common.model.Player.isPotentialEnemy(Player),7
net.sf.freecol.common.model.Player.isPotentialFriend(Player),7
net.sf.freecol.common.model.Player.isREF(),5
net.sf.freecol.common.model.Player.isReady(),5
net.sf.freecol.common.model.Player.isRebel(),5
net.sf.freecol.common.model.Player.isUndead(),5
net.sf.freecol.common.model.Player.isUnknownEnemy(),5
net.sf.freecol.common.model.Player.isWorkForREF(),6
net.sf.freecol.common.model.Player.logCheat(String),5
net.sf.freecol.common.model.Player.makeCanSeeTiles(Map),6
"net.sf.freecol.common.model.Player.makeContact(Player, Player)",7
net.sf.freecol.common.model.Player.missionsBanned(Player),6
net.sf.freecol.common.model.Player.modifyGold(int),7
net.sf.freecol.common.model.Player.modifyImmigration(int),5
"net.sf.freecol.common.model.Player.modifyIncomeAfterTaxes(GoodsType, int)",6
"net.sf.freecol.common.model.Player.modifyIncomeBeforeTaxes(GoodsType, int)",6
net.sf.freecol.common.model.Player.modifyLiberty(int),5
"net.sf.freecol.common.model.Player.modifySales(GoodsType, int)",6
net.sf.freecol.common.model.Player.owns(Ownable),6
"net.sf.freecol.common.model.Player.putNationSummary(Player, NationSummary)",6
net.sf.freecol.common.model.Player.putSettlementName(String),5
net.sf.freecol.common.model.Player.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Player.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Player.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Player.recalculateBellsBonus(),5
net.sf.freecol.common.model.Player.reduceImmigration(),3
net.sf.freecol.common.model.Player.refilterModelMessages(OptionGroup),7
net.sf.freecol.common.model.Player.reinitialiseMarket(),3
net.sf.freecol.common.model.Player.removeDisplayedModelMessages(),3
net.sf.freecol.common.model.Player.removeMissionBan(Player),5
net.sf.freecol.common.model.Player.removeOwnable(Ownable),7
net.sf.freecol.common.model.Player.removeSettlement(Settlement),6
net.sf.freecol.common.model.Player.removeTension(Player),6
net.sf.freecol.common.model.Player.removeTradeRoute(TradeRoute),6
net.sf.freecol.common.model.Player.removeUnit(Unit),6
net.sf.freecol.common.model.Player.resetIterators(),3
net.sf.freecol.common.model.Player.restoreActiveUnit(),7
net.sf.freecol.common.model.Player.send(ChangeSet),6
net.sf.freecol.common.model.Player.setAI(boolean),5
net.sf.freecol.common.model.Player.setAttackedByPrivateers(boolean),5
net.sf.freecol.common.model.Player.setBankrupt(boolean),5
net.sf.freecol.common.model.Player.setBannedMissions(Collection<Player>),5
net.sf.freecol.common.model.Player.setColonyComparator(Comparator<Colony>),5
net.sf.freecol.common.model.Player.setConnection(Connection),5
net.sf.freecol.common.model.Player.setCurrentFather(FoundingFather),6
net.sf.freecol.common.model.Player.setDead(boolean),6
net.sf.freecol.common.model.Player.setEntryTile(Tile),7
net.sf.freecol.common.model.Player.setEurope(Europe),5
net.sf.freecol.common.model.Player.setFoundingFathers(Set<FoundingFather>),5
net.sf.freecol.common.model.Player.setGold(int),5
net.sf.freecol.common.model.Player.setHistory(List<HistoryEvent>),5
net.sf.freecol.common.model.Player.setImmigration(int),5
net.sf.freecol.common.model.Player.setImmigrationRequired(int),6
net.sf.freecol.common.model.Player.setIndependentNationName(String),5
"net.sf.freecol.common.model.Player.setLastSales(Map<String, LastSale>)",5
net.sf.freecol.common.model.Player.setLiberty(int),5
net.sf.freecol.common.model.Player.setModelMessages(List<ModelMessage>),5
net.sf.freecol.common.model.Player.setMonarch(Monarch),5
net.sf.freecol.common.model.Player.setName(String),5
net.sf.freecol.common.model.Player.setNation(Nation),5
net.sf.freecol.common.model.Player.setNationType(NationType),5
net.sf.freecol.common.model.Player.setNewLandName(String),5
net.sf.freecol.common.model.Player.setNextGoingToUnit(Unit),6
net.sf.freecol.common.model.Player.setOfferedFathers(List<FoundingFather>),5
net.sf.freecol.common.model.Player.setPlayerType(PlayerType),6
net.sf.freecol.common.model.Player.setReady(boolean),5
net.sf.freecol.common.model.Player.setScore(int),5
"net.sf.freecol.common.model.Player.setStance(Player, Stance)",9
"net.sf.freecol.common.model.Player.setStances(Map<String, Stance>)",5
net.sf.freecol.common.model.Player.setTax(int),5
"net.sf.freecol.common.model.Player.setTension(Map<Player, Tension>)",5
"net.sf.freecol.common.model.Player.setTension(Player, Tension)",6
"net.sf.freecol.common.model.Player.strengthRatio(double, double)",7
net.sf.freecol.common.model.Player.toString(),3
net.sf.freecol.common.model.Player.updateImmigrationRequired(),4
net.sf.freecol.common.model.Player.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Player.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.PlayerTest.testAddAnotherPlayersUnit(),0
net.sf.freecol.common.model.PlayerTest.testClassicPlayers(),0
net.sf.freecol.common.model.PlayerTest.testEuropeanPlayer(Player),0
net.sf.freecol.common.model.PlayerTest.testFreecolPlayers(),0
net.sf.freecol.common.model.PlayerTest.testIndianPlayer(Player),0
net.sf.freecol.common.model.PlayerTest.testRoyalPlayer(Player),0
net.sf.freecol.common.model.PlayerTest.testTension(),0
net.sf.freecol.common.model.PlayerTest.testUnits(),0
"net.sf.freecol.common.model.PlunderType.PlunderType(FreeColXMLReader, Specification)",7
"net.sf.freecol.common.model.PlunderType.PlunderType(String, Specification)",6
net.sf.freecol.common.model.PlunderType.copyIn(T),3
net.sf.freecol.common.model.PlunderType.getPlunder(),5
net.sf.freecol.common.model.PlunderType.getXMLTagName(),3
net.sf.freecol.common.model.PlunderType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.PlunderType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.ProductionCache.ProductionCache(Colony),5
net.sf.freecol.common.model.ProductionCache.getGoodsCount(GoodsType),7
net.sf.freecol.common.model.ProductionCache.getNetProductionOf(GoodsType),7
net.sf.freecol.common.model.ProductionCache.getProductionInfo(Object),7
net.sf.freecol.common.model.ProductionCache.getProductionMap(),5
net.sf.freecol.common.model.ProductionCache.invalidate(),7
net.sf.freecol.common.model.ProductionCache.invalidate(GoodsType),7
net.sf.freecol.common.model.ProductionCache.isConsuming(GoodsType),6
net.sf.freecol.common.model.ProductionCache.isProducing(GoodsType),6
net.sf.freecol.common.model.ProductionCache.reallyUpdate(),16
net.sf.freecol.common.model.ProductionCache.update(),6
net.sf.freecol.common.model.ProductionInfo.addConsumption(AbstractGoods),0
net.sf.freecol.common.model.ProductionInfo.addMaximumConsumption(AbstractGoods),0
net.sf.freecol.common.model.ProductionInfo.addMaximumProduction(AbstractGoods),0
net.sf.freecol.common.model.ProductionInfo.addProduction(AbstractGoods),0
net.sf.freecol.common.model.ProductionInfo.addProduction(List<AbstractGoods>),0
"net.sf.freecol.common.model.ProductionInfo.append(StringBuilder, String, List<AbstractGoods>)",0
net.sf.freecol.common.model.ProductionInfo.atMaximumProduction(),5
net.sf.freecol.common.model.ProductionInfo.getConsumption(),0
net.sf.freecol.common.model.ProductionInfo.getConsumptionDeficit(),6
net.sf.freecol.common.model.ProductionInfo.getMaximumConsumption(),0
net.sf.freecol.common.model.ProductionInfo.getMaximumProduction(),0
net.sf.freecol.common.model.ProductionInfo.getProduction(),0
net.sf.freecol.common.model.ProductionInfo.getProductionDeficit(),6
net.sf.freecol.common.model.ProductionInfo.setConsumption(List<AbstractGoods>),0
net.sf.freecol.common.model.ProductionInfo.setMaximumConsumption(List<AbstractGoods>),0
net.sf.freecol.common.model.ProductionInfo.setMaximumProduction(List<AbstractGoods>),0
net.sf.freecol.common.model.ProductionInfo.setProduction(List<AbstractGoods>),0
net.sf.freecol.common.model.ProductionInfo.toString(),3
"net.sf.freecol.common.model.ProductionMap.ProductionTree.ProductionTree(AbstractGoods, AbstractGoods...)",0
net.sf.freecol.common.model.ProductionMap.ProductionTree.add(AbstractGoods),0
net.sf.freecol.common.model.ProductionMap.ProductionTree.get(GoodsType),0
net.sf.freecol.common.model.ProductionMap.ProductionTree.getLeafs(),0
net.sf.freecol.common.model.ProductionMap.ProductionTree.getRoot(),0
net.sf.freecol.common.model.ProductionMap.ProductionTree.remove(AbstractGoods),0
net.sf.freecol.common.model.ProductionMap.ProductionTree.setLeafs(List<AbstractGoods>),0
net.sf.freecol.common.model.ProductionMap.ProductionTree.setRoot(AbstractGoods),0
net.sf.freecol.common.model.ProductionMap.ProductionTree.toString(),3
net.sf.freecol.common.model.ProductionMap.add(AbstractGoods),0
net.sf.freecol.common.model.ProductionMap.add(List<AbstractGoods>),0
net.sf.freecol.common.model.ProductionMap.get(GoodsType),0
net.sf.freecol.common.model.ProductionMap.remove(AbstractGoods),0
net.sf.freecol.common.model.ProductionMap.remove(List<AbstractGoods>),0
net.sf.freecol.common.model.ProductionMap.toString(),3
"net.sf.freecol.common.model.ProductionType.ProductionType(AbstractGoods, boolean, String)",7
"net.sf.freecol.common.model.ProductionType.ProductionType(FreeColXMLReader, Specification)",7
"net.sf.freecol.common.model.ProductionType.ProductionType(GoodsType, GoodsType, int)",8
net.sf.freecol.common.model.ProductionType.ProductionType(List<AbstractGoods>),6
"net.sf.freecol.common.model.ProductionType.ProductionType(List<AbstractGoods>, List<AbstractGoods>)",7
net.sf.freecol.common.model.ProductionType.ProductionType(Specification),5
"net.sf.freecol.common.model.ProductionType.addInput(GoodsType, int)",6
net.sf.freecol.common.model.ProductionType.addOutput(AbstractGoods),5
"net.sf.freecol.common.model.ProductionType.addOutput(GoodsType, int)",6
net.sf.freecol.common.model.ProductionType.appliesExactly(String),7
net.sf.freecol.common.model.ProductionType.appliesTo(String),6
"net.sf.freecol.common.model.ProductionType.canProduce(GoodsType, Collection<ProductionType>)",9
net.sf.freecol.common.model.ProductionType.copyIn(T),3
net.sf.freecol.common.model.ProductionType.equals(Object),3
net.sf.freecol.common.model.ProductionType.getBestOutputFor(GoodsType),6
net.sf.freecol.common.model.ProductionType.getBestOutputType(),5
"net.sf.freecol.common.model.ProductionType.getBestProductionType(GoodsType, Collection<ProductionType>)",9
net.sf.freecol.common.model.ProductionType.getInputList(),5
net.sf.freecol.common.model.ProductionType.getInputs(),5
net.sf.freecol.common.model.ProductionType.getOutput(GoodsType),7
net.sf.freecol.common.model.ProductionType.getOutputList(),5
net.sf.freecol.common.model.ProductionType.getOutputs(),5
net.sf.freecol.common.model.ProductionType.getProductionLevel(),6
net.sf.freecol.common.model.ProductionType.getUnattended(),5
net.sf.freecol.common.model.ProductionType.getXMLTagName(),3
net.sf.freecol.common.model.ProductionType.hashCode(),3
net.sf.freecol.common.model.ProductionType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.ProductionType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.ProductionType.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.ProductionType.setInputs(List<AbstractGoods>),5
net.sf.freecol.common.model.ProductionType.setOutputs(List<AbstractGoods>),5
net.sf.freecol.common.model.ProductionType.setUnattended(boolean),5
net.sf.freecol.common.model.ProductionType.toString(),3
net.sf.freecol.common.model.ProductionType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.ProductionType.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.ProductionTypeTest.getGenericPotential(TileType, GoodsType)",0
net.sf.freecol.common.model.ProductionTypeTest.testArctic(),0
net.sf.freecol.common.model.ProductionTypeTest.testBellProduction(),0
net.sf.freecol.common.model.ProductionTypeTest.testBorealForest(),0
net.sf.freecol.common.model.ProductionTypeTest.testBroadleafForest(),0
net.sf.freecol.common.model.ProductionTypeTest.testCigarProduction(),0
net.sf.freecol.common.model.ProductionTypeTest.testClothProduction(),0
net.sf.freecol.common.model.ProductionTypeTest.testCoatProduction(),0
net.sf.freecol.common.model.ProductionTypeTest.testConiferForest(),0
net.sf.freecol.common.model.ProductionTypeTest.testCrossProduction(),0
net.sf.freecol.common.model.ProductionTypeTest.testDesert(),0
net.sf.freecol.common.model.ProductionTypeTest.testGrassland(),0
net.sf.freecol.common.model.ProductionTypeTest.testGreatRiver(),0
net.sf.freecol.common.model.ProductionTypeTest.testHammerProduction(),0
net.sf.freecol.common.model.ProductionTypeTest.testHighSeas(),0
net.sf.freecol.common.model.ProductionTypeTest.testHills(),0
net.sf.freecol.common.model.ProductionTypeTest.testHorseProduction(),0
net.sf.freecol.common.model.ProductionTypeTest.testLake(),0
net.sf.freecol.common.model.ProductionTypeTest.testMarsh(),0
net.sf.freecol.common.model.ProductionTypeTest.testMixedForest(),0
net.sf.freecol.common.model.ProductionTypeTest.testMountains(),0
net.sf.freecol.common.model.ProductionTypeTest.testMusketProduction(),0
net.sf.freecol.common.model.ProductionTypeTest.testOcean(),0
net.sf.freecol.common.model.ProductionTypeTest.testOtherBuildings(),0
net.sf.freecol.common.model.ProductionTypeTest.testPlains(),0
net.sf.freecol.common.model.ProductionTypeTest.testPrairie(),0
"net.sf.freecol.common.model.ProductionTypeTest.testProduction(Map<GoodsType, Integer>, Map<GoodsType, Integer>, List<ProductionType>)",0
net.sf.freecol.common.model.ProductionTypeTest.testRainForest(),0
net.sf.freecol.common.model.ProductionTypeTest.testRumProduction(),0
net.sf.freecol.common.model.ProductionTypeTest.testSavannah(),0
net.sf.freecol.common.model.ProductionTypeTest.testScrubForest(),0
net.sf.freecol.common.model.ProductionTypeTest.testSwamp(),0
net.sf.freecol.common.model.ProductionTypeTest.testToolsProduction(),0
net.sf.freecol.common.model.ProductionTypeTest.testTropicalForest(),0
net.sf.freecol.common.model.ProductionTypeTest.testTundra(),0
net.sf.freecol.common.model.ProductionTypeTest.testWetlandForest(),0
net.sf.freecol.common.model.RandomRange.RandomRange(FreeColXMLReader),7
"net.sf.freecol.common.model.RandomRange.RandomRange(int, int, int, int)",8
"net.sf.freecol.common.model.RandomRange.getAmount(String, Random, boolean)",9
net.sf.freecol.common.model.RandomRange.getFactor(),5
net.sf.freecol.common.model.RandomRange.getMaximum(),5
net.sf.freecol.common.model.RandomRange.getMinimum(),5
net.sf.freecol.common.model.RandomRange.getProbability(),5
net.sf.freecol.common.model.RandomRange.readAttributes(FreeColXMLReader),5
net.sf.freecol.common.model.RandomRange.writeAttributes(FreeColXMLWriter),8
net.sf.freecol.common.model.RandomRangeTest.testRandomRange(),0
net.sf.freecol.common.model.Region.Region(Game),5
"net.sf.freecol.common.model.Region.Region(Game, String)",6
net.sf.freecol.common.model.Region.RegionType.RegionType(boolean),5
net.sf.freecol.common.model.Region.RegionType.getClaimable(),4
net.sf.freecol.common.model.Region.RegionType.getKey(),5
net.sf.freecol.common.model.Region.RegionType.getNameKey(),3
net.sf.freecol.common.model.Region.RegionType.getUnknownKey(),5
net.sf.freecol.common.model.Region.addChild(Region),5
net.sf.freecol.common.model.Region.checkDiscover(Unit),11
net.sf.freecol.common.model.Region.copyIn(T),3
"net.sf.freecol.common.model.Region.discover(Player, Unit, Turn)",8
net.sf.freecol.common.model.Region.fixRegionKey(String),6
net.sf.freecol.common.model.Region.getChildren(),5
net.sf.freecol.common.model.Region.getClaimable(),5
net.sf.freecol.common.model.Region.getDiscoverable(),5
net.sf.freecol.common.model.Region.getDiscoverableRegion(),9
net.sf.freecol.common.model.Region.getDiscoveredBy(),5
net.sf.freecol.common.model.Region.getDiscoveredIn(),5
net.sf.freecol.common.model.Region.getDiscoverer(),5
net.sf.freecol.common.model.Region.getKey(),5
net.sf.freecol.common.model.Region.getLabel(),5
net.sf.freecol.common.model.Region.getName(),3
net.sf.freecol.common.model.Region.getParent(),5
net.sf.freecol.common.model.Region.getScoreValue(),5
net.sf.freecol.common.model.Region.getType(),5
net.sf.freecol.common.model.Region.getXMLTagName(),3
net.sf.freecol.common.model.Region.hasName(),5
net.sf.freecol.common.model.Region.isLeaf(),5
net.sf.freecol.common.model.Region.isPacific(),8
net.sf.freecol.common.model.Region.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Region.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Region.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Region.setChildren(List<Region>),5
net.sf.freecol.common.model.Region.setClaimable(boolean),5
net.sf.freecol.common.model.Region.setDiscoverable(boolean),5
net.sf.freecol.common.model.Region.setDiscoveredBy(Player),5
net.sf.freecol.common.model.Region.setDiscoveredIn(Turn),5
net.sf.freecol.common.model.Region.setName(String),3
net.sf.freecol.common.model.Region.setParent(Region),5
net.sf.freecol.common.model.Region.setScoreValue(int),5
net.sf.freecol.common.model.Region.toString(),3
net.sf.freecol.common.model.Region.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Region.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.Resource.Resource(Game, String)",6
"net.sf.freecol.common.model.Resource.Resource(Game, Tile, ResourceType)",9
"net.sf.freecol.common.model.Resource.Resource(Game, Tile, ResourceType, int)",10
"net.sf.freecol.common.model.Resource.applyBonus(GoodsType, UnitType, int)",3
"net.sf.freecol.common.model.Resource.canProduce(GoodsType, UnitType)",3
"net.sf.freecol.common.model.Resource.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.Resource.copyIn(T),3
net.sf.freecol.common.model.Resource.getBestGoodsType(),5
net.sf.freecol.common.model.Resource.getLayer(),3
net.sf.freecol.common.model.Resource.getNameKey(),3
"net.sf.freecol.common.model.Resource.getProductionModifiers(GoodsType, UnitType)",3
net.sf.freecol.common.model.Resource.getQuantity(),5
net.sf.freecol.common.model.Resource.getType(),5
net.sf.freecol.common.model.Resource.getXMLTagName(),3
net.sf.freecol.common.model.Resource.getZIndex(),3
net.sf.freecol.common.model.Resource.isComplete(),3
net.sf.freecol.common.model.Resource.isNatural(),3
net.sf.freecol.common.model.Resource.isTileTypeAllowed(TileType),3
net.sf.freecol.common.model.Resource.isUnlimited(),5
net.sf.freecol.common.model.Resource.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Resource.setQuantity(int),5
net.sf.freecol.common.model.Resource.toString(),3
"net.sf.freecol.common.model.Resource.useQuantity(GoodsType, UnitType, int)",9
net.sf.freecol.common.model.Resource.useQuantity(int),6
net.sf.freecol.common.model.Resource.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.ResourceType.ResourceType(String, Specification)",6
net.sf.freecol.common.model.ResourceType.copyIn(T),3
net.sf.freecol.common.model.ResourceType.getBestGoodsType(),5
net.sf.freecol.common.model.ResourceType.getMaxValue(),5
net.sf.freecol.common.model.ResourceType.getMinValue(),5
net.sf.freecol.common.model.ResourceType.getXMLTagName(),3
net.sf.freecol.common.model.ResourceType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.ResourceType.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.Role.Role(String, Specification)",6
"net.sf.freecol.common.model.Role.RoleChange.RoleChange(String, String)",0
net.sf.freecol.common.model.Role.RoleChange.getCapture(Specification),0
net.sf.freecol.common.model.Role.RoleChange.getFrom(Specification),0
"net.sf.freecol.common.model.Role.addRoleChange(String, String)",6
"net.sf.freecol.common.model.Role.canBeBuiltInColony(Colony, List<BuildableType>)",3
net.sf.freecol.common.model.Role.copyIn(T),3
"net.sf.freecol.common.model.Role.getAvailableRoles(Player, UnitType, List<Role>)",8
net.sf.freecol.common.model.Role.getDefence(),5
net.sf.freecol.common.model.Role.getDowngrade(),5
net.sf.freecol.common.model.Role.getExpertUnit(),5
"net.sf.freecol.common.model.Role.getGoodsDifference(Role, int, Role, int)",14
net.sf.freecol.common.model.Role.getMaximumCount(),5
net.sf.freecol.common.model.Role.getOffence(),5
net.sf.freecol.common.model.Role.getRequiredGoods(int),7
net.sf.freecol.common.model.Role.getRequiredGoodsList(int),6
net.sf.freecol.common.model.Role.getRequiredGoodsPrice(Market),6
net.sf.freecol.common.model.Role.getRoleChanges(),5
net.sf.freecol.common.model.Role.getRoleIdSuffix(String),6
net.sf.freecol.common.model.Role.getRoleIndex(),10
net.sf.freecol.common.model.Role.getRoleSuffix(),5
net.sf.freecol.common.model.Role.getXMLTagName(),3
net.sf.freecol.common.model.Role.isCompatibleWith(Role),6
net.sf.freecol.common.model.Role.isDefaultRole(),5
net.sf.freecol.common.model.Role.isDefaultRoleId(String),6
net.sf.freecol.common.model.Role.isDefensive(),5
net.sf.freecol.common.model.Role.isOffensive(),5
net.sf.freecol.common.model.Role.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Role.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Role.readChildren(FreeColXMLReader),3
"net.sf.freecol.common.model.Role.rolesCompatible(Role, Role)",7
net.sf.freecol.common.model.Role.setDowngrade(Role),5
net.sf.freecol.common.model.Role.setExpertUnit(UnitType),5
net.sf.freecol.common.model.Role.setMaximumCount(int),5
net.sf.freecol.common.model.Role.setRoleChanges(List<RoleChange>),5
net.sf.freecol.common.model.Role.toFullString(),5
net.sf.freecol.common.model.Role.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Role.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.RoleTest.testCompatibleRoles(),0
net.sf.freecol.common.model.RoleTest.testGetRoleWithAbility(),0
net.sf.freecol.common.model.RoleTest.testGoodsDifference(),0
net.sf.freecol.common.model.RoleTest.testMilitaryRoles(),0
net.sf.freecol.common.model.RoleTest.testRoleComparator(),0
"net.sf.freecol.common.model.SchoolTest.addSchoolToColony(Game, Colony, SchoolLevel)",0
"net.sf.freecol.common.model.SchoolTest.getUnitList(Colony, UnitType)",7
net.sf.freecol.common.model.SchoolTest.testChangeTeachers(),0
net.sf.freecol.common.model.SchoolTest.testEducationOption(),0
net.sf.freecol.common.model.SchoolTest.testUpgrades(),0
net.sf.freecol.common.model.Scope.Scope(),3
net.sf.freecol.common.model.Scope.Scope(FreeColXMLReader),6
net.sf.freecol.common.model.Scope.appliesTo(FreeColObject),6
net.sf.freecol.common.model.Scope.copyIn(T),3
net.sf.freecol.common.model.Scope.equals(Object),3
net.sf.freecol.common.model.Scope.getAbilityId(),5
net.sf.freecol.common.model.Scope.getAbilityValue(),0
net.sf.freecol.common.model.Scope.getFeatureString(),5
net.sf.freecol.common.model.Scope.getKey(),5
net.sf.freecol.common.model.Scope.getMatchNegated(),5
net.sf.freecol.common.model.Scope.getMatchesNull(),5
net.sf.freecol.common.model.Scope.getMethodName(),0
net.sf.freecol.common.model.Scope.getMethodValue(),0
net.sf.freecol.common.model.Scope.getType(),0
net.sf.freecol.common.model.Scope.getXMLTagName(),3
net.sf.freecol.common.model.Scope.hashCode(),3
net.sf.freecol.common.model.Scope.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Scope.setAbilityId(String),5
net.sf.freecol.common.model.Scope.setAbilityValue(boolean),0
net.sf.freecol.common.model.Scope.setMatchNegated(boolean),0
net.sf.freecol.common.model.Scope.setMatchesNull(boolean),7
net.sf.freecol.common.model.Scope.setMethodName(String),0
net.sf.freecol.common.model.Scope.setMethodValue(String),0
net.sf.freecol.common.model.Scope.setType(String),0
net.sf.freecol.common.model.Scope.toString(),3
net.sf.freecol.common.model.Scope.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.ScopeContainer.ScopeContainer(),3
net.sf.freecol.common.model.ScopeContainer.add(Scope),5
net.sf.freecol.common.model.ScopeContainer.addAll(Collection<Scope>),5
net.sf.freecol.common.model.ScopeContainer.addAll(ScopeContainer),5
"net.sf.freecol.common.model.ScopeContainer.addScope(ScopeContainer, Scope)",0
net.sf.freecol.common.model.ScopeContainer.appliesTo(FreeColObject),8
net.sf.freecol.common.model.ScopeContainer.clear(),3
net.sf.freecol.common.model.ScopeContainer.clearScopes(ScopeContainer),0
"net.sf.freecol.common.model.ScopeContainer.equalScopes(ScopeContainer, ScopeContainer)",0
net.sf.freecol.common.model.ScopeContainer.equals(Object),3
net.sf.freecol.common.model.ScopeContainer.get(),5
net.sf.freecol.common.model.ScopeContainer.getList(),5
net.sf.freecol.common.model.ScopeContainer.getScopeList(ScopeContainer),0
net.sf.freecol.common.model.ScopeContainer.getScopes(ScopeContainer),0
net.sf.freecol.common.model.ScopeContainer.hashCode(),3
net.sf.freecol.common.model.ScopeContainer.isEmpty(),5
net.sf.freecol.common.model.ScopeContainer.isScopeContainerEmpty(ScopeContainer),0
net.sf.freecol.common.model.ScopeContainer.remove(Scope),5
"net.sf.freecol.common.model.ScopeContainer.removeScope(ScopeContainer, Scope)",0
"net.sf.freecol.common.model.ScopeContainer.scopeContainerAppliesTo(ScopeContainer, FreeColObject)",0
"net.sf.freecol.common.model.ScopeContainer.scopeContainerToXML(ScopeContainer, FreeColXMLWriter)",0
net.sf.freecol.common.model.ScopeContainer.set(List<Scope>),5
"net.sf.freecol.common.model.ScopeContainer.setScopes(ScopeContainer, Collection<Scope>)",0
net.sf.freecol.common.model.ScopeContainer.sort(Comparator<Scope>),5
net.sf.freecol.common.model.ScopeContainer.toXML(FreeColXMLWriter),7
net.sf.freecol.common.model.ScopeTest.testAbilityScope(),0
net.sf.freecol.common.model.ScopeTest.testCombinedScope(),0
net.sf.freecol.common.model.ScopeTest.testEmptyScope(),0
net.sf.freecol.common.model.ScopeTest.testEquality(),0
net.sf.freecol.common.model.ScopeTest.testGameObjects(),0
net.sf.freecol.common.model.ScopeTest.testMatchesNull(),0
net.sf.freecol.common.model.ScopeTest.testMethodScope(),0
net.sf.freecol.common.model.ScopeTest.testTypeScope(),0
net.sf.freecol.common.model.SerializationTest.buildSource(FreeColObject),0
net.sf.freecol.common.model.SerializationTest.buildValidator(String),0
"net.sf.freecol.common.model.SerializationTest.logParseFailure(SAXParseException, String)",0
net.sf.freecol.common.model.SerializationTest.testDifficulty(),0
net.sf.freecol.common.model.SerializationTest.testGeneratedLists(),0
net.sf.freecol.common.model.SerializationTest.testSpecification(),0
net.sf.freecol.common.model.SerializationTest.testStandardMaps(),0
net.sf.freecol.common.model.SerializationTest.testStringTemplate(),0
net.sf.freecol.common.model.SerializationTest.testValidation(),0
net.sf.freecol.common.model.SerializationTest.validateMap(String),0
"net.sf.freecol.common.model.Settlement.Settlement(Game, Player, String, Tile)",8
"net.sf.freecol.common.model.Settlement.Settlement(Game, String)",8
net.sf.freecol.common.model.Settlement.addTile(Tile),11
net.sf.freecol.common.model.Settlement.canBombardEnemyShip(),7
net.sf.freecol.common.model.Settlement.canImproveUnitMilitaryRole(Unit),7
net.sf.freecol.common.model.Settlement.canProvideGoods(List<AbstractGoods>),8
net.sf.freecol.common.model.Settlement.changeOwner(Player),12
net.sf.freecol.common.model.Settlement.changeType(SettlementType),5
"net.sf.freecol.common.model.Settlement.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.Settlement.copyIn(T),3
net.sf.freecol.common.model.Settlement.disposeResources(),5
"net.sf.freecol.common.model.Settlement.equipForRole(Unit, Role, int)",3
net.sf.freecol.common.model.Settlement.exciseSettlement(),8
net.sf.freecol.common.model.Settlement.getAllUnitsList(),6
net.sf.freecol.common.model.Settlement.getConsumptionOf(GoodsType),7
net.sf.freecol.common.model.Settlement.getConsumptionOf(List<GoodsType>),7
net.sf.freecol.common.model.Settlement.getFeatureContainer(),3
net.sf.freecol.common.model.Settlement.getFoodConsumption(),5
net.sf.freecol.common.model.Settlement.getHighSeasCount(),6
net.sf.freecol.common.model.Settlement.getImmigration(),5
net.sf.freecol.common.model.Settlement.getLiberty(),5
net.sf.freecol.common.model.Settlement.getLineOfSight(),5
net.sf.freecol.common.model.Settlement.getLinkTarget(Player),3
net.sf.freecol.common.model.Settlement.getLocationImageKey(),3
net.sf.freecol.common.model.Settlement.getLocationLabel(),3
net.sf.freecol.common.model.Settlement.getName(),5
net.sf.freecol.common.model.Settlement.getNoAddReason(Locatable),3
net.sf.freecol.common.model.Settlement.getOwnedTiles(),5
net.sf.freecol.common.model.Settlement.getOwner(),3
"net.sf.freecol.common.model.Settlement.getPlunder(Unit, Random)",7
net.sf.freecol.common.model.Settlement.getRadius(),6
net.sf.freecol.common.model.Settlement.getRank(),3
net.sf.freecol.common.model.Settlement.getSettlement(),3
net.sf.freecol.common.model.Settlement.getTile(),3
net.sf.freecol.common.model.Settlement.getType(),5
net.sf.freecol.common.model.Settlement.getVisibleTileSet(),5
net.sf.freecol.common.model.Settlement.getWarehouseCapacity(),6
net.sf.freecol.common.model.Settlement.isCapital(),5
net.sf.freecol.common.model.Settlement.isConnectedPort(),7
net.sf.freecol.common.model.Settlement.isLandLocked(),5
net.sf.freecol.common.model.Settlement.placeSettlement(boolean),8
net.sf.freecol.common.model.Settlement.priceGoods(List<AbstractGoods>),3
net.sf.freecol.common.model.Settlement.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Settlement.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Settlement.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Settlement.removeTile(Tile),5
net.sf.freecol.common.model.Settlement.setCapital(boolean),0
net.sf.freecol.common.model.Settlement.setName(String),7
net.sf.freecol.common.model.Settlement.setOwnedTiles(Collection<Tile>),5
net.sf.freecol.common.model.Settlement.setOwner(Player),6
net.sf.freecol.common.model.Settlement.setType(SettlementType),5
net.sf.freecol.common.model.Settlement.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Settlement.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.SettlementTest.testCanImproveUnitMilitaryRole(),0
net.sf.freecol.common.model.SettlementTest.testColonyClaimsWater(),0
net.sf.freecol.common.model.SettlementTest.testColonyRadius(),0
net.sf.freecol.common.model.SettlementTest.testLineOfSight(),0
net.sf.freecol.common.model.SettlementTest.testSettlementDoesNotClaimWater(),0
net.sf.freecol.common.model.SettlementTest.testSettlementRadius(),0
"net.sf.freecol.common.model.SettlementType.SettlementType(FreeColXMLReader, Specification)",7
"net.sf.freecol.common.model.SettlementType.SettlementType(String, Specification)",6
net.sf.freecol.common.model.SettlementType.addPlunderType(PlunderType),5
net.sf.freecol.common.model.SettlementType.copyIn(T),3
net.sf.freecol.common.model.SettlementType.getClaimableRadius(),5
net.sf.freecol.common.model.SettlementType.getConvertThreshold(),5
net.sf.freecol.common.model.SettlementType.getExtraClaimableRadius(),5
net.sf.freecol.common.model.SettlementType.getGifts(),5
net.sf.freecol.common.model.SettlementType.getMaximumGrowth(),6
net.sf.freecol.common.model.SettlementType.getMaximumSize(),5
net.sf.freecol.common.model.SettlementType.getMinimumGrowth(),6
net.sf.freecol.common.model.SettlementType.getMinimumSize(),5
net.sf.freecol.common.model.SettlementType.getPlunderRange(Unit),6
net.sf.freecol.common.model.SettlementType.getPlunderTypes(),5
net.sf.freecol.common.model.SettlementType.getTradeBonus(),5
net.sf.freecol.common.model.SettlementType.getVisibleRadius(),5
net.sf.freecol.common.model.SettlementType.getWanderingRadius(),5
net.sf.freecol.common.model.SettlementType.getWarehouseCapacity(),5
net.sf.freecol.common.model.SettlementType.getXMLTagName(),3
net.sf.freecol.common.model.SettlementType.isCapital(),5
net.sf.freecol.common.model.SettlementType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.SettlementType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.SettlementType.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.SettlementType.setPlunderTypes(List<PlunderType>),5
net.sf.freecol.common.model.SettlementType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.SettlementType.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.SimpleCombatModel.SimpleCombatModel(),3
"net.sf.freecol.common.model.SimpleCombatModel.addLandDefensiveModifiers(FreeColGameObject, Unit, Set<Modifier>)",7
"net.sf.freecol.common.model.SimpleCombatModel.addLandOffensiveModifiers(Unit, FreeColGameObject, Set<Modifier>)",7
"net.sf.freecol.common.model.SimpleCombatModel.addNavalDefensiveModifiers(Unit, Set<Modifier>)",6
"net.sf.freecol.common.model.SimpleCombatModel.addNavalOffensiveModifiers(Unit, Set<Modifier>)",6
"net.sf.freecol.common.model.SimpleCombatModel.addPopularSupportBonus(Colony, Unit, Set<Modifier>)",7
"net.sf.freecol.common.model.SimpleCombatModel.calculateCombatOdds(FreeColGameObject, FreeColGameObject)",7
"net.sf.freecol.common.model.SimpleCombatModel.calculateCombatOdds(FreeColGameObject, FreeColGameObject, LogBuilder)",8
"net.sf.freecol.common.model.SimpleCombatModel.generateAttackResult(Random, FreeColGameObject, FreeColGameObject)",9
"net.sf.freecol.common.model.SimpleCombatModel.getDefencePower(FreeColGameObject, FreeColGameObject)",7
"net.sf.freecol.common.model.SimpleCombatModel.getDefencePower(FreeColGameObject, FreeColGameObject, LogBuilder)",8
"net.sf.freecol.common.model.SimpleCombatModel.getDefensiveModifiers(FreeColGameObject, FreeColGameObject)",7
"net.sf.freecol.common.model.SimpleCombatModel.getOffencePower(FreeColGameObject, FreeColGameObject)",7
"net.sf.freecol.common.model.SimpleCombatModel.getOffencePower(FreeColGameObject, FreeColGameObject, LogBuilder)",8
"net.sf.freecol.common.model.SimpleCombatModel.getOffensiveModifiers(FreeColGameObject, FreeColGameObject)",7
net.sf.freecol.common.model.SimpleCombatModel.hasStrongDefenceModifier(FreeColObject),6
"net.sf.freecol.common.model.SimpleCombatModel.isAmbush(FreeColGameObject, FreeColGameObject)",7
"net.sf.freecol.common.model.SimpleCombatModel.logModifiers(LogBuilder, Set<Modifier>)",6
"net.sf.freecol.common.model.SimpleCombatModel.resolveAttack(Unit, Unit, boolean, double, List<CombatEffectType>)",9
net.sf.freecol.common.model.SoLTest.testSoL(),0
net.sf.freecol.common.model.Specification.AbilityReader.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Specification.ModifierReader.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Specification.OptionReader.readChild(FreeColXMLReader),0
net.sf.freecol.common.model.Specification.OptionReader.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Specification.Source.Source(String),5
net.sf.freecol.common.model.Specification.Source.getXMLTagName(),3
net.sf.freecol.common.model.Specification.Source.toString(),3
net.sf.freecol.common.model.Specification.Source.toXML(FreeColXMLWriter),3
net.sf.freecol.common.model.Specification.Specification(),3
net.sf.freecol.common.model.Specification.Specification(FreeColXMLReader),7
net.sf.freecol.common.model.Specification.Specification(InputStream),7
"net.sf.freecol.common.model.Specification.TypeReader.TypeReader(Class<T>, List<T>)",6
net.sf.freecol.common.model.Specification.TypeReader.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Specification.addAbility(Ability),5
net.sf.freecol.common.model.Specification.addAbility(String),7
net.sf.freecol.common.model.Specification.addAbstractOption(AbstractOption),5
net.sf.freecol.common.model.Specification.addModifier(Modifier),5
"net.sf.freecol.common.model.Specification.addOptionGroup(OptionGroup, boolean)",6
net.sf.freecol.common.model.Specification.addTestFather(FoundingFather),5
"net.sf.freecol.common.model.Specification.addType(String, FreeColSpecObjectType)",6
net.sf.freecol.common.model.Specification.applyDifficultyLevel(OptionGroup),8
net.sf.freecol.common.model.Specification.applyDifficultyLevel(String),6
net.sf.freecol.common.model.Specification.applyFixes(),5
"net.sf.freecol.common.model.Specification.checkDifficultyIntegerOption(String, String, LogBuilder, int)",0
"net.sf.freecol.common.model.Specification.checkDifficultyOptionGroup(String, LogBuilder, String...)",0
"net.sf.freecol.common.model.Specification.checkDifficultyPercentageOption(String, String, LogBuilder, int)",0
"net.sf.freecol.common.model.Specification.checkDifficultyUnitListOption(String, String, LogBuilder)",0
"net.sf.freecol.common.model.Specification.checkOp(String, String, R, Class<T>)",13
net.sf.freecol.common.model.Specification.clean(String),10
net.sf.freecol.common.model.Specification.clearEuropeanNationalAdvantages(),3
net.sf.freecol.common.model.Specification.compareVersion(String),8
net.sf.freecol.common.model.Specification.disableEditing(),3
"net.sf.freecol.common.model.Specification.dropOptions(AbstractOption, Collection<AbstractOption>)",6
"net.sf.freecol.common.model.Specification.findType(String, Class<T>)",8
net.sf.freecol.common.model.Specification.fixDifficultyOptions(),9
net.sf.freecol.common.model.Specification.fixGameOptions(),9
net.sf.freecol.common.model.Specification.fixMapGeneratorOptions(),9
net.sf.freecol.common.model.Specification.fixOrphanOptions(),6
net.sf.freecol.common.model.Specification.fixRoles(),8
net.sf.freecol.common.model.Specification.fixSpec(),5
net.sf.freecol.common.model.Specification.fixUnitChanges(),0
net.sf.freecol.common.model.Specification.generateDynamicOptions(),6
net.sf.freecol.common.model.Specification.getAbilities(String),6
net.sf.freecol.common.model.Specification.getAge(Turn),6
net.sf.freecol.common.model.Specification.getBuildableType(String),0
net.sf.freecol.common.model.Specification.getBuildableUnitTypes(),5
net.sf.freecol.common.model.Specification.getBuildingType(String),6
net.sf.freecol.common.model.Specification.getBuildingTypeList(),0
net.sf.freecol.common.model.Specification.getDefaultNationType(),0
net.sf.freecol.common.model.Specification.getDefaultRole(),5
net.sf.freecol.common.model.Specification.getDefaultUnitType(),5
net.sf.freecol.common.model.Specification.getDefaultUnitType(NationType),11
net.sf.freecol.common.model.Specification.getDefaultUnitType(Player),8
net.sf.freecol.common.model.Specification.getDifficultyLevel(),5
net.sf.freecol.common.model.Specification.getDifficultyLevels(),5
net.sf.freecol.common.model.Specification.getDifficultyOptionGroup(),5
net.sf.freecol.common.model.Specification.getDifficultyOptionGroup(String),7
net.sf.freecol.common.model.Specification.getDisaster(String),6
net.sf.freecol.common.model.Specification.getDisasters(),0
net.sf.freecol.common.model.Specification.getEuropeanNationTypes(),0
net.sf.freecol.common.model.Specification.getEuropeanNations(),0
net.sf.freecol.common.model.Specification.getEvent(String),6
net.sf.freecol.common.model.Specification.getEvents(),0
net.sf.freecol.common.model.Specification.getExpertForProducing(GoodsType),6
net.sf.freecol.common.model.Specification.getFarmedGoodsTypeList(),0
net.sf.freecol.common.model.Specification.getFastestLandUnitType(),5
net.sf.freecol.common.model.Specification.getFastestNavalUnitType(),5
net.sf.freecol.common.model.Specification.getFoodGoodsTypeList(),0
net.sf.freecol.common.model.Specification.getFoundingFather(String),6
net.sf.freecol.common.model.Specification.getFoundingFathers(),0
net.sf.freecol.common.model.Specification.getGameOptions(),0
net.sf.freecol.common.model.Specification.getGoodsType(String),6
net.sf.freecol.common.model.Specification.getGoodsTypeList(),0
net.sf.freecol.common.model.Specification.getHillsTileTypeList(),0
net.sf.freecol.common.model.Specification.getId(),5
net.sf.freecol.common.model.Specification.getImmigrationGoodsTypeList(),0
net.sf.freecol.common.model.Specification.getIndianNationTypes(),0
net.sf.freecol.common.model.Specification.getIndianNations(),0
net.sf.freecol.common.model.Specification.getInitialPrice(GoodsType),7
net.sf.freecol.common.model.Specification.getLibertyGoodsTypeList(),0
net.sf.freecol.common.model.Specification.getMapGeneratorOptions(),0
net.sf.freecol.common.model.Specification.getMilitaryRoles(),5
net.sf.freecol.common.model.Specification.getMilitaryRolesList(),6
net.sf.freecol.common.model.Specification.getMissionaryRole(),5
net.sf.freecol.common.model.Specification.getModifiers(String),6
net.sf.freecol.common.model.Specification.getMountainsTileTypeList(),0
net.sf.freecol.common.model.Specification.getNation(String),6
net.sf.freecol.common.model.Specification.getNationType(String),6
net.sf.freecol.common.model.Specification.getNationTypes(),0
net.sf.freecol.common.model.Specification.getNations(),0
"net.sf.freecol.common.model.Specification.getNeededTurnsOfTraining(UnitType, UnitType)",8
net.sf.freecol.common.model.Specification.getNewWorldGoodsTypeList(),0
net.sf.freecol.common.model.Specification.getNewWorldLuxuryGoodsTypeList(),0
"net.sf.freecol.common.model.Specification.getOption(String, Class<T>)",3
net.sf.freecol.common.model.Specification.getOptionGroup(String),3
net.sf.freecol.common.model.Specification.getPioneerRole(),5
net.sf.freecol.common.model.Specification.getPrimaryFoodType(),10
net.sf.freecol.common.model.Specification.getREFNationTypes(),0
net.sf.freecol.common.model.Specification.getREFNations(),0
net.sf.freecol.common.model.Specification.getREFRoles(boolean),6
net.sf.freecol.common.model.Specification.getREFRolesList(boolean),6
net.sf.freecol.common.model.Specification.getREFUnitTypes(boolean),6
net.sf.freecol.common.model.Specification.getRawBuildingGoodsTypeList(),0
net.sf.freecol.common.model.Specification.getRawMaterialsForStorableBuildingMaterials(),0
net.sf.freecol.common.model.Specification.getRawMaterialsForUnstorableBuildingMaterials(),0
net.sf.freecol.common.model.Specification.getResourceType(String),6
net.sf.freecol.common.model.Specification.getResourceTypeList(),0
net.sf.freecol.common.model.Specification.getRole(String),6
"net.sf.freecol.common.model.Specification.getRoleWithAbility(String, List<Role>)",9
net.sf.freecol.common.model.Specification.getRoles(),5
net.sf.freecol.common.model.Specification.getRolesList(),5
net.sf.freecol.common.model.Specification.getScoutRole(),5
net.sf.freecol.common.model.Specification.getStorableGoodsTypeList(),0
net.sf.freecol.common.model.Specification.getTileImprovementType(String),6
net.sf.freecol.common.model.Specification.getTileImprovementTypeList(),0
net.sf.freecol.common.model.Specification.getTileType(String),6
net.sf.freecol.common.model.Specification.getTileTypeList(),0
net.sf.freecol.common.model.Specification.getType(String),6
"net.sf.freecol.common.model.Specification.getType(String, Class<T>)",8
"net.sf.freecol.common.model.Specification.getTypesProviding(String, boolean)",8
"net.sf.freecol.common.model.Specification.getTypesWithAbility(Class<T>, String...)",9
"net.sf.freecol.common.model.Specification.getTypesWithoutAbility(Class<T>, String...)",9
"net.sf.freecol.common.model.Specification.getUnitChange(String, UnitType)",11
"net.sf.freecol.common.model.Specification.getUnitChange(String, UnitType, UnitType)",12
net.sf.freecol.common.model.Specification.getUnitChangeType(String),8
net.sf.freecol.common.model.Specification.getUnitChangeTypeList(),5
"net.sf.freecol.common.model.Specification.getUnitChanges(String, UnitType)",10
net.sf.freecol.common.model.Specification.getUnitType(String),6
net.sf.freecol.common.model.Specification.getUnitTypeList(),0
net.sf.freecol.common.model.Specification.getUnitTypesPurchasedInEurope(Player),6
net.sf.freecol.common.model.Specification.getUnitTypesTrainedInEurope(Player),6
net.sf.freecol.common.model.Specification.getUnitTypesWithAbility(String...),6
net.sf.freecol.common.model.Specification.getUnitTypesWithoutAbility(String...),6
net.sf.freecol.common.model.Specification.getUnknownEnemyNation(),5
net.sf.freecol.common.model.Specification.getVersion(),5
net.sf.freecol.common.model.Specification.getXMLTagName(),3
net.sf.freecol.common.model.Specification.hasAbility(String),0
"net.sf.freecol.common.model.Specification.hasOption(String, Class<T>)",3
net.sf.freecol.common.model.Specification.load(InputStream),6
net.sf.freecol.common.model.Specification.loadMods(List<FreeColModFile>),6
"net.sf.freecol.common.model.Specification.mergeGameOptions(OptionGroup, String)",8
net.sf.freecol.common.model.Specification.mergeGroup(OptionGroup),7
"net.sf.freecol.common.model.Specification.mergeMapGeneratorOptions(OptionGroup, String)",8
"net.sf.freecol.common.model.Specification.newType(String, Class<T>)",9
"net.sf.freecol.common.model.Specification.prepare(Advantages, OptionGroup)",6
"net.sf.freecol.common.model.Specification.prepare(Advantages, String)",6
net.sf.freecol.common.model.Specification.readFromXML(FreeColXMLReader),7
net.sf.freecol.common.model.Specification.removeType(String),6
net.sf.freecol.common.model.Specification.setDifficultyOptionGroup(OptionGroup),5
net.sf.freecol.common.model.Specification.setGameOptions(OptionGroup),0
net.sf.freecol.common.model.Specification.setMapGeneratorOptions(OptionGroup),0
net.sf.freecol.common.model.Specification.toXML(FreeColXMLWriter),7
net.sf.freecol.common.model.Specification.updateGameAndMapOptions(),5
"net.sf.freecol.common.model.Specification.writeSection(FreeColXMLWriter, String, Collection<T>)",0
net.sf.freecol.common.model.SpecificationTest.testExtends(),0
net.sf.freecol.common.model.SpecificationTest.testExtendsDelete(),0
net.sf.freecol.common.model.SpecificationTest.testFoundingFathers(),0
net.sf.freecol.common.model.SpecificationTest.testGetDefaultUnitType(),0
net.sf.freecol.common.model.SpecificationTest.testGoodsTypes(),0
net.sf.freecol.common.model.SpecificationTest.testLoad(),4
net.sf.freecol.common.model.SpecificationTest.testLoadMods(),0
net.sf.freecol.common.model.SpecificationTest.testModifiers(),0
net.sf.freecol.common.model.SpecificationTest.testNationTypes(),0
net.sf.freecol.common.model.SpecificationTest.testNations(),0
net.sf.freecol.common.model.SpecificationTest.testRequiredAbilitiesForRoles(),0
net.sf.freecol.common.model.SpecificationTest.testUnitAbilities(),3
net.sf.freecol.common.model.Stance.badStance(),0
net.sf.freecol.common.model.Stance.badTransition(Stance),0
net.sf.freecol.common.model.Stance.getKey(),5
net.sf.freecol.common.model.Stance.getNameKey(),3
net.sf.freecol.common.model.Stance.getOtherStanceChangeKey(),6
net.sf.freecol.common.model.Stance.getStanceChangeKey(),5
net.sf.freecol.common.model.Stance.getStanceFromTension(Tension),9
net.sf.freecol.common.model.Stance.getTensionModifier(Stance),7
net.sf.freecol.common.model.Stance.isIncitable(),5
"net.sf.freecol.common.model.StanceTradeItem.StanceTradeItem(Game, FreeColXMLReader)",7
"net.sf.freecol.common.model.StanceTradeItem.StanceTradeItem(Game, Player, Player, Stance)",8
net.sf.freecol.common.model.StanceTradeItem.copyIn(T),3
net.sf.freecol.common.model.StanceTradeItem.equals(Object),3
net.sf.freecol.common.model.StanceTradeItem.evaluateFor(Player),3
net.sf.freecol.common.model.StanceTradeItem.getLabel(),3
net.sf.freecol.common.model.StanceTradeItem.getStance(),3
net.sf.freecol.common.model.StanceTradeItem.getXMLTagName(),3
net.sf.freecol.common.model.StanceTradeItem.hashCode(),3
net.sf.freecol.common.model.StanceTradeItem.isUnique(),3
net.sf.freecol.common.model.StanceTradeItem.isValid(),3
net.sf.freecol.common.model.StanceTradeItem.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.StanceTradeItem.setStance(Stance),3
net.sf.freecol.common.model.StanceTradeItem.toString(),3
net.sf.freecol.common.model.StanceTradeItem.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.StringTemplate.StringTemplate(),3
net.sf.freecol.common.model.StringTemplate.StringTemplate(FreeColXMLReader),6
"net.sf.freecol.common.model.StringTemplate.StringTemplate(String, String, TemplateType)",7
"net.sf.freecol.common.model.StringTemplate.StringTemplate(String, StringTemplate)",6
net.sf.freecol.common.model.StringTemplate.add(String),9
"net.sf.freecol.common.model.StringTemplate.add(String, String)",10
"net.sf.freecol.common.model.StringTemplate.addAmount(String, Number)",8
net.sf.freecol.common.model.StringTemplate.addKey(String),5
net.sf.freecol.common.model.StringTemplate.addName(String),9
"net.sf.freecol.common.model.StringTemplate.addName(String, FreeColObject)",10
"net.sf.freecol.common.model.StringTemplate.addName(String, String)",10
net.sf.freecol.common.model.StringTemplate.addNamed(Named),7
"net.sf.freecol.common.model.StringTemplate.addNamed(String, Named)",8
"net.sf.freecol.common.model.StringTemplate.addPair(String, StringTemplate)",6
net.sf.freecol.common.model.StringTemplate.addReplacement(StringTemplate),5
"net.sf.freecol.common.model.StringTemplate.addStringTemplate(String, StringTemplate)",10
net.sf.freecol.common.model.StringTemplate.addStringTemplate(StringTemplate),9
"net.sf.freecol.common.model.StringTemplate.addTagged(String, String)",11
"net.sf.freecol.common.model.StringTemplate.complete(String, StringTemplate)",9
"net.sf.freecol.common.model.StringTemplate.copy(String, StringTemplate)",0
net.sf.freecol.common.model.StringTemplate.copyIn(T),3
net.sf.freecol.common.model.StringTemplate.entryList(),5
net.sf.freecol.common.model.StringTemplate.equals(Object),3
net.sf.freecol.common.model.StringTemplate.getDefaultId(),5
net.sf.freecol.common.model.StringTemplate.getReplacement(String),6
net.sf.freecol.common.model.StringTemplate.getTemplateType(),5
net.sf.freecol.common.model.StringTemplate.getXMLTagName(),3
net.sf.freecol.common.model.StringTemplate.hashCode(),3
net.sf.freecol.common.model.StringTemplate.isEmpty(),5
net.sf.freecol.common.model.StringTemplate.key(Named),0
net.sf.freecol.common.model.StringTemplate.key(String),0
net.sf.freecol.common.model.StringTemplate.label(String),0
net.sf.freecol.common.model.StringTemplate.name(String),0
net.sf.freecol.common.model.StringTemplate.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.StringTemplate.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.StringTemplate.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.StringTemplate.setDefaultId(String),5
"net.sf.freecol.common.model.StringTemplate.setDefaultId(String, Class<T>)",9
net.sf.freecol.common.model.StringTemplate.template(Named),0
net.sf.freecol.common.model.StringTemplate.template(String),0
net.sf.freecol.common.model.StringTemplate.toString(),3
net.sf.freecol.common.model.StringTemplate.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.StringTemplate.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.Tension.Level.Level(int),0
net.sf.freecol.common.model.Tension.Level.getKey(),5
net.sf.freecol.common.model.Tension.Level.getLimit(),0
net.sf.freecol.common.model.Tension.Tension(),3
net.sf.freecol.common.model.Tension.Tension(int),5
net.sf.freecol.common.model.Tension.equals(Object),3
net.sf.freecol.common.model.Tension.getKey(),5
net.sf.freecol.common.model.Tension.getLevel(),5
net.sf.freecol.common.model.Tension.getNameKey(),3
net.sf.freecol.common.model.Tension.getValue(),5
net.sf.freecol.common.model.Tension.hashCode(),3
net.sf.freecol.common.model.Tension.modify(int),5
net.sf.freecol.common.model.Tension.setValue(int),5
net.sf.freecol.common.model.Tension.toString(),3
"net.sf.freecol.common.model.Tile.IndianSettlementInternals.setValues(UnitType, List<GoodsType>)",6
net.sf.freecol.common.model.Tile.IndianSettlementInternals.update(IndianSettlement),5
"net.sf.freecol.common.model.Tile.Tile(Game, String)",8
"net.sf.freecol.common.model.Tile.Tile(Game, TileType, int, int)",8
net.sf.freecol.common.model.Tile.add(Locatable),5
net.sf.freecol.common.model.Tile.addLostCityRumour(LostCityRumour),7
net.sf.freecol.common.model.Tile.addResource(Resource),7
"net.sf.freecol.common.model.Tile.addRiver(int, String)",9
net.sf.freecol.common.model.Tile.addRoad(),7
net.sf.freecol.common.model.Tile.addTileItem(TileItem),8
net.sf.freecol.common.model.Tile.cacheUnseen(),3
net.sf.freecol.common.model.Tile.cacheUnseen(Player),7
"net.sf.freecol.common.model.Tile.cacheUnseen(Player, Tile)",10
net.sf.freecol.common.model.Tile.cacheUnseen(Tile),7
net.sf.freecol.common.model.Tile.canAdd(Locatable),3
"net.sf.freecol.common.model.Tile.canProduce(GoodsType, UnitType)",9
"net.sf.freecol.common.model.Tile.changeOwnership(Player, Settlement)",10
net.sf.freecol.common.model.Tile.changeOwningSettlement(Settlement),8
net.sf.freecol.common.model.Tile.changeType(TileType),10
"net.sf.freecol.common.model.Tile.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.Tile.contains(Locatable),3
net.sf.freecol.common.model.Tile.copyIn(T),3
net.sf.freecol.common.model.Tile.disposeResources(),3
"net.sf.freecol.common.model.Tile.getAbilities(String, FreeColSpecObjectType, Turn)",3
net.sf.freecol.common.model.Tile.getAdjacentColonies(),5
net.sf.freecol.common.model.Tile.getAvailableAdjacentCount(),6
"net.sf.freecol.common.model.Tile.getBaseProduction(ProductionType, GoodsType, UnitType)",9
net.sf.freecol.common.model.Tile.getBestDisembarkTile(Player),8
net.sf.freecol.common.model.Tile.getBestFoodProduction(),5
net.sf.freecol.common.model.Tile.getBuildColonyWarnings(Unit),8
net.sf.freecol.common.model.Tile.getCachedTile(Player),6
net.sf.freecol.common.model.Tile.getCachedTiles(),5
net.sf.freecol.common.model.Tile.getColonyTileLocationLabel(Colony),8
net.sf.freecol.common.model.Tile.getCompleteItems(),5
net.sf.freecol.common.model.Tile.getCompleteTileImprovements(),5
net.sf.freecol.common.model.Tile.getContiguity(),5
net.sf.freecol.common.model.Tile.getContiguityAdjacent(int),6
net.sf.freecol.common.model.Tile.getDefenceBonusPercentage(),5
net.sf.freecol.common.model.Tile.getDefenceValue(),5
net.sf.freecol.common.model.Tile.getDefendingUnit(Unit),12
net.sf.freecol.common.model.Tile.getDetailedLocationLabel(),5
net.sf.freecol.common.model.Tile.getDetailedLocationLabelFor(Player),6
net.sf.freecol.common.model.Tile.getDirection(Tile),7
net.sf.freecol.common.model.Tile.getDisasterChoices(),8
net.sf.freecol.common.model.Tile.getDiscoverableRegion(),5
net.sf.freecol.common.model.Tile.getDisplayObject(),3
net.sf.freecol.common.model.Tile.getDistanceTo(Tile),7
net.sf.freecol.common.model.Tile.getEdgeDistance(),5
net.sf.freecol.common.model.Tile.getHighSeasCount(),5
net.sf.freecol.common.model.Tile.getLabel(),7
net.sf.freecol.common.model.Tile.getLearnableSkill(Player),0
net.sf.freecol.common.model.Tile.getLinkTarget(Player),3
net.sf.freecol.common.model.Tile.getLocationLabel(),3
net.sf.freecol.common.model.Tile.getLocationLabelFor(Player),3
net.sf.freecol.common.model.Tile.getLostCityRumour(),6
net.sf.freecol.common.model.Tile.getMap(),5
"net.sf.freecol.common.model.Tile.getMaximumPotential(GoodsType, UnitType)",9
"net.sf.freecol.common.model.Tile.getMaximumPotential(GoodsType, UnitType, TileType)",10
net.sf.freecol.common.model.Tile.getMaximumPotentialFoodProductionWithExpert(),5
net.sf.freecol.common.model.Tile.getMoveToEurope(),5
net.sf.freecol.common.model.Tile.getNameKey(),3
"net.sf.freecol.common.model.Tile.getNearLocationLabel(Direction, StringTemplate)",9
"net.sf.freecol.common.model.Tile.getNearestSettlement(Player, int, boolean)",8
net.sf.freecol.common.model.Tile.getNeighbourOrNull(Direction),7
net.sf.freecol.common.model.Tile.getOccupyingUnit(),6
net.sf.freecol.common.model.Tile.getOwner(),3
net.sf.freecol.common.model.Tile.getOwningSettlement(),6
net.sf.freecol.common.model.Tile.getPlayerIndianSettlement(Player),7
"net.sf.freecol.common.model.Tile.getPotentialProduction(GoodsType, UnitType)",10
"net.sf.freecol.common.model.Tile.getProductionModifiers(GoodsType, UnitType)",7
net.sf.freecol.common.model.Tile.getRank(),3
net.sf.freecol.common.model.Tile.getRegion(),5
net.sf.freecol.common.model.Tile.getResource(),5
net.sf.freecol.common.model.Tile.getRiver(),5
net.sf.freecol.common.model.Tile.getRiverStyle(),5
net.sf.freecol.common.model.Tile.getRoad(),5
net.sf.freecol.common.model.Tile.getSafeAnchoringTiles(Unit),8
"net.sf.freecol.common.model.Tile.getSafeTile(Player, Random)",8
net.sf.freecol.common.model.Tile.getSafestSurroundingLandTiles(Player),8
net.sf.freecol.common.model.Tile.getSettlement(),7
net.sf.freecol.common.model.Tile.getSimpleLabel(),5
net.sf.freecol.common.model.Tile.getSortedAutoPotential(),5
net.sf.freecol.common.model.Tile.getSortedPotential(),5
net.sf.freecol.common.model.Tile.getSortedPotential(Unit),6
"net.sf.freecol.common.model.Tile.getSortedPotential(UnitType, Player, boolean)",9
net.sf.freecol.common.model.Tile.getStyle(),5
net.sf.freecol.common.model.Tile.getSurroundingTiles(int),7
"net.sf.freecol.common.model.Tile.getSurroundingTiles(int, int)",13
net.sf.freecol.common.model.Tile.getTile(),3
net.sf.freecol.common.model.Tile.getTileImprovement(TileImprovementType),7
net.sf.freecol.common.model.Tile.getTileImprovements(),5
net.sf.freecol.common.model.Tile.getTileItemContainer(),5
net.sf.freecol.common.model.Tile.getTileToCache(),5
net.sf.freecol.common.model.Tile.getType(),5
net.sf.freecol.common.model.Tile.getWantedGoods(Player),0
net.sf.freecol.common.model.Tile.getWorkAmount(TileImprovementType),9
net.sf.freecol.common.model.Tile.getX(),5
net.sf.freecol.common.model.Tile.getXMLTagName(),3
net.sf.freecol.common.model.Tile.getY(),5
net.sf.freecol.common.model.Tile.hasLostCityRumour(),6
net.sf.freecol.common.model.Tile.hasResource(),5
net.sf.freecol.common.model.Tile.hasRiver(),5
net.sf.freecol.common.model.Tile.hasRoad(),5
net.sf.freecol.common.model.Tile.hasSettlement(),5
net.sf.freecol.common.model.Tile.hasTileImprovement(TileImprovementType),6
net.sf.freecol.common.model.Tile.hasUnexploredAdjacent(),6
"net.sf.freecol.common.model.Tile.internalToXML(FreeColXMLWriter, String)",8
net.sf.freecol.common.model.Tile.isAdjacent(Tile),7
net.sf.freecol.common.model.Tile.isBlocked(Unit),8
net.sf.freecol.common.model.Tile.isCoastland(),5
net.sf.freecol.common.model.Tile.isConnectedTo(Tile),7
net.sf.freecol.common.model.Tile.isDangerousToShip(Unit),7
net.sf.freecol.common.model.Tile.isDirectlyHighSeasConnected(),5
net.sf.freecol.common.model.Tile.isExplored(),5
net.sf.freecol.common.model.Tile.isExploredBy(Player),14
net.sf.freecol.common.model.Tile.isForested(),5
net.sf.freecol.common.model.Tile.isGoodHillTile(),7
net.sf.freecol.common.model.Tile.isGoodMountainTile(),8
net.sf.freecol.common.model.Tile.isGoodRiverTile(TileImprovementType),8
net.sf.freecol.common.model.Tile.isHighSeasConnected(),5
net.sf.freecol.common.model.Tile.isImprovementAllowed(TileImprovement),6
net.sf.freecol.common.model.Tile.isImprovementTypeAllowed(TileImprovementType),6
net.sf.freecol.common.model.Tile.isInUse(),5
net.sf.freecol.common.model.Tile.isLand(),5
net.sf.freecol.common.model.Tile.isLandLocked(),5
net.sf.freecol.common.model.Tile.isOccupied(),6
net.sf.freecol.common.model.Tile.isOnRiver(),5
net.sf.freecol.common.model.Tile.isPolar(),5
net.sf.freecol.common.model.Tile.isRiverCorner(),5
net.sf.freecol.common.model.Tile.isShore(),9
net.sf.freecol.common.model.Tile.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Tile.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Tile.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Tile.remove(Locatable),5
net.sf.freecol.common.model.Tile.removeIndianSettlementInternals(Player),0
net.sf.freecol.common.model.Tile.removeLostCityRumour(),8
net.sf.freecol.common.model.Tile.removeResource(),7
net.sf.freecol.common.model.Tile.removeRiver(),5
net.sf.freecol.common.model.Tile.removeRoad(),7
net.sf.freecol.common.model.Tile.removeTileItem(T),9
net.sf.freecol.common.model.Tile.seeTile(),5
net.sf.freecol.common.model.Tile.seeTile(Player),5
"net.sf.freecol.common.model.Tile.setCachedTile(Player, Tile)",7
"net.sf.freecol.common.model.Tile.setCachedTiles(Map<Player, Tile>)",5
net.sf.freecol.common.model.Tile.setContiguity(int),5
"net.sf.freecol.common.model.Tile.setExplored(Player, boolean)",6
net.sf.freecol.common.model.Tile.setHighSeasCount(int),5
"net.sf.freecol.common.model.Tile.setIndianSettlementInternals(Player, UnitType, List<GoodsType>)",8
net.sf.freecol.common.model.Tile.setMoveToEurope(Boolean),6
net.sf.freecol.common.model.Tile.setOwner(Player),5
net.sf.freecol.common.model.Tile.setOwningSettlement(Settlement),8
net.sf.freecol.common.model.Tile.setRegion(Region),7
net.sf.freecol.common.model.Tile.setSettlement(Settlement),11
net.sf.freecol.common.model.Tile.setStyle(int),7
net.sf.freecol.common.model.Tile.setTileItemContainer(TileItemContainer),5
net.sf.freecol.common.model.Tile.setType(TileType),7
net.sf.freecol.common.model.Tile.toShortString(),3
net.sf.freecol.common.model.Tile.toString(),3
"net.sf.freecol.common.model.Tile.toXML(FreeColXMLWriter, String)",3
net.sf.freecol.common.model.Tile.up(),3
net.sf.freecol.common.model.Tile.updateColonyTiles(),3
net.sf.freecol.common.model.Tile.updateIndianSettlement(Player),6
net.sf.freecol.common.model.Tile.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Tile.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.TileImprovement.TileImprovement(Game, String)",8
"net.sf.freecol.common.model.TileImprovement.TileImprovement(Game, Tile, TileImprovementType, TileImprovementStyle)",12
"net.sf.freecol.common.model.TileImprovement.applyBonus(GoodsType, UnitType, int)",3
"net.sf.freecol.common.model.TileImprovement.canProduce(GoodsType, UnitType)",3
"net.sf.freecol.common.model.TileImprovement.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.TileImprovement.copyIn(T),3
net.sf.freecol.common.model.TileImprovement.getBonus(GoodsType),0
net.sf.freecol.common.model.TileImprovement.getChange(TileType),7
net.sf.freecol.common.model.TileImprovement.getConnectionDirections(),10
net.sf.freecol.common.model.TileImprovement.getConnections(),5
net.sf.freecol.common.model.TileImprovement.getConnectionsFromStyle(),7
net.sf.freecol.common.model.TileImprovement.getDisasterChoices(),5
net.sf.freecol.common.model.TileImprovement.getLayer(),3
net.sf.freecol.common.model.TileImprovement.getMagnitude(),5
"net.sf.freecol.common.model.TileImprovement.getMoveCost(Direction, int)",8
net.sf.freecol.common.model.TileImprovement.getNameKey(),3
net.sf.freecol.common.model.TileImprovement.getProductionModifier(GoodsType),7
"net.sf.freecol.common.model.TileImprovement.getProductionModifiers(GoodsType, UnitType)",3
net.sf.freecol.common.model.TileImprovement.getRiverConnection(Direction),7
net.sf.freecol.common.model.TileImprovement.getStyle(),5
net.sf.freecol.common.model.TileImprovement.getTurnsToComplete(),5
net.sf.freecol.common.model.TileImprovement.getType(),5
net.sf.freecol.common.model.TileImprovement.getVirtual(),5
net.sf.freecol.common.model.TileImprovement.getXMLTagName(),3
net.sf.freecol.common.model.TileImprovement.getZIndex(),3
net.sf.freecol.common.model.TileImprovement.isComplete(),3
net.sf.freecol.common.model.TileImprovement.isConnectedTo(Direction),9
net.sf.freecol.common.model.TileImprovement.isNatural(),3
net.sf.freecol.common.model.TileImprovement.isRiver(),5
net.sf.freecol.common.model.TileImprovement.isRoad(),5
net.sf.freecol.common.model.TileImprovement.isTileTypeAllowed(TileType),3
net.sf.freecol.common.model.TileImprovement.isWorkerAllowed(Unit),6
net.sf.freecol.common.model.TileImprovement.readAttributes(FreeColXMLReader),3
"net.sf.freecol.common.model.TileImprovement.setConnected(Direction, boolean)",7
"net.sf.freecol.common.model.TileImprovement.setConnected(Direction, boolean, String)",0
net.sf.freecol.common.model.TileImprovement.setMagnitude(int),5
net.sf.freecol.common.model.TileImprovement.setRiverStyle(String),7
net.sf.freecol.common.model.TileImprovement.setStyle(TileImprovementStyle),5
net.sf.freecol.common.model.TileImprovement.setTurnsToComplete(int),5
net.sf.freecol.common.model.TileImprovement.setVirtual(boolean),6
net.sf.freecol.common.model.TileImprovement.toString(),3
net.sf.freecol.common.model.TileImprovement.updateRiverConnections(String),10
net.sf.freecol.common.model.TileImprovement.updateRoadConnections(boolean),7
net.sf.freecol.common.model.TileImprovement.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.TileImprovementStyle.TileImprovementStyle(String),5
net.sf.freecol.common.model.TileImprovementStyle.getInstance(String),6
net.sf.freecol.common.model.TileImprovementStyle.getMask(),6
net.sf.freecol.common.model.TileImprovementStyle.getString(),6
net.sf.freecol.common.model.TileImprovementStyle.toString(),3
net.sf.freecol.common.model.TileImprovementTest.testRiverNoExtras(),0
net.sf.freecol.common.model.TileImprovementTest.testRiverWithExtras(),0
net.sf.freecol.common.model.TileImprovementTest.testRoadNoExtras(),0
net.sf.freecol.common.model.TileImprovementTest.testRoadWithExtras(),0
"net.sf.freecol.common.model.TileImprovementType.TileImprovementType(String, Specification)",6
net.sf.freecol.common.model.TileImprovementType.addAllowedWorker(String),5
net.sf.freecol.common.model.TileImprovementType.addChange(TileTypeChange),5
"net.sf.freecol.common.model.TileImprovementType.addDisaster(Disaster, int)",6
net.sf.freecol.common.model.TileImprovementType.changeContainsTarget(TileType),7
net.sf.freecol.common.model.TileImprovementType.copyIn(T),3
net.sf.freecol.common.model.TileImprovementType.getAddWorkTurns(),5
net.sf.freecol.common.model.TileImprovementType.getAllowedWorkers(),5
net.sf.freecol.common.model.TileImprovementType.getBonus(GoodsType),0
net.sf.freecol.common.model.TileImprovementType.getChange(TileType),6
net.sf.freecol.common.model.TileImprovementType.getDisasterChoices(),6
net.sf.freecol.common.model.TileImprovementType.getDisasters(),5
net.sf.freecol.common.model.TileImprovementType.getExpendedAmount(),5
net.sf.freecol.common.model.TileImprovementType.getExposeResourcePercent(),7
"net.sf.freecol.common.model.TileImprovementType.getImprovementValue(Tile, GoodsType)",8
"net.sf.freecol.common.model.TileImprovementType.getImprovementValue(Tile, GoodsType, UnitType)",9
"net.sf.freecol.common.model.TileImprovementType.getImprovementValue(TileType, GoodsType, UnitType)",8
net.sf.freecol.common.model.TileImprovementType.getMagnitude(),5
net.sf.freecol.common.model.TileImprovementType.getMoveCost(),5
net.sf.freecol.common.model.TileImprovementType.getMoveCost(int),11
net.sf.freecol.common.model.TileImprovementType.getProduction(TileType),7
net.sf.freecol.common.model.TileImprovementType.getProductionModifier(GoodsType),0
net.sf.freecol.common.model.TileImprovementType.getRequiredImprovementType(),5
net.sf.freecol.common.model.TileImprovementType.getRequiredRole(),5
net.sf.freecol.common.model.TileImprovementType.getTileTypeChanges(),5
net.sf.freecol.common.model.TileImprovementType.getXMLTagName(),3
net.sf.freecol.common.model.TileImprovementType.getZIndex(),5
net.sf.freecol.common.model.TileImprovementType.isChangeType(),5
net.sf.freecol.common.model.TileImprovementType.isNatural(),5
net.sf.freecol.common.model.TileImprovementType.isTileTypeAllowed(TileType),11
net.sf.freecol.common.model.TileImprovementType.isWorkerAllowed(Unit),8
net.sf.freecol.common.model.TileImprovementType.isWorkerTypeAllowed(UnitType),6
net.sf.freecol.common.model.TileImprovementType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.TileImprovementType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.TileImprovementType.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.TileImprovementType.setAllowedWorkers(Set<String>),5
net.sf.freecol.common.model.TileImprovementType.setDisasters(List<RandomChoice<Disaster>>),5
"net.sf.freecol.common.model.TileImprovementType.setTileTypeChanges(Map<TileType, TileTypeChange>)",5
net.sf.freecol.common.model.TileImprovementType.setZIndex(int),5
net.sf.freecol.common.model.TileImprovementType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.TileImprovementType.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.TileItem.TileItem(Game, FreeColXMLReader)",6
"net.sf.freecol.common.model.TileItem.TileItem(Game, String)",8
"net.sf.freecol.common.model.TileItem.TileItem(Game, Tile)",6
"net.sf.freecol.common.model.TileItem.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.TileItem.copyIn(T),3
net.sf.freecol.common.model.TileItem.getLocation(),3
net.sf.freecol.common.model.TileItem.getSpaceTaken(),3
net.sf.freecol.common.model.TileItem.getTile(),3
net.sf.freecol.common.model.TileItem.isInEurope(),3
net.sf.freecol.common.model.TileItem.setLocation(Location),3
"net.sf.freecol.common.model.TileItemContainer.TileItemContainer(Game, String)",6
"net.sf.freecol.common.model.TileItemContainer.TileItemContainer(Game, Tile)",7
net.sf.freecol.common.model.TileItemContainer.addTileItem(TileItem),5
"net.sf.freecol.common.model.TileItemContainer.canProduce(GoodsType, UnitType)",8
"net.sf.freecol.common.model.TileItemContainer.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.TileItemContainer.clearTileItems(),3
net.sf.freecol.common.model.TileItemContainer.contains(TileItem),6
"net.sf.freecol.common.model.TileItemContainer.copyFrom(TileItemContainer, Layer)",10
net.sf.freecol.common.model.TileItemContainer.copyIn(T),3
net.sf.freecol.common.model.TileItemContainer.disposeResources(),3
net.sf.freecol.common.model.TileItemContainer.findTileItem(Predicate<TileItem>),6
net.sf.freecol.common.model.TileItemContainer.getCompleteImprovements(),6
net.sf.freecol.common.model.TileItemContainer.getCompleteItems(),5
net.sf.freecol.common.model.TileItemContainer.getImprovement(TileImprovementType),7
net.sf.freecol.common.model.TileItemContainer.getImprovements(),6
net.sf.freecol.common.model.TileItemContainer.getImprovements(boolean),7
net.sf.freecol.common.model.TileItemContainer.getLostCityRumour(),6
"net.sf.freecol.common.model.TileItemContainer.getMoveCost(Tile, Tile, int)",10
"net.sf.freecol.common.model.TileItemContainer.getProductionModifiers(GoodsType, UnitType)",7
net.sf.freecol.common.model.TileItemContainer.getResource(),5
net.sf.freecol.common.model.TileItemContainer.getRiver(),6
net.sf.freecol.common.model.TileItemContainer.getRoad(),6
net.sf.freecol.common.model.TileItemContainer.getTile(),5
net.sf.freecol.common.model.TileItemContainer.getTileItems(),5
"net.sf.freecol.common.model.TileItemContainer.getTotalBonusPotential(GoodsType, UnitType, int, boolean)",17
net.sf.freecol.common.model.TileItemContainer.getXMLTagName(),3
net.sf.freecol.common.model.TileItemContainer.hasImprovement(TileImprovementType),8
net.sf.freecol.common.model.TileItemContainer.invalidateCache(),4
net.sf.freecol.common.model.TileItemContainer.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.TileItemContainer.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.TileItemContainer.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.TileItemContainer.removeAll(Class<T>),6
net.sf.freecol.common.model.TileItemContainer.removeIncompatibleImprovements(),5
net.sf.freecol.common.model.TileItemContainer.removeTileItem(T),8
net.sf.freecol.common.model.TileItemContainer.setTileItems(List<TileItem>),5
net.sf.freecol.common.model.TileItemContainer.toString(),3
net.sf.freecol.common.model.TileItemContainer.tryAddTileItem(TileItem),7
net.sf.freecol.common.model.TileItemContainer.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.TileItemContainer.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.TileItemContainerTest.getSample(Game, Tile, boolean, boolean, boolean)",0
net.sf.freecol.common.model.TileItemContainerTest.testCopyFromWithEveryThing(),0
"net.sf.freecol.common.model.TileTest.Work.Work(TileType, int, int)",0
"net.sf.freecol.common.model.TileTest.hasBonusFrom(Stream<Modifier>, FreeColSpecObjectType)",0
net.sf.freecol.common.model.TileTest.testColonyImprovements(),0
net.sf.freecol.common.model.TileTest.testConiferForest(),0
net.sf.freecol.common.model.TileTest.testCopy(),0
net.sf.freecol.common.model.TileTest.testDefenceModifiers(),0
net.sf.freecol.common.model.TileTest.testGetBestDisembarkTile(),0
net.sf.freecol.common.model.TileTest.testGetWorkAmount(),0
net.sf.freecol.common.model.TileTest.testImprovements(),0
net.sf.freecol.common.model.TileTest.testIsTileTypeAllowed(),0
net.sf.freecol.common.model.TileTest.testMaximumPotential(),0
net.sf.freecol.common.model.TileTest.testMinerals(),0
net.sf.freecol.common.model.TileTest.testPotential(),0
net.sf.freecol.common.model.TileTest.testPrimarySecondaryGoods(),0
net.sf.freecol.common.model.TileTest.testProductionModifiers(),0
net.sf.freecol.common.model.TileTest.testTileTypeChangeProduction(),0
net.sf.freecol.common.model.TileTest.testZIndex(),0
"net.sf.freecol.common.model.TileType.TileType(String, Specification)",6
"net.sf.freecol.common.model.TileType.TileType(String, boolean)",9
"net.sf.freecol.common.model.TileType.addDisaster(Disaster, int)",6
"net.sf.freecol.common.model.TileType.addResourceType(ResourceType, int)",7
net.sf.freecol.common.model.TileType.canHaveResourceType(ResourceType),6
"net.sf.freecol.common.model.TileType.canProduce(GoodsType, UnitType)",8
net.sf.freecol.common.model.TileType.canSettle(),5
net.sf.freecol.common.model.TileType.copyIn(T),3
net.sf.freecol.common.model.TileType.getAltitude(int),0
net.sf.freecol.common.model.TileType.getAvailableProductionTypes(boolean),7
"net.sf.freecol.common.model.TileType.getAvailableProductionTypes(boolean, String)",11
net.sf.freecol.common.model.TileType.getBasicMoveCost(),5
net.sf.freecol.common.model.TileType.getBasicWorkTurns(),5
net.sf.freecol.common.model.TileType.getDisasterChoices(),5
net.sf.freecol.common.model.TileType.getDisasters(),5
net.sf.freecol.common.model.TileType.getHumidity(int),0
net.sf.freecol.common.model.TileType.getPossibleProduction(boolean),10
"net.sf.freecol.common.model.TileType.getPotentialProduction(GoodsType, UnitType)",9
net.sf.freecol.common.model.TileType.getProductionTypes(),5
net.sf.freecol.common.model.TileType.getResourceTypeValues(),5
net.sf.freecol.common.model.TileType.getResourceTypes(),5
net.sf.freecol.common.model.TileType.getTemperature(int),0
net.sf.freecol.common.model.TileType.getXMLTagName(),3
net.sf.freecol.common.model.TileType.isDirectlyHighSeasConnected(),7
net.sf.freecol.common.model.TileType.isElevation(),5
net.sf.freecol.common.model.TileType.isForested(),5
net.sf.freecol.common.model.TileType.isHighSeasConnected(),6
net.sf.freecol.common.model.TileType.isHills(),4
net.sf.freecol.common.model.TileType.isMountains(),4
net.sf.freecol.common.model.TileType.isWater(),5
net.sf.freecol.common.model.TileType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.TileType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.TileType.readChildren(FreeColXMLReader),3
"net.sf.freecol.common.model.TileType.setAltitude(int, int)",0
net.sf.freecol.common.model.TileType.setDisasters(List<RandomChoice<Disaster>>),5
"net.sf.freecol.common.model.TileType.setHumidity(int, int)",0
net.sf.freecol.common.model.TileType.setProductionTypes(List<ProductionType>),5
net.sf.freecol.common.model.TileType.setResourceTypes(List<RandomChoice<ResourceType>>),5
"net.sf.freecol.common.model.TileType.setTemperature(int, int)",0
"net.sf.freecol.common.model.TileType.withinRange(RangeType, int)",7
net.sf.freecol.common.model.TileType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.TileType.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.TileTypeChange.TileTypeChange(FreeColXMLReader, Specification)",7
net.sf.freecol.common.model.TileTypeChange.TileTypeChange(Specification),5
net.sf.freecol.common.model.TileTypeChange.copyIn(T),3
net.sf.freecol.common.model.TileTypeChange.equals(Object),3
net.sf.freecol.common.model.TileTypeChange.getFrom(),5
net.sf.freecol.common.model.TileTypeChange.getProduction(),5
net.sf.freecol.common.model.TileTypeChange.getTo(),5
net.sf.freecol.common.model.TileTypeChange.getXMLTagName(),3
net.sf.freecol.common.model.TileTypeChange.hashCode(),3
net.sf.freecol.common.model.TileTypeChange.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.TileTypeChange.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.TileTypeChange.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.TileTypeChange.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.TradeItem.TradeItem(Game, FreeColXMLReader)",7
"net.sf.freecol.common.model.TradeItem.TradeItem(Game, String, Player, Player)",8
net.sf.freecol.common.model.TradeItem.copyIn(T),3
net.sf.freecol.common.model.TradeItem.equals(Object),3
net.sf.freecol.common.model.TradeItem.getColony(Game),6
net.sf.freecol.common.model.TradeItem.getDestination(),5
net.sf.freecol.common.model.TradeItem.getGold(),5
net.sf.freecol.common.model.TradeItem.getGoods(),5
net.sf.freecol.common.model.TradeItem.getOther(Player),6
net.sf.freecol.common.model.TradeItem.getSource(),5
net.sf.freecol.common.model.TradeItem.getStance(),5
net.sf.freecol.common.model.TradeItem.getUnit(),5
net.sf.freecol.common.model.TradeItem.getVictim(),5
net.sf.freecol.common.model.TradeItem.hashCode(),3
net.sf.freecol.common.model.TradeItem.isInternable(),3
net.sf.freecol.common.model.TradeItem.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.TradeItem.setDestination(Player),5
net.sf.freecol.common.model.TradeItem.setGold(int),5
net.sf.freecol.common.model.TradeItem.setGoods(Goods),5
net.sf.freecol.common.model.TradeItem.setSource(Player),5
net.sf.freecol.common.model.TradeItem.setStance(Stance),5
net.sf.freecol.common.model.TradeItem.setUnit(Unit),5
net.sf.freecol.common.model.TradeItem.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.TradeLocation.canBeInput(),6
net.sf.freecol.common.model.TradeLocation.getNameAsJlabel(),6
"net.sf.freecol.common.model.TradeRoute.TradeRoute(Game, String)",6
"net.sf.freecol.common.model.TradeRoute.TradeRoute(Game, String, Player)",7
net.sf.freecol.common.model.TradeRoute.addStop(TradeRouteStop),5
"net.sf.freecol.common.model.TradeRoute.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.TradeRoute.clearStops(),3
net.sf.freecol.common.model.TradeRoute.copyIn(T),3
net.sf.freecol.common.model.TradeRoute.getAssignedUnits(),5
net.sf.freecol.common.model.TradeRoute.getIndex(TradeRouteStop),6
net.sf.freecol.common.model.TradeRoute.getName(),3
net.sf.freecol.common.model.TradeRoute.getOwner(),3
net.sf.freecol.common.model.TradeRoute.getStop(int),7
net.sf.freecol.common.model.TradeRoute.getStopCount(),5
net.sf.freecol.common.model.TradeRoute.getStopList(),5
"net.sf.freecol.common.model.TradeRoute.getStopSublist(TradeRouteStop, TradeRouteStop)",8
net.sf.freecol.common.model.TradeRoute.getXMLTagName(),3
net.sf.freecol.common.model.TradeRoute.isSilent(),5
"net.sf.freecol.common.model.TradeRoute.isStopValid(Player, TradeRouteStop)",7
"net.sf.freecol.common.model.TradeRoute.isStopValid(Unit, TradeRouteStop)",7
net.sf.freecol.common.model.TradeRoute.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.TradeRoute.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.TradeRoute.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.TradeRoute.removeMatchingStops(Location),6
net.sf.freecol.common.model.TradeRoute.removeStop(TradeRouteStop),5
net.sf.freecol.common.model.TradeRoute.setName(String),3
net.sf.freecol.common.model.TradeRoute.setOwner(Player),3
net.sf.freecol.common.model.TradeRoute.setSilent(boolean),5
net.sf.freecol.common.model.TradeRoute.toString(),3
net.sf.freecol.common.model.TradeRoute.verify(),6
net.sf.freecol.common.model.TradeRoute.verifyUniqueName(),6
net.sf.freecol.common.model.TradeRoute.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.TradeRoute.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.TradeRouteStop.TradeRouteStop(Game),5
"net.sf.freecol.common.model.TradeRouteStop.TradeRouteStop(Game, FreeColXMLReader)",7
"net.sf.freecol.common.model.TradeRouteStop.TradeRouteStop(Game, Location)",6
net.sf.freecol.common.model.TradeRouteStop.TradeRouteStop(TradeRouteStop),5
net.sf.freecol.common.model.TradeRouteStop.addCargo(GoodsType),5
net.sf.freecol.common.model.TradeRouteStop.copyIn(T),3
net.sf.freecol.common.model.TradeRouteStop.equals(Object),0
net.sf.freecol.common.model.TradeRouteStop.getAvailableGoodsCount(GoodsType),3
net.sf.freecol.common.model.TradeRouteStop.getCargo(),5
net.sf.freecol.common.model.TradeRouteStop.getCompactCargo(),8
"net.sf.freecol.common.model.TradeRouteStop.getExportAmount(GoodsType, int)",3
"net.sf.freecol.common.model.TradeRouteStop.getImportAmount(GoodsType, int)",3
"net.sf.freecol.common.model.TradeRouteStop.getLabelFor(String, Player)",7
net.sf.freecol.common.model.TradeRouteStop.getLocation(),5
net.sf.freecol.common.model.TradeRouteStop.getLocationName(TradeLocation),3
net.sf.freecol.common.model.TradeRouteStop.getTradeLocation(),5
net.sf.freecol.common.model.TradeRouteStop.getXMLTagName(),3
"net.sf.freecol.common.model.TradeRouteStop.hasWork(Unit, int)",7
net.sf.freecol.common.model.TradeRouteStop.invalidStopLabel(Player),6
net.sf.freecol.common.model.TradeRouteStop.isInternable(),3
net.sf.freecol.common.model.TradeRouteStop.isValid(Player),6
net.sf.freecol.common.model.TradeRouteStop.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.TradeRouteStop.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.TradeRouteStop.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.TradeRouteStop.setCargo(List<GoodsType>),5
net.sf.freecol.common.model.TradeRouteStop.toString(),3
net.sf.freecol.common.model.TradeRouteStop.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.TradeRouteStop.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.TradeRouteTest.testTradeRoute(),0
net.sf.freecol.common.model.Turn.Turn(int),5
net.sf.freecol.common.model.Turn.equals(Object),3
net.sf.freecol.common.model.Turn.getLabel(),5
net.sf.freecol.common.model.Turn.getNumber(),5
net.sf.freecol.common.model.Turn.getSaveGameSuffix(),5
net.sf.freecol.common.model.Turn.getSeason(),6
net.sf.freecol.common.model.Turn.getSeasonNumber(),5
net.sf.freecol.common.model.Turn.getSeasonYear(),5
net.sf.freecol.common.model.Turn.getStartingYear(),5
net.sf.freecol.common.model.Turn.getTurnLabel(int),6
net.sf.freecol.common.model.Turn.getTurnSeason(int),9
net.sf.freecol.common.model.Turn.getTurnYear(int),8
net.sf.freecol.common.model.Turn.getTurnsText(int),6
net.sf.freecol.common.model.Turn.getYear(),5
net.sf.freecol.common.model.Turn.hashCode(),3
"net.sf.freecol.common.model.Turn.initialize(int, int, int)",8
net.sf.freecol.common.model.Turn.isFirstSeasonTurn(),5
net.sf.freecol.common.model.Turn.isFirstTurn(),5
net.sf.freecol.common.model.Turn.next(),5
net.sf.freecol.common.model.Turn.toString(),3
net.sf.freecol.common.model.Turn.yearToTurn(int),6
"net.sf.freecol.common.model.Turn.yearToTurn(int, int)",9
net.sf.freecol.common.model.TypeCountMap.add(TypeCountMap<T>),0
net.sf.freecol.common.model.TypeCountMap.clear(),0
net.sf.freecol.common.model.TypeCountMap.containsKey(T),0
net.sf.freecol.common.model.TypeCountMap.getCount(T),0
net.sf.freecol.common.model.TypeCountMap.getValues(),0
"net.sf.freecol.common.model.TypeCountMap.incrementCount(T, int)",0
net.sf.freecol.common.model.TypeCountMap.isEmpty(),0
net.sf.freecol.common.model.TypeCountMap.keySet(),0
net.sf.freecol.common.model.TypeCountMap.putAll(TypeCountMap<T>),0
net.sf.freecol.common.model.TypeCountMap.size(),0
net.sf.freecol.common.model.TypeCountMap.toString(),3
net.sf.freecol.common.model.TypeCountMap.values(),0
"net.sf.freecol.common.model.Unit.ClosestSettlementGoalDecider.ClosestSettlementGoalDecider(Tile, boolean)",7
"net.sf.freecol.common.model.Unit.ClosestSettlementGoalDecider.check(Unit, PathNode)",3
net.sf.freecol.common.model.Unit.ClosestSettlementGoalDecider.getGoal(),3
net.sf.freecol.common.model.Unit.ClosestSettlementGoalDecider.hasSubGoals(),3
net.sf.freecol.common.model.Unit.MoveType.MoveType(String),0
"net.sf.freecol.common.model.Unit.MoveType.MoveType(String, boolean)",0
net.sf.freecol.common.model.Unit.MoveType.isAttack(),0
net.sf.freecol.common.model.Unit.MoveType.isLegal(),0
net.sf.freecol.common.model.Unit.MoveType.isProgress(),0
net.sf.freecol.common.model.Unit.MoveType.whyIllegal(),0
net.sf.freecol.common.model.Unit.Unit(Game),5
"net.sf.freecol.common.model.Unit.Unit(Game, String)",8
net.sf.freecol.common.model.Unit.UnitState.getKey(),5
net.sf.freecol.common.model.Unit.add(Locatable),3
net.sf.freecol.common.model.Unit.addFeature(Feature),7
net.sf.freecol.common.model.Unit.allowContact(Settlement),6
net.sf.freecol.common.model.Unit.allowMoveFrom(Tile),7
net.sf.freecol.common.model.Unit.atStop(TradeRouteStop),6
"net.sf.freecol.common.model.Unit.betterDefender(Unit, double, Unit, double)",13
net.sf.freecol.common.model.Unit.canAmbush(Unit),6
net.sf.freecol.common.model.Unit.canAttack(Unit),11
net.sf.freecol.common.model.Unit.canAttackRanged(Tile),0
net.sf.freecol.common.model.Unit.canBeStudent(Unit),7
net.sf.freecol.common.model.Unit.canBuildColony(),7
net.sf.freecol.common.model.Unit.canCaptureEquipment(Role),8
net.sf.freecol.common.model.Unit.canCaptureGoods(),5
net.sf.freecol.common.model.Unit.canCarryGoods(),5
net.sf.freecol.common.model.Unit.canCarryTreasure(),5
net.sf.freecol.common.model.Unit.canCarryUnits(),5
net.sf.freecol.common.model.Unit.canCashInTreasureTrain(),7
net.sf.freecol.common.model.Unit.canCashInTreasureTrain(Location),8
net.sf.freecol.common.model.Unit.canMoveToHighSeas(),6
net.sf.freecol.common.model.Unit.changeExperienceType(GoodsType),5
net.sf.freecol.common.model.Unit.changeHomeIndianSettlement(IndianSettlement),7
net.sf.freecol.common.model.Unit.changeOwner(Player),9
"net.sf.freecol.common.model.Unit.changeRole(Role, int)",6
net.sf.freecol.common.model.Unit.changeRoleCount(int),6
net.sf.freecol.common.model.Unit.changeType(UnitType),8
net.sf.freecol.common.model.Unit.changeWorkType(GoodsType),7
"net.sf.freecol.common.model.Unit.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.common.model.Unit.checkSetState(UnitState),8
net.sf.freecol.common.model.Unit.copyIn(T),3
net.sf.freecol.common.model.Unit.couldCarry(Goods),7
net.sf.freecol.common.model.Unit.couldCarry(Unit),7
net.sf.freecol.common.model.Unit.couldMove(),5
net.sf.freecol.common.model.Unit.damageShip(Location),5
net.sf.freecol.common.model.Unit.disposeResources(),5
net.sf.freecol.common.model.Unit.evaluateFor(Player),6
net.sf.freecol.common.model.Unit.findIntermediatePort(Location),9
net.sf.freecol.common.model.Unit.findOurNearestOtherSettlement(),7
net.sf.freecol.common.model.Unit.findOurNearestPort(),8
net.sf.freecol.common.model.Unit.findOurNearestSettlement(),6
"net.sf.freecol.common.model.Unit.findOurNearestSettlement(Tile, boolean, int, boolean)",11
"net.sf.freecol.common.model.Unit.findOurNearestSettlement(boolean, int, boolean)",10
net.sf.freecol.common.model.Unit.findPath(Location),9
"net.sf.freecol.common.model.Unit.findPath(Location, Location)",10
"net.sf.freecol.common.model.Unit.findPath(Location, Location, Unit)",11
"net.sf.freecol.common.model.Unit.findPath(Location, Location, Unit, CostDecider, LogBuilder)",15
"net.sf.freecol.common.model.Unit.findPathToNeighbour(Location, Tile, Unit, CostDecider)",12
net.sf.freecol.common.model.Unit.followingTradeRoute(),7
"net.sf.freecol.common.model.Unit.getAbilities(String, FreeColSpecObjectType, Turn)",3
"net.sf.freecol.common.model.Unit.getAdjacentSettlement(String, Class<T>)",10
net.sf.freecol.common.model.Unit.getApparentOwnerName(),6
net.sf.freecol.common.model.Unit.getAttrition(),5
net.sf.freecol.common.model.Unit.getAutomaticRole(),12
net.sf.freecol.common.model.Unit.getAvailableRoles(List<Role>),8
net.sf.freecol.common.model.Unit.getAvailableRolesList(List<Role>),7
net.sf.freecol.common.model.Unit.getBestEntryTile(Tile),8
net.sf.freecol.common.model.Unit.getBurnProbability(),8
net.sf.freecol.common.model.Unit.getCargoCapacity(),5
net.sf.freecol.common.model.Unit.getCargoSpaceTaken(),5
net.sf.freecol.common.model.Unit.getCarriedUnitById(String),6
net.sf.freecol.common.model.Unit.getCarrier(),5
net.sf.freecol.common.model.Unit.getClassIndex(),3
net.sf.freecol.common.model.Unit.getClosestColony(List<Colony>),7
net.sf.freecol.common.model.Unit.getClosestColony(Stream<Colony>),7
net.sf.freecol.common.model.Unit.getCombatLabel(Tile),6
"net.sf.freecol.common.model.Unit.getCombatModifiers(String, FreeColSpecObjectType, Turn)",13
net.sf.freecol.common.model.Unit.getCompactGoodsList(),5
net.sf.freecol.common.model.Unit.getConsumedGoods(),3
net.sf.freecol.common.model.Unit.getConsumptionModifiers(String),3
net.sf.freecol.common.model.Unit.getConvertProbability(),6
net.sf.freecol.common.model.Unit.getCurrentStop(),5
net.sf.freecol.common.model.Unit.getCurrentStops(),5
net.sf.freecol.common.model.Unit.getDescription(),5
net.sf.freecol.common.model.Unit.getDescription(UnitLabelType),6
net.sf.freecol.common.model.Unit.getDestination(),5
net.sf.freecol.common.model.Unit.getDestinationLabel(),6
net.sf.freecol.common.model.Unit.getDisplayObject(),3
net.sf.freecol.common.model.Unit.getEntryLocation(),6
net.sf.freecol.common.model.Unit.getEthnicity(),9
net.sf.freecol.common.model.Unit.getExperience(),8
net.sf.freecol.common.model.Unit.getExperienceType(),5
net.sf.freecol.common.model.Unit.getFullEntryLocation(),6
net.sf.freecol.common.model.Unit.getGoodsCapacity(),3
"net.sf.freecol.common.model.Unit.getGoodsDifference(Role, int)",8
net.sf.freecol.common.model.Unit.getGoodsInternal(boolean),6
net.sf.freecol.common.model.Unit.getGoodsList(),5
net.sf.freecol.common.model.Unit.getGoodsSpaceTaken(),7
net.sf.freecol.common.model.Unit.getHitPoints(),9
net.sf.freecol.common.model.Unit.getHomeIndianSettlement(),5
net.sf.freecol.common.model.Unit.getInitialMovesLeft(),6
net.sf.freecol.common.model.Unit.getLabel(),5
net.sf.freecol.common.model.Unit.getLabel(UnitLabelType),13
"net.sf.freecol.common.model.Unit.getLandMoveType(Tile, Tile)",8
"net.sf.freecol.common.model.Unit.getLearnMoveType(Tile, Settlement)",7
net.sf.freecol.common.model.Unit.getLineOfSight(),6
net.sf.freecol.common.model.Unit.getLinkTarget(Player),3
net.sf.freecol.common.model.Unit.getLoadableAmount(GoodsType),9
net.sf.freecol.common.model.Unit.getLocation(),5
"net.sf.freecol.common.model.Unit.getLocationAbilities(String, Turn)",15
net.sf.freecol.common.model.Unit.getLocationLabel(),3
net.sf.freecol.common.model.Unit.getMaximumHitPoints(),6
net.sf.freecol.common.model.Unit.getMilitaryRole(),5
"net.sf.freecol.common.model.Unit.getMissionaryMoveType(Tile, Settlement)",7
net.sf.freecol.common.model.Unit.getMissionaryTradeModifiers(boolean),6
"net.sf.freecol.common.model.Unit.getModifiers(String, FreeColSpecObjectType, Turn)",3
net.sf.freecol.common.model.Unit.getMoveCost(Tile),10
"net.sf.freecol.common.model.Unit.getMoveCost(Tile, Tile, int)",14
net.sf.freecol.common.model.Unit.getMoveType(Direction),6
net.sf.freecol.common.model.Unit.getMoveType(Tile),7
"net.sf.freecol.common.model.Unit.getMoveType(Tile, Tile, int)",9
net.sf.freecol.common.model.Unit.getMovesAsString(),5
net.sf.freecol.common.model.Unit.getMovesLeft(),5
net.sf.freecol.common.model.Unit.getName(),5
net.sf.freecol.common.model.Unit.getNationality(),9
"net.sf.freecol.common.model.Unit.getNavalMoveType(Tile, Tile)",8
net.sf.freecol.common.model.Unit.getNeededTurnsOfTraining(),9
net.sf.freecol.common.model.Unit.getNeighbourTile(String),7
net.sf.freecol.common.model.Unit.getNoAddReason(Locatable),3
"net.sf.freecol.common.model.Unit.getOccupationLabel(Player, boolean)",8
net.sf.freecol.common.model.Unit.getOwner(),3
"net.sf.freecol.common.model.Unit.getPathComparator(Location, Unit, CostDecider)",9
net.sf.freecol.common.model.Unit.getPathStartLocation(),8
net.sf.freecol.common.model.Unit.getPioneerScore(),10
net.sf.freecol.common.model.Unit.getPriority(),3
net.sf.freecol.common.model.Unit.getProductionInfo(List<AbstractGoods>),8
net.sf.freecol.common.model.Unit.getRank(),3
net.sf.freecol.common.model.Unit.getRepairLabel(),5
net.sf.freecol.common.model.Unit.getRepairLocation(),7
net.sf.freecol.common.model.Unit.getRole(),5
net.sf.freecol.common.model.Unit.getRoleCount(),5
net.sf.freecol.common.model.Unit.getRoleSuffix(),6
net.sf.freecol.common.model.Unit.getSailTurns(),5
net.sf.freecol.common.model.Unit.getScoreValue(),7
net.sf.freecol.common.model.Unit.getScoutScore(),11
net.sf.freecol.common.model.Unit.getSettlement(),3
net.sf.freecol.common.model.Unit.getSimpleMoveType(Direction),7
net.sf.freecol.common.model.Unit.getSimpleMoveType(Tile),9
"net.sf.freecol.common.model.Unit.getSimpleMoveType(Tile, Tile)",10
net.sf.freecol.common.model.Unit.getSkillLevel(),6
net.sf.freecol.common.model.Unit.getSortedMilitaryRoles(),6
net.sf.freecol.common.model.Unit.getSpaceLeft(),5
net.sf.freecol.common.model.Unit.getSpaceTaken(),3
net.sf.freecol.common.model.Unit.getState(),5
net.sf.freecol.common.model.Unit.getStop(),5
net.sf.freecol.common.model.Unit.getStudent(),5
net.sf.freecol.common.model.Unit.getTeacher(),5
net.sf.freecol.common.model.Unit.getTeachingType(Unit),6
net.sf.freecol.common.model.Unit.getTeachingType(UnitType),8
net.sf.freecol.common.model.Unit.getTile(),3
net.sf.freecol.common.model.Unit.getTradeLocation(),5
net.sf.freecol.common.model.Unit.getTradeMoveType(Settlement),7
net.sf.freecol.common.model.Unit.getTradeRoute(),5
net.sf.freecol.common.model.Unit.getTransportFee(),6
net.sf.freecol.common.model.Unit.getTreasureAmount(),7
net.sf.freecol.common.model.Unit.getTrivialPath(),6
net.sf.freecol.common.model.Unit.getTurnsForRepair(),5
net.sf.freecol.common.model.Unit.getTurnsOfTraining(),8
net.sf.freecol.common.model.Unit.getTurnsToReach(Location),9
"net.sf.freecol.common.model.Unit.getTurnsToReach(Location, Location)",10
"net.sf.freecol.common.model.Unit.getTurnsToReach(Location, Location, Unit, CostDecider)",13
net.sf.freecol.common.model.Unit.getType(),5
net.sf.freecol.common.model.Unit.getUnitChange(String),7
"net.sf.freecol.common.model.Unit.getUnitChange(String, UnitType)",8
"net.sf.freecol.common.model.Unit.getUnitChange(String, UnitType, Player)",9
"net.sf.freecol.common.model.Unit.getUnitDestinationLabel(String, Location, Player)",8
net.sf.freecol.common.model.Unit.getUnitSkillLevel(UnitType),7
net.sf.freecol.common.model.Unit.getUnitSpaceTaken(),5
net.sf.freecol.common.model.Unit.getVisibleGoodsCount(),5
net.sf.freecol.common.model.Unit.getVisibleTileSet(),5
net.sf.freecol.common.model.Unit.getWorkImprovement(),5
net.sf.freecol.common.model.Unit.getWorkLeft(),5
net.sf.freecol.common.model.Unit.getWorkLocation(),5
net.sf.freecol.common.model.Unit.getWorkTile(),5
net.sf.freecol.common.model.Unit.getWorkTurnsLeft(),5
net.sf.freecol.common.model.Unit.getWorkType(),5
net.sf.freecol.common.model.Unit.getXMLTagName(),3
net.sf.freecol.common.model.Unit.goingToDestination(),8
net.sf.freecol.common.model.Unit.hasCargo(),5
net.sf.freecol.common.model.Unit.hasDefaultRole(),5
net.sf.freecol.common.model.Unit.hasGoodsCargo(),5
net.sf.freecol.common.model.Unit.hasNativeEthnicity(),5
net.sf.freecol.common.model.Unit.hasSpaceLeft(),5
net.sf.freecol.common.model.Unit.hasTile(),5
net.sf.freecol.common.model.Unit.initialize(),3
net.sf.freecol.common.model.Unit.invalidateCache(),3
net.sf.freecol.common.model.Unit.isArmed(),5
net.sf.freecol.common.model.Unit.isAtLocation(Location),6
net.sf.freecol.common.model.Unit.isAtSea(),6
net.sf.freecol.common.model.Unit.isBeached(),5
net.sf.freecol.common.model.Unit.isBeached(Tile),6
net.sf.freecol.common.model.Unit.isCandidateForNextActiveUnit(),8
net.sf.freecol.common.model.Unit.isCarrier(),5
net.sf.freecol.common.model.Unit.isColonist(),6
net.sf.freecol.common.model.Unit.isDamaged(),0
net.sf.freecol.common.model.Unit.isDamagedAndUnderForcedRepair(),5
net.sf.freecol.common.model.Unit.isDefensiveUnit(),16
net.sf.freecol.common.model.Unit.isInColony(),5
"net.sf.freecol.common.model.Unit.isInDanger(int, float)",9
net.sf.freecol.common.model.Unit.isInEurope(),6
net.sf.freecol.common.model.Unit.isInMission(),5
net.sf.freecol.common.model.Unit.isMounted(),5
net.sf.freecol.common.model.Unit.isNaval(),5
net.sf.freecol.common.model.Unit.isOffensiveUnit(),6
net.sf.freecol.common.model.Unit.isOnCarrier(),5
net.sf.freecol.common.model.Unit.isOnTile(),5
net.sf.freecol.common.model.Unit.isOwnerHidden(),5
net.sf.freecol.common.model.Unit.isPerson(),5
net.sf.freecol.common.model.Unit.isReadyToTrade(),5
net.sf.freecol.common.model.Unit.isTileAccessible(Tile),8
net.sf.freecol.common.model.Unit.isTradingUnit(),6
net.sf.freecol.common.model.Unit.isUndead(),5
net.sf.freecol.common.model.Unit.losingEquipmentDemotesUnit(),5
net.sf.freecol.common.model.Unit.losingEquipmentKillsUnit(),5
net.sf.freecol.common.model.Unit.modifyExperience(int),8
net.sf.freecol.common.model.Unit.nonExpertWorker(GoodsType),7
net.sf.freecol.common.model.Unit.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.Unit.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.Unit.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.Unit.readyAndAble(),5
"net.sf.freecol.common.model.Unit.realStart(Location, Unit)",10
"net.sf.freecol.common.model.Unit.reduceVisibility(Tile, Player)",13
net.sf.freecol.common.model.Unit.remove(Locatable),3
net.sf.freecol.common.model.Unit.resolveDestination(),8
net.sf.freecol.common.model.Unit.roleIsAvailable(Role),6
"net.sf.freecol.common.model.Unit.search(Location, GoalDecider, CostDecider, int, Unit)",15
"net.sf.freecol.common.model.Unit.searchForDanger(int, float)",9
net.sf.freecol.common.model.Unit.setAttrition(int),5
net.sf.freecol.common.model.Unit.setCurrentStop(int),5
net.sf.freecol.common.model.Unit.setDestination(Location),5
net.sf.freecol.common.model.Unit.setEntryLocation(Location),7
net.sf.freecol.common.model.Unit.setEthnicity(String),5
net.sf.freecol.common.model.Unit.setExperience(int),8
net.sf.freecol.common.model.Unit.setHitPoints(int),5
net.sf.freecol.common.model.Unit.setHomeIndianSettlement(IndianSettlement),6
net.sf.freecol.common.model.Unit.setLocation(Location),11
net.sf.freecol.common.model.Unit.setLocationNoUpdate(Location),9
net.sf.freecol.common.model.Unit.setMovesLeft(int),6
net.sf.freecol.common.model.Unit.setName(String),5
net.sf.freecol.common.model.Unit.setNationality(String),8
net.sf.freecol.common.model.Unit.setOwner(Player),5
net.sf.freecol.common.model.Unit.setRole(Role),5
net.sf.freecol.common.model.Unit.setRoleCount(int),5
net.sf.freecol.common.model.Unit.setState(UnitState),13
net.sf.freecol.common.model.Unit.setStateToAllChildren(UnitState),5
net.sf.freecol.common.model.Unit.setStateUnchecked(UnitState),5
net.sf.freecol.common.model.Unit.setStudent(Unit),5
net.sf.freecol.common.model.Unit.setTeacher(Unit),5
net.sf.freecol.common.model.Unit.setTradeRoute(TradeRoute),5
net.sf.freecol.common.model.Unit.setTreasureAmount(int),5
net.sf.freecol.common.model.Unit.setTurnsOfTraining(int),7
net.sf.freecol.common.model.Unit.setType(UnitType),7
net.sf.freecol.common.model.Unit.setWorkImprovement(TileImprovement),6
net.sf.freecol.common.model.Unit.setWorkLeft(int),5
net.sf.freecol.common.model.Unit.setWorkType(GoodsType),6
net.sf.freecol.common.model.Unit.shouldTakeTransportTo(Location),13
net.sf.freecol.common.model.Unit.spendAllMoves(),6
net.sf.freecol.common.model.Unit.swapWork(Unit),5
net.sf.freecol.common.model.Unit.toShortString(),3
net.sf.freecol.common.model.Unit.toString(),3
net.sf.freecol.common.model.Unit.toString(String),6
net.sf.freecol.common.model.Unit.trySwapExpert(List<Unit>),7
net.sf.freecol.common.model.Unit.up(),3
net.sf.freecol.common.model.Unit.validateCurrentStop(),5
net.sf.freecol.common.model.Unit.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.Unit.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.UnitChangeType.UnitChangeType(String, Specification)",6
net.sf.freecol.common.model.UnitChangeType.addUnitTypeChange(UnitTypeChange),7
net.sf.freecol.common.model.UnitChangeType.copyIn(T),3
net.sf.freecol.common.model.UnitChangeType.deleteUnitChanges(UnitType),0
net.sf.freecol.common.model.UnitChangeType.getChanges(),5
net.sf.freecol.common.model.UnitChangeType.getOwnerChange(),6
"net.sf.freecol.common.model.UnitChangeType.getUnitChange(UnitType, UnitType)",9
net.sf.freecol.common.model.UnitChangeType.getUnitChanges(UnitType),6
net.sf.freecol.common.model.UnitChangeType.getXMLTagName(),3
net.sf.freecol.common.model.UnitChangeType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.UnitChangeType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.UnitChangeType.readChildren(FreeColXMLReader),3
"net.sf.freecol.common.model.UnitChangeType.setChanges(Map<UnitType, List<UnitTypeChange>>)",5
net.sf.freecol.common.model.UnitChangeType.toString(),3
net.sf.freecol.common.model.UnitChangeType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.UnitChangeType.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.UnitChangeTypeTest.testAbilityScope(),0
net.sf.freecol.common.model.UnitChangeTypeTest.testCreation(),0
net.sf.freecol.common.model.UnitChangeTypeTest.testEmptyScope(),0
"net.sf.freecol.common.model.UnitIterator.UnitIterator(Player, Predicate<Unit>)",9
net.sf.freecol.common.model.UnitIterator.hasNext(),3
net.sf.freecol.common.model.UnitIterator.next(),3
net.sf.freecol.common.model.UnitIterator.remove(),3
net.sf.freecol.common.model.UnitIterator.remove(Unit),6
net.sf.freecol.common.model.UnitIterator.reset(),3
net.sf.freecol.common.model.UnitIterator.setNext(Unit),6
net.sf.freecol.common.model.UnitIterator.update(),4
net.sf.freecol.common.model.UnitLocation.NoAddReason.getDescriptionKey(),5
net.sf.freecol.common.model.UnitLocation.NoAddReason.getKey(),5
net.sf.freecol.common.model.UnitLocation.UnitLocation(Game),5
"net.sf.freecol.common.model.UnitLocation.UnitLocation(Game, String)",6
net.sf.freecol.common.model.UnitLocation.add(Locatable),3
net.sf.freecol.common.model.UnitLocation.addUnit(Unit),6
net.sf.freecol.common.model.UnitLocation.canAdd(Locatable),3
net.sf.freecol.common.model.UnitLocation.clearUnitList(),3
net.sf.freecol.common.model.UnitLocation.contains(Locatable),3
net.sf.freecol.common.model.UnitLocation.copyIn(T),3
net.sf.freecol.common.model.UnitLocation.disposeResources(),3
"net.sf.freecol.common.model.UnitLocation.equipForRole(Unit, Role, int)",8
net.sf.freecol.common.model.UnitLocation.getCarrierForUnit(Unit),6
net.sf.freecol.common.model.UnitLocation.getColony(),3
net.sf.freecol.common.model.UnitLocation.getDisposables(),3
net.sf.freecol.common.model.UnitLocation.getFirstUnit(),5
net.sf.freecol.common.model.UnitLocation.getGoodsContainer(),3
net.sf.freecol.common.model.UnitLocation.getIndianSettlement(),3
net.sf.freecol.common.model.UnitLocation.getLastUnit(),5
net.sf.freecol.common.model.UnitLocation.getLocationLabel(),3
net.sf.freecol.common.model.UnitLocation.getLocationLabelFor(Player),3
net.sf.freecol.common.model.UnitLocation.getNavalUnits(),5
net.sf.freecol.common.model.UnitLocation.getNoAddReason(Locatable),15
net.sf.freecol.common.model.UnitLocation.getSettlement(),3
net.sf.freecol.common.model.UnitLocation.getSpaceTaken(),8
net.sf.freecol.common.model.UnitLocation.getTile(),3
net.sf.freecol.common.model.UnitLocation.getTotalUnitCount(),7
net.sf.freecol.common.model.UnitLocation.getUnitCapacity(),6
net.sf.freecol.common.model.UnitLocation.getUnitCount(),3
net.sf.freecol.common.model.UnitLocation.getUnitList(),3
net.sf.freecol.common.model.UnitLocation.getUnits(),3
net.sf.freecol.common.model.UnitLocation.hasCarrierWithSpace(int),8
net.sf.freecol.common.model.UnitLocation.intern(),3
net.sf.freecol.common.model.UnitLocation.isEmpty(),5
net.sf.freecol.common.model.UnitLocation.isFull(),5
net.sf.freecol.common.model.UnitLocation.moveToFront(Unit),5
net.sf.freecol.common.model.UnitLocation.priceGoods(List<AbstractGoods>),7
net.sf.freecol.common.model.UnitLocation.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.UnitLocation.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.UnitLocation.remove(Locatable),3
net.sf.freecol.common.model.UnitLocation.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.UnitTest.testAttrition(),0
net.sf.freecol.common.model.UnitTest.testCanAdd(),0
net.sf.freecol.common.model.UnitTest.testCarrierOwnerChange(),0
net.sf.freecol.common.model.UnitTest.testCopy(),0
net.sf.freecol.common.model.UnitTest.testDefaultRole(),0
net.sf.freecol.common.model.UnitTest.testFailedAddGoods(),0
net.sf.freecol.common.model.UnitTest.testGetLineOfSight(),0
net.sf.freecol.common.model.UnitTest.testGetMovesAsString(),0
net.sf.freecol.common.model.UnitTest.testIndianDies(),0
net.sf.freecol.common.model.UnitTest.testIsColonist(),4
net.sf.freecol.common.model.UnitTest.testMissionary(),0
net.sf.freecol.common.model.UnitTest.testOwnerChange(),0
net.sf.freecol.common.model.UnitTest.testTreasureTransportFee(),0
net.sf.freecol.common.model.UnitTest.testUnitAvailability(),0
net.sf.freecol.common.model.UnitTest.testUnitCanBuildColony(),0
net.sf.freecol.common.model.UnitTest.testUnitLocationAfterBuildingColony(),0
net.sf.freecol.common.model.UnitTest.testUnitLosesExperienceWithRoleChange(),0
"net.sf.freecol.common.model.UnitTradeItem.UnitTradeItem(Game, FreeColXMLReader)",7
"net.sf.freecol.common.model.UnitTradeItem.UnitTradeItem(Game, Player, Player, Unit)",8
net.sf.freecol.common.model.UnitTradeItem.copyIn(T),3
net.sf.freecol.common.model.UnitTradeItem.equals(Object),3
net.sf.freecol.common.model.UnitTradeItem.evaluateFor(Player),3
net.sf.freecol.common.model.UnitTradeItem.getLabel(),3
net.sf.freecol.common.model.UnitTradeItem.getUnit(),3
net.sf.freecol.common.model.UnitTradeItem.getXMLTagName(),3
net.sf.freecol.common.model.UnitTradeItem.hashCode(),3
net.sf.freecol.common.model.UnitTradeItem.isUnique(),3
net.sf.freecol.common.model.UnitTradeItem.isValid(),3
net.sf.freecol.common.model.UnitTradeItem.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.UnitTradeItem.setUnit(Unit),3
net.sf.freecol.common.model.UnitTradeItem.toString(),3
net.sf.freecol.common.model.UnitTradeItem.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.UnitType.UnitType(String, Specification)",6
"net.sf.freecol.common.model.UnitType.addConsumption(GoodsType, int)",6
"net.sf.freecol.common.model.UnitType.canBeBuiltInColony(Colony, List<BuildableType>)",3
net.sf.freecol.common.model.UnitType.canBuildColony(),5
net.sf.freecol.common.model.UnitType.canCarryGoods(),5
net.sf.freecol.common.model.UnitType.canCarryTreasure(),5
net.sf.freecol.common.model.UnitType.canCarryUnits(),5
net.sf.freecol.common.model.UnitType.canMoveToHighSeas(),8
net.sf.freecol.common.model.UnitType.copyIn(T),3
net.sf.freecol.common.model.UnitType.getAttackRange(),0
net.sf.freecol.common.model.UnitType.getBaseDefence(),5
net.sf.freecol.common.model.UnitType.getBaseOffence(),5
net.sf.freecol.common.model.UnitType.getConsumedGoods(),3
net.sf.freecol.common.model.UnitType.getConsumption(),5
net.sf.freecol.common.model.UnitType.getConsumptionModifiers(String),3
net.sf.freecol.common.model.UnitType.getConsumptionOf(GoodsType),7
net.sf.freecol.common.model.UnitType.getDefaultRole(),5
net.sf.freecol.common.model.UnitType.getDefence(),5
net.sf.freecol.common.model.UnitType.getDisplayRoleId(),5
net.sf.freecol.common.model.UnitType.getExpertProduction(),5
net.sf.freecol.common.model.UnitType.getExpertRoles(),6
net.sf.freecol.common.model.UnitType.getHitPoints(),5
net.sf.freecol.common.model.UnitType.getLineOfSight(),5
net.sf.freecol.common.model.UnitType.getMaximumAttrition(),6
net.sf.freecol.common.model.UnitType.getMaximumExperience(),5
"net.sf.freecol.common.model.UnitType.getMaximumIndex(Colony, JList<BuildableType>, int)",0
net.sf.freecol.common.model.UnitType.getMercenaryPrice(),6
"net.sf.freecol.common.model.UnitType.getMinimumIndex(Colony, JList<BuildableType>, int)",0
net.sf.freecol.common.model.UnitType.getMovement(),5
net.sf.freecol.common.model.UnitType.getOffence(),5
net.sf.freecol.common.model.UnitType.getPrice(),7
net.sf.freecol.common.model.UnitType.getPriority(),3
net.sf.freecol.common.model.UnitType.getRecruitProbability(),5
net.sf.freecol.common.model.UnitType.getScoreValue(),5
net.sf.freecol.common.model.UnitType.getSkill(),5
net.sf.freecol.common.model.UnitType.getSkillTaught(),5
net.sf.freecol.common.model.UnitType.getSpace(),5
net.sf.freecol.common.model.UnitType.getSpaceTaken(),5
net.sf.freecol.common.model.UnitType.getTeachingType(UnitType),8
net.sf.freecol.common.model.UnitType.getWorkingAsKey(),5
net.sf.freecol.common.model.UnitType.getXMLTagName(),3
net.sf.freecol.common.model.UnitType.hasMaximumAttrition(),5
net.sf.freecol.common.model.UnitType.hasPrice(),5
net.sf.freecol.common.model.UnitType.hasSkill(),5
net.sf.freecol.common.model.UnitType.isDefaultUnitType(),5
net.sf.freecol.common.model.UnitType.isDefensive(),9
net.sf.freecol.common.model.UnitType.isNaval(),5
net.sf.freecol.common.model.UnitType.isOffensive(),5
net.sf.freecol.common.model.UnitType.isPerson(),5
net.sf.freecol.common.model.UnitType.isRecruitable(),5
net.sf.freecol.common.model.UnitType.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.UnitType.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.UnitType.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.UnitType.setAttackRange(int),3
net.sf.freecol.common.model.UnitType.setConsumption(TypeCountMap<GoodsType>),5
net.sf.freecol.common.model.UnitType.setHitPoints(int),3
net.sf.freecol.common.model.UnitType.setLineOfSight(int),3
net.sf.freecol.common.model.UnitType.setMercenaryPrice(int),5
net.sf.freecol.common.model.UnitType.setSkill(int),6
net.sf.freecol.common.model.UnitType.setSpace(int),6
net.sf.freecol.common.model.UnitType.setSpaceTaken(int),6
net.sf.freecol.common.model.UnitType.toString(),3
net.sf.freecol.common.model.UnitType.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.UnitType.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.model.UnitTypeChange.UnitTypeChange(FreeColXMLReader, Specification)",8
"net.sf.freecol.common.model.UnitTypeChange.UnitTypeChange(String, Specification)",6
net.sf.freecol.common.model.UnitTypeChange.copyIn(T),3
net.sf.freecol.common.model.UnitTypeChange.getXMLTagName(),3
net.sf.freecol.common.model.UnitTypeChange.isAvailableTo(Player),7
net.sf.freecol.common.model.UnitTypeChange.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.UnitTypeChange.toString(),3
net.sf.freecol.common.model.UnitTypeChange.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.UnitWas.UnitWas(Unit),5
net.sf.freecol.common.model.UnitWas.change(FreeColGameObject),0
net.sf.freecol.common.model.UnitWas.compareTo(UnitWas),3
net.sf.freecol.common.model.UnitWas.equals(Object),3
net.sf.freecol.common.model.UnitWas.fireChanges(),3
"net.sf.freecol.common.model.UnitWas.getAmount(Location, GoodsType)",0
net.sf.freecol.common.model.UnitWas.getLocation(),0
net.sf.freecol.common.model.UnitWas.getUnit(),0
net.sf.freecol.common.model.UnitWas.getWorkType(),0
net.sf.freecol.common.model.UnitWas.hashCode(),3
net.sf.freecol.common.model.UnitWas.toString(),3
"net.sf.freecol.common.model.WorkLocation.Suggestion.Suggestion(WorkLocation, UnitType, UnitType, GoodsType, int)",15
net.sf.freecol.common.model.WorkLocation.Suggestion.getAmount(),0
net.sf.freecol.common.model.WorkLocation.Suggestion.getGoodsType(),0
net.sf.freecol.common.model.WorkLocation.Suggestion.getNewUnitType(),0
net.sf.freecol.common.model.WorkLocation.WorkLocation(Game),5
"net.sf.freecol.common.model.WorkLocation.WorkLocation(Game, String)",8
net.sf.freecol.common.model.WorkLocation.add(Locatable),3
net.sf.freecol.common.model.WorkLocation.canBeWorked(),5
net.sf.freecol.common.model.WorkLocation.canTeach(),6
net.sf.freecol.common.model.WorkLocation.copyIn(T),3
net.sf.freecol.common.model.WorkLocation.evaluateFor(Player),7
"net.sf.freecol.common.model.WorkLocation.getBestProductionType(boolean, GoodsType)",8
net.sf.freecol.common.model.WorkLocation.getClaimTemplate(),8
net.sf.freecol.common.model.WorkLocation.getColony(),3
net.sf.freecol.common.model.WorkLocation.getCurrentWorkType(),9
net.sf.freecol.common.model.WorkLocation.getExpertUnitType(),6
net.sf.freecol.common.model.WorkLocation.getGenericPotential(GoodsType),7
net.sf.freecol.common.model.WorkLocation.getInputs(),5
net.sf.freecol.common.model.WorkLocation.getLocationLabelFor(Player),3
net.sf.freecol.common.model.WorkLocation.getMaximumProductionOf(GoodsType),7
net.sf.freecol.common.model.WorkLocation.getNoAddReason(Locatable),3
"net.sf.freecol.common.model.WorkLocation.getOccupation(Unit, boolean)",10
net.sf.freecol.common.model.WorkLocation.getOccupation(UnitType),8
net.sf.freecol.common.model.WorkLocation.getOutputs(),5
net.sf.freecol.common.model.WorkLocation.getOwner(),6
"net.sf.freecol.common.model.WorkLocation.getPotentialProduction(GoodsType, UnitType)",23
net.sf.freecol.common.model.WorkLocation.getProduction(),5
net.sf.freecol.common.model.WorkLocation.getProductionDeficit(GoodsType),7
net.sf.freecol.common.model.WorkLocation.getProductionInfo(),6
"net.sf.freecol.common.model.WorkLocation.getProductionOf(Unit, GoodsType)",7
net.sf.freecol.common.model.WorkLocation.getProductionType(),5
net.sf.freecol.common.model.WorkLocation.getRank(),3
net.sf.freecol.common.model.WorkLocation.getSettlement(),3
"net.sf.freecol.common.model.WorkLocation.getSuggestion(Unit, ProductionType, GoodsType)",11
net.sf.freecol.common.model.WorkLocation.getSuggestions(),6
net.sf.freecol.common.model.WorkLocation.getTile(),3
net.sf.freecol.common.model.WorkLocation.getTotalProductionOf(GoodsType),7
"net.sf.freecol.common.model.WorkLocation.getUnitProduction(Unit, GoodsType)",11
net.sf.freecol.common.model.WorkLocation.getWorkFor(Unit),8
"net.sf.freecol.common.model.WorkLocation.goodSuggestionCheck(UnitType, Unit, GoodsType)",9
"net.sf.freecol.common.model.WorkLocation.goodSuggestionCheck(UnitType, Unit, GoodsType, WorkLocation)",11
net.sf.freecol.common.model.WorkLocation.hasInputs(),5
net.sf.freecol.common.model.WorkLocation.hasOutputs(),5
net.sf.freecol.common.model.WorkLocation.produces(GoodsType),7
net.sf.freecol.common.model.WorkLocation.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.WorkLocation.readChild(FreeColXMLReader),3
net.sf.freecol.common.model.WorkLocation.remove(Locatable),3
net.sf.freecol.common.model.WorkLocation.setColony(Colony),0
net.sf.freecol.common.model.WorkLocation.setOwner(Player),10
net.sf.freecol.common.model.WorkLocation.setProductionType(ProductionType),5
net.sf.freecol.common.model.WorkLocation.setWorkFor(Unit),6
net.sf.freecol.common.model.WorkLocation.updateProductionType(),5
net.sf.freecol.common.model.WorkLocation.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.WorkLocation.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.mission.AbstractMission.AbstractMission(Game),5
"net.sf.freecol.common.model.mission.AbstractMission.AbstractMission(Game, FreeColXMLReader)",6
"net.sf.freecol.common.model.mission.AbstractMission.AbstractMission(Game, String)",6
net.sf.freecol.common.model.mission.AbstractMission.getRepeatCount(),5
net.sf.freecol.common.model.mission.AbstractMission.getTurnCount(),5
net.sf.freecol.common.model.mission.AbstractMission.getUnit(),5
net.sf.freecol.common.model.mission.AbstractMission.isValid(),7
net.sf.freecol.common.model.mission.AbstractMission.isValidFor(Unit),8
net.sf.freecol.common.model.mission.AbstractMission.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.mission.AbstractMission.setRepeatCount(int),5
net.sf.freecol.common.model.mission.AbstractMission.setTurnCount(int),5
net.sf.freecol.common.model.mission.AbstractMission.setUnit(Unit),5
net.sf.freecol.common.model.mission.AbstractMission.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.mission.CompoundMission.CompoundMission(Game),5
"net.sf.freecol.common.model.mission.CompoundMission.CompoundMission(Game, FreeColXMLReader)",6
"net.sf.freecol.common.model.mission.CompoundMission.CompoundMission(Game, String)",6
net.sf.freecol.common.model.mission.CompoundMission.doMission(),3
net.sf.freecol.common.model.mission.CompoundMission.getIndex(),5
net.sf.freecol.common.model.mission.CompoundMission.getMissions(),5
net.sf.freecol.common.model.mission.CompoundMission.getXMLTagName(),3
net.sf.freecol.common.model.mission.CompoundMission.isValid(),5
net.sf.freecol.common.model.mission.CompoundMission.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.mission.CompoundMission.readChildren(FreeColXMLReader),3
net.sf.freecol.common.model.mission.CompoundMission.setIndex(int),5
net.sf.freecol.common.model.mission.CompoundMission.setMissions(List<Mission>),5
net.sf.freecol.common.model.mission.CompoundMission.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.mission.CompoundMission.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.model.mission.GoToMission.GoToMission(Game),5
"net.sf.freecol.common.model.mission.GoToMission.GoToMission(Game, FreeColXMLReader)",6
"net.sf.freecol.common.model.mission.GoToMission.GoToMission(Game, String)",6
net.sf.freecol.common.model.mission.GoToMission.doMission(),3
net.sf.freecol.common.model.mission.GoToMission.getBlockedCount(),5
net.sf.freecol.common.model.mission.GoToMission.getDestination(),5
net.sf.freecol.common.model.mission.GoToMission.getXMLTagName(),3
net.sf.freecol.common.model.mission.GoToMission.isValid(),5
net.sf.freecol.common.model.mission.GoToMission.isValidFor(Unit),7
net.sf.freecol.common.model.mission.GoToMission.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.mission.GoToMission.setBlockedCount(int),5
net.sf.freecol.common.model.mission.GoToMission.setDestination(Location),5
net.sf.freecol.common.model.mission.GoToMission.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.model.mission.ImprovementMission.ImprovementMission(Game),5
"net.sf.freecol.common.model.mission.ImprovementMission.ImprovementMission(Game, FreeColXMLReader)",6
"net.sf.freecol.common.model.mission.ImprovementMission.ImprovementMission(Game, String)",6
net.sf.freecol.common.model.mission.ImprovementMission.doMission(),3
net.sf.freecol.common.model.mission.ImprovementMission.getImprovement(),5
net.sf.freecol.common.model.mission.ImprovementMission.getXMLTagName(),3
net.sf.freecol.common.model.mission.ImprovementMission.isValid(),5
net.sf.freecol.common.model.mission.ImprovementMission.isValidFor(Unit),7
net.sf.freecol.common.model.mission.ImprovementMission.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.model.mission.ImprovementMission.setImprovement(TileImprovement),5
net.sf.freecol.common.model.mission.ImprovementMission.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.model.mission.MissionManager.getMission(Game, FreeColXMLReader)",9
net.sf.freecol.common.model.mission.MissionManager.isMissionTag(String),6
"net.sf.freecol.common.model.pathfinding.BaseCostDecider.adjust(Unit, Tile, Tile, int)",11
"net.sf.freecol.common.model.pathfinding.BaseCostDecider.getCost(Unit, Location, Location, int)",10
net.sf.freecol.common.model.pathfinding.BaseCostDecider.getMovesLeft(),6
net.sf.freecol.common.model.pathfinding.BaseCostDecider.getNewTurns(),6
"net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidNavalDangerCostDecider.getCost(Unit, Location, Location, int)",0
"net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidSettlementsAndBlockingUnitsCostDecider.getCost(Unit, Location, Location, int)",0
"net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidSettlementsCostDecider.getCost(Unit, Location, Location, int)",0
"net.sf.freecol.common.model.pathfinding.CostDeciders.ServerBaseCostDecider.getCost(Unit, Location, Location, int)",0
"net.sf.freecol.common.model.pathfinding.CostDeciders.TileCostDecider.getCost(Unit, Location, Location, int)",0
net.sf.freecol.common.model.pathfinding.CostDeciders.avoidIllegal(),6
net.sf.freecol.common.model.pathfinding.CostDeciders.avoidNavalDanger(),6
net.sf.freecol.common.model.pathfinding.CostDeciders.avoidSettlements(),9
net.sf.freecol.common.model.pathfinding.CostDeciders.avoidSettlementsAndBlockingUnits(),8
net.sf.freecol.common.model.pathfinding.CostDeciders.defaultCostDeciderFor(Unit),8
net.sf.freecol.common.model.pathfinding.CostDeciders.getComposedCostDecider(CostDecider...),11
net.sf.freecol.common.model.pathfinding.CostDeciders.numberOfLegalTiles(),6
net.sf.freecol.common.model.pathfinding.CostDeciders.numberOfTiles(),5
net.sf.freecol.common.model.pathfinding.CostDeciders.serverAvoidIllegal(),8
net.sf.freecol.common.model.pathfinding.CostDeciders.tileCost(),9
net.sf.freecol.common.model.pathfinding.GoalDeciders.MultipleAdjacentDecider.MultipleAdjacentDecider(List<Location>),6
net.sf.freecol.common.model.pathfinding.GoalDeciders.MultipleAdjacentDecider.getGoalDecider(),0
net.sf.freecol.common.model.pathfinding.GoalDeciders.MultipleAdjacentDecider.getResults(),0
net.sf.freecol.common.model.pathfinding.GoalDeciders.getAdjacentLocationGoalDecider(Location),7
"net.sf.freecol.common.model.pathfinding.GoalDeciders.getComposedGoalDecider(boolean, GoalDecider...)",11
net.sf.freecol.common.model.pathfinding.GoalDeciders.getCornerGoalDecider(),8
net.sf.freecol.common.model.pathfinding.GoalDeciders.getDisembarkGoalDecider(Tile),14
net.sf.freecol.common.model.pathfinding.GoalDeciders.getEnemySettlementGoalDecider(Collection<Player>),7
net.sf.freecol.common.model.pathfinding.GoalDeciders.getHighSeasGoalDecider(),6
net.sf.freecol.common.model.pathfinding.GoalDeciders.getLocationGoalDecider(Location),7
net.sf.freecol.common.model.pathfinding.GoalDeciders.getOurClosestSettlementGoalDecider(),6
net.sf.freecol.common.model.pathfinding.GoalDeciders.getReduceHighSeasCountGoalDecider(Unit),8
net.sf.freecol.common.model.pathfinding.GoalDeciders.getSimpleHighSeasGoalDecider(),6
net.sf.freecol.common.model.pathfinding.GoalDeciders.getStealthyGoalDecider(Player),6
"net.sf.freecol.common.model.production.BuildingProductionCalculator.BuildingProductionCalculator(Player, FeatureContainer, int)",9
"net.sf.freecol.common.model.production.BuildingProductionCalculator.determineProduction(BuildingType, List<WorkerAssignment>, Turn, GoodsType)",0
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getAdjustedProductionInfo(BuildingType, Turn, List<WorkerAssignment>, List<AbstractGoods>, List<AbstractGoods>, int)",15
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getAvailable(GoodsType, List<AbstractGoods>)",8
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getBaseProduction(BuildingType, ProductionType, GoodsType, UnitType)",0
net.sf.freecol.common.model.production.BuildingProductionCalculator.getBestProductionType(BuildingType),0
net.sf.freecol.common.model.production.BuildingProductionCalculator.getExpertUnitType(BuildingType),6
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getInputs(BuildingType, List<WorkerAssignment>)",0
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getOutputs(BuildingType, List<WorkerAssignment>)",0
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getProductionModifiers(Turn, BuildingType, GoodsType, UnitType)",0
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getUnitProduction(Turn, BuildingType, WorkerAssignment, GoodsType)",11
net.sf.freecol.common.model.production.ProductionUtils.ProductionUtils(),0
"net.sf.freecol.common.model.production.ProductionUtils.createRebelProductionModifierStream(int, GoodsType, int)",0
"net.sf.freecol.common.model.production.ProductionUtils.getRebelProductionModifiersForBuilding(BuildingType, int, GoodsType, UnitType)",11
"net.sf.freecol.common.model.production.ProductionUtils.getRebelProductionModifiersForTile(Tile, int, GoodsType, UnitType)",9
"net.sf.freecol.common.model.production.TileProductionCalculator.TileProductionCalculator(Player, int)",7
"net.sf.freecol.common.model.production.TileProductionCalculator.getBaseProduction(Tile, ProductionType, GoodsType, UnitType)",10
"net.sf.freecol.common.model.production.TileProductionCalculator.getBasicProductionInfo(Tile, Turn, WorkerAssignment, boolean)",19
"net.sf.freecol.common.model.production.TileProductionCalculator.getCenterTileProduction(Turn, Tile, GoodsType)",0
"net.sf.freecol.common.model.production.TileProductionCalculator.getCenterTileProductionModifiers(Turn, Tile, GoodsType)",8
"net.sf.freecol.common.model.production.TileProductionCalculator.getProductionModifiers(Turn, Tile, GoodsType, UnitType)",8
"net.sf.freecol.common.model.production.TileProductionCalculator.getUnitProduction(Turn, Tile, WorkerAssignment, GoodsType)",13
"net.sf.freecol.common.model.production.WorkerAssignment.WorkerAssignment(UnitType, ProductionType)",0
net.sf.freecol.common.model.production.WorkerAssignment.getProductionType(),0
net.sf.freecol.common.model.production.WorkerAssignment.getUnitType(),0
net.sf.freecol.common.networking.AbandonColonyMessage.AbandonColonyMessage(Colony),6
"net.sf.freecol.common.networking.AbandonColonyMessage.AbandonColonyMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.AbandonColonyMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.AbandonColonyMessage.getPriority(),3
"net.sf.freecol.common.networking.AbandonColonyMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.AddPlayerMessage.AddPlayerMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.AddPlayerMessage.AddPlayerMessage(Player, List<Player>)",6
"net.sf.freecol.common.networking.AddPlayerMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.AddPlayerMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.AddPlayerMessage.getPlayers(),5
net.sf.freecol.common.networking.AddPlayerMessage.getPriority(),3
net.sf.freecol.common.networking.AddPlayerMessage.toXML(FreeColXMLWriter),3
"net.sf.freecol.common.networking.AnimateAttackMessage.AnimateAttackMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.AnimateAttackMessage.AnimateAttackMessage(Unit, Unit, boolean, boolean, boolean)",10
"net.sf.freecol.common.networking.AnimateAttackMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.AnimateAttackMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.AnimateAttackMessage.getAttacker(Game),6
net.sf.freecol.common.networking.AnimateAttackMessage.getAttackerTile(Game),6
net.sf.freecol.common.networking.AnimateAttackMessage.getDefender(Game),6
net.sf.freecol.common.networking.AnimateAttackMessage.getDefenderTile(Game),6
net.sf.freecol.common.networking.AnimateAttackMessage.getPriority(),3
net.sf.freecol.common.networking.AnimateAttackMessage.getResult(),5
"net.sf.freecol.common.networking.AnimateAttackMessage.getUnit(Game, String)",7
"net.sf.freecol.common.networking.AnimateMoveMessage.AnimateMoveMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.AnimateMoveMessage.AnimateMoveMessage(Unit, Tile, Tile, boolean)",10
"net.sf.freecol.common.networking.AnimateMoveMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.AnimateMoveMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.AnimateMoveMessage.getNewTile(Game),6
net.sf.freecol.common.networking.AnimateMoveMessage.getOldTile(Game),6
net.sf.freecol.common.networking.AnimateMoveMessage.getPriority(),3
net.sf.freecol.common.networking.AnimateMoveMessage.getUnit(Game),6
"net.sf.freecol.common.networking.AskSkillMessage.AskSkillMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.AskSkillMessage.AskSkillMessage(Unit, Direction)",7
net.sf.freecol.common.networking.AskSkillMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.AskSkillMessage.getPriority(),3
"net.sf.freecol.common.networking.AskSkillMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.AssignTeacherMessage.AssignTeacherMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.AssignTeacherMessage.AssignTeacherMessage(Unit, Unit)",7
net.sf.freecol.common.networking.AssignTeacherMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.AssignTeacherMessage.getPriority(),3
"net.sf.freecol.common.networking.AssignTeacherMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.AssignTradeRouteMessage.AssignTradeRouteMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.AssignTradeRouteMessage.AssignTradeRouteMessage(Unit, TradeRoute)",7
"net.sf.freecol.common.networking.AssignTradeRouteMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.AssignTradeRouteMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.AssignTradeRouteMessage.getPriority(),3
"net.sf.freecol.common.networking.AssignTradeRouteMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.AttackMessage.AttackMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.AttackMessage.AttackMessage(Unit, Direction)",7
net.sf.freecol.common.networking.AttackMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.AttackMessage.getPriority(),3
"net.sf.freecol.common.networking.AttackMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.AttackRangedMessage.AttackRangedMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.AttackRangedMessage.AttackRangedMessage(Unit, Tile)",7
net.sf.freecol.common.networking.AttackRangedMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.AttackRangedMessage.getPriority(),3
"net.sf.freecol.common.networking.AttackRangedMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.AttributeMessage.AttributeMessage(String),5
"net.sf.freecol.common.networking.AttributeMessage.AttributeMessage(String, FreeColXMLReader, String...)",11
"net.sf.freecol.common.networking.AttributeMessage.AttributeMessage(String, Map<String, String>)",6
"net.sf.freecol.common.networking.AttributeMessage.AttributeMessage(String, String...)",6
net.sf.freecol.common.networking.AttributeMessage.canMerge(),3
net.sf.freecol.common.networking.AttributeMessage.getPriority(),3
net.sf.freecol.common.networking.AttributeMessage.getStringAttribute(String),3
net.sf.freecol.common.networking.AttributeMessage.getStringAttributeMap(),3
net.sf.freecol.common.networking.AttributeMessage.hasAttribute(String),3
net.sf.freecol.common.networking.AttributeMessage.setMergeable(boolean),6
"net.sf.freecol.common.networking.AttributeMessage.setStringAttribute(String, String)",3
"net.sf.freecol.common.networking.BuildColonyMessage.BuildColonyMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.BuildColonyMessage.BuildColonyMessage(String, Unit)",7
net.sf.freecol.common.networking.BuildColonyMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.BuildColonyMessage.getPriority(),3
"net.sf.freecol.common.networking.BuildColonyMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.CashInTreasureTrainMessage.CashInTreasureTrainMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.CashInTreasureTrainMessage.CashInTreasureTrainMessage(Unit),6
net.sf.freecol.common.networking.CashInTreasureTrainMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.CashInTreasureTrainMessage.getPriority(),3
"net.sf.freecol.common.networking.CashInTreasureTrainMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.ChangeSet.AttackChange.AttackChange(See, Unit, Unit, boolean)",23
net.sf.freecol.common.networking.ChangeSet.AttackChange.attackerVisible(Player),6
net.sf.freecol.common.networking.ChangeSet.AttackChange.defenderVisible(Player),13
net.sf.freecol.common.networking.ChangeSet.AttackChange.isNotifiable(Player),3
net.sf.freecol.common.networking.ChangeSet.AttackChange.toMessage(Player),3
net.sf.freecol.common.networking.ChangeSet.AttackChange.toString(),3
"net.sf.freecol.common.networking.ChangeSet.AttributeChange.AttributeChange(See, String, String)",7
net.sf.freecol.common.networking.ChangeSet.AttributeChange.toMessage(Player),3
net.sf.freecol.common.networking.ChangeSet.AttributeChange.toString(),3
net.sf.freecol.common.networking.ChangeSet.Change.Change(See),5
net.sf.freecol.common.networking.ChangeSet.Change.check(Player),6
net.sf.freecol.common.networking.ChangeSet.Change.consequence(Player),6
net.sf.freecol.common.networking.ChangeSet.Change.isNotifiable(Player),8
net.sf.freecol.common.networking.ChangeSet.Change.matches(FreeColGameObject),6
net.sf.freecol.common.networking.ChangeSet.ChangeSet(),3
net.sf.freecol.common.networking.ChangeSet.ChangeSet(ChangeSet),5
"net.sf.freecol.common.networking.ChangeSet.FeatureChange.FeatureChange(See, FreeColGameObject, FreeColObject, boolean)",8
net.sf.freecol.common.networking.ChangeSet.FeatureChange.isNotifiable(Player),3
net.sf.freecol.common.networking.ChangeSet.FeatureChange.toMessage(Player),3
net.sf.freecol.common.networking.ChangeSet.FeatureChange.toString(),3
"net.sf.freecol.common.networking.ChangeSet.MessageChange.MessageChange(See, T)",6
net.sf.freecol.common.networking.ChangeSet.MessageChange.toMessage(Player),3
net.sf.freecol.common.networking.ChangeSet.MessageChange.toString(),3
"net.sf.freecol.common.networking.ChangeSet.MoveChange.MoveChange(See, Unit, Location, Tile)",8
net.sf.freecol.common.networking.ChangeSet.MoveChange.consequence(Player),3
net.sf.freecol.common.networking.ChangeSet.MoveChange.isNotifiable(Player),3
net.sf.freecol.common.networking.ChangeSet.MoveChange.seeNew(Player),6
net.sf.freecol.common.networking.ChangeSet.MoveChange.seeOld(Player),6
net.sf.freecol.common.networking.ChangeSet.MoveChange.toMessage(Player),3
net.sf.freecol.common.networking.ChangeSet.MoveChange.toString(),3
"net.sf.freecol.common.networking.ChangeSet.ObjectChange.ObjectChange(See, FreeColGameObject)",6
net.sf.freecol.common.networking.ChangeSet.ObjectChange.isNotifiable(Player),3
net.sf.freecol.common.networking.ChangeSet.ObjectChange.matches(FreeColGameObject),3
net.sf.freecol.common.networking.ChangeSet.ObjectChange.toMessage(Player),3
net.sf.freecol.common.networking.ChangeSet.ObjectChange.toString(),3
"net.sf.freecol.common.networking.ChangeSet.PartialObjectChange.PartialObjectChange(See, T, Map<String, String>)",7
net.sf.freecol.common.networking.ChangeSet.PartialObjectChange.toMessage(Player),3
net.sf.freecol.common.networking.ChangeSet.PartialObjectChange.toString(),3
"net.sf.freecol.common.networking.ChangeSet.PlayerChange.PlayerChange(See, List<? extends Player>)",6
net.sf.freecol.common.networking.ChangeSet.PlayerChange.toMessage(Player),3
net.sf.freecol.common.networking.ChangeSet.PlayerChange.toString(),3
"net.sf.freecol.common.networking.ChangeSet.RemoveChange.RemoveChange(See, Location, Stream<? extends FreeColGameObject>)",7
net.sf.freecol.common.networking.ChangeSet.RemoveChange.fullRemoval(Player),7
net.sf.freecol.common.networking.ChangeSet.RemoveChange.getMainObject(),6
net.sf.freecol.common.networking.ChangeSet.RemoveChange.isNotifiable(Player),3
net.sf.freecol.common.networking.ChangeSet.RemoveChange.toMessage(Player),3
net.sf.freecol.common.networking.ChangeSet.RemoveChange.toString(),3
net.sf.freecol.common.networking.ChangeSet.See.See(int),0
net.sf.freecol.common.networking.ChangeSet.See.all(),5
net.sf.freecol.common.networking.ChangeSet.See.always(Player),6
net.sf.freecol.common.networking.ChangeSet.See.check(Player),7
net.sf.freecol.common.networking.ChangeSet.See.except(Player),6
net.sf.freecol.common.networking.ChangeSet.See.only(Player),6
net.sf.freecol.common.networking.ChangeSet.See.perhaps(),6
net.sf.freecol.common.networking.ChangeSet.See.perhapsOnly(Player),7
net.sf.freecol.common.networking.ChangeSet.See.toString(),3
"net.sf.freecol.common.networking.ChangeSet.SpyChange.SpyChange(See, Unit, Settlement)",7
net.sf.freecol.common.networking.ChangeSet.SpyChange.toMessage(Player),3
net.sf.freecol.common.networking.ChangeSet.SpyChange.toString(),3
"net.sf.freecol.common.networking.ChangeSet.StanceChange.StanceChange(See, Player, Stance, Player)",8
net.sf.freecol.common.networking.ChangeSet.StanceChange.toMessage(Player),3
net.sf.freecol.common.networking.ChangeSet.StanceChange.toString(),3
"net.sf.freecol.common.networking.ChangeSet.add(See, Collection<? extends FreeColGameObject>)",7
"net.sf.freecol.common.networking.ChangeSet.add(See, FreeColGameObject...)",7
"net.sf.freecol.common.networking.ChangeSet.add(See, T)",8
"net.sf.freecol.common.networking.ChangeSet.addAbility(Player, FreeColGameObject, Ability, boolean)",9
"net.sf.freecol.common.networking.ChangeSet.addAttack(See, Unit, Unit, boolean)",9
"net.sf.freecol.common.networking.ChangeSet.addAttribute(See, String, String)",8
"net.sf.freecol.common.networking.ChangeSet.addDisappear(Player, Tile, FreeColGameObject)",9
"net.sf.freecol.common.networking.ChangeSet.addGlobalHistory(Game, HistoryEvent)",8
"net.sf.freecol.common.networking.ChangeSet.addGlobalMessage(Game, Player, ModelMessage)",8
"net.sf.freecol.common.networking.ChangeSet.addHistory(Player, HistoryEvent)",8
"net.sf.freecol.common.networking.ChangeSet.addMessage(Player, ModelMessage)",7
"net.sf.freecol.common.networking.ChangeSet.addModifier(Player, FreeColGameObject, Modifier, boolean)",9
"net.sf.freecol.common.networking.ChangeSet.addMove(See, Unit, Location, Tile)",9
net.sf.freecol.common.networking.ChangeSet.addNewPlayer(Player),10
"net.sf.freecol.common.networking.ChangeSet.addPartial(See, T, String...)",10
net.sf.freecol.common.networking.ChangeSet.addPlayers(List<? extends Player>),9
"net.sf.freecol.common.networking.ChangeSet.addRemove(See, Location, FreeColGameObject)",11
"net.sf.freecol.common.networking.ChangeSet.addRemoves(See, Location, List<? extends FreeColGameObject>)",8
"net.sf.freecol.common.networking.ChangeSet.addSale(Player, Settlement, GoodsType, int)",9
"net.sf.freecol.common.networking.ChangeSet.addSpy(Unit, Settlement)",7
"net.sf.freecol.common.networking.ChangeSet.addStance(See, Player, Stance, Player)",9
"net.sf.freecol.common.networking.ChangeSet.aiChange(Player, boolean)",7
net.sf.freecol.common.networking.ChangeSet.build(Player),7
net.sf.freecol.common.networking.ChangeSet.clear(),3
"net.sf.freecol.common.networking.ChangeSet.clientError(Player, String)",8
"net.sf.freecol.common.networking.ChangeSet.clientError(Player, StringTemplate)",8
"net.sf.freecol.common.networking.ChangeSet.clientError(See, String)",8
"net.sf.freecol.common.networking.ChangeSet.clientError(See, StringTemplate)",8
net.sf.freecol.common.networking.ChangeSet.isEmpty(),5
net.sf.freecol.common.networking.ChangeSet.merge(ChangeSet),5
net.sf.freecol.common.networking.ChangeSet.remove(FreeColGameObject),6
"net.sf.freecol.common.networking.ChangeSet.simpleChange(Player, Message)",7
"net.sf.freecol.common.networking.ChangeSet.simpleChange(See, Message)",7
net.sf.freecol.common.networking.ChangeSet.toString(),3
"net.sf.freecol.common.networking.ChangeStateMessage.ChangeStateMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.ChangeStateMessage.ChangeStateMessage(Unit, UnitState)",7
net.sf.freecol.common.networking.ChangeStateMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.ChangeStateMessage.getPriority(),3
"net.sf.freecol.common.networking.ChangeStateMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.ChangeWorkImprovementTypeMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.ChangeWorkImprovementTypeMessage(Unit, TileImprovementType)",7
net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.getPriority(),3
"net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.ChangeWorkTypeMessage.ChangeWorkTypeMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.ChangeWorkTypeMessage.ChangeWorkTypeMessage(Unit, GoodsType)",7
net.sf.freecol.common.networking.ChangeWorkTypeMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.ChangeWorkTypeMessage.getPriority(),3
"net.sf.freecol.common.networking.ChangeWorkTypeMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.ChatMessage.ChatMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.ChatMessage.ChatMessage(Player, String, boolean)",8
"net.sf.freecol.common.networking.ChatMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.ChatMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.ChatMessage.getColor(),5
net.sf.freecol.common.networking.ChatMessage.getMessage(),5
net.sf.freecol.common.networking.ChatMessage.getPriority(),3
net.sf.freecol.common.networking.ChatMessage.getSender(),5
net.sf.freecol.common.networking.ChatMessage.isPrivate(),5
"net.sf.freecol.common.networking.ChatMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.ChooseFoundingFatherMessage.ChooseFoundingFatherMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.ChooseFoundingFatherMessage.ChooseFoundingFatherMessage(List<FoundingFather>, FoundingFather)",7
"net.sf.freecol.common.networking.ChooseFoundingFatherMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.getAttributeMap(FreeColXMLReader),6
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.getFather(Game),6
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.getFathers(Game),6
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.getPriority(),3
"net.sf.freecol.common.networking.ChooseFoundingFatherMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.setFather(FoundingFather),6
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.setFatherAttributes(List<FoundingFather>),5
"net.sf.freecol.common.networking.ClaimLandMessage.ClaimLandMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.ClaimLandMessage.ClaimLandMessage(Tile, FreeColGameObject, int)",8
net.sf.freecol.common.networking.ClaimLandMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.ClaimLandMessage.getPriority(),3
"net.sf.freecol.common.networking.ClaimLandMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.ClearSpecialityMessage.ClearSpecialityMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.ClearSpecialityMessage.ClearSpecialityMessage(Unit),6
net.sf.freecol.common.networking.ClearSpecialityMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.ClearSpecialityMessage.getPriority(),3
"net.sf.freecol.common.networking.ClearSpecialityMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.CloseMessage.CloseMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.CloseMessage.CloseMessage(String),5
"net.sf.freecol.common.networking.CloseMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.CloseMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.CloseMessage.getPanel(),0
net.sf.freecol.common.networking.CloseMessage.getPriority(),3
"net.sf.freecol.common.networking.Connection.Connection(Socket, String)",8
net.sf.freecol.common.networking.Connection.Connection(String),5
"net.sf.freecol.common.networking.Connection.Connection(String, int, String)",9
"net.sf.freecol.common.networking.Connection.askMessage(Message, long)",13
net.sf.freecol.common.networking.Connection.close(),3
net.sf.freecol.common.networking.Connection.closeInputStream(),3
net.sf.freecol.common.networking.Connection.closeOutputStream(),3
net.sf.freecol.common.networking.Connection.closeSocket(),3
"net.sf.freecol.common.networking.Connection.createSocket(String, int)",8
net.sf.freecol.common.networking.Connection.disconnect(),3
net.sf.freecol.common.networking.Connection.endListen(),0
net.sf.freecol.common.networking.Connection.getFreeColXMLReader(),0
net.sf.freecol.common.networking.Connection.getHostAddress(),5
net.sf.freecol.common.networking.Connection.getMessageHandler(),5
net.sf.freecol.common.networking.Connection.getName(),5
net.sf.freecol.common.networking.Connection.getPort(),5
net.sf.freecol.common.networking.Connection.getReplyId(),0
net.sf.freecol.common.networking.Connection.getSocket(),5
net.sf.freecol.common.networking.Connection.getSocketName(),5
net.sf.freecol.common.networking.Connection.handle(Message),7
net.sf.freecol.common.networking.Connection.isAlive(),5
"net.sf.freecol.common.networking.Connection.logMessage(Message, boolean)",6
net.sf.freecol.common.networking.Connection.reader(),7
net.sf.freecol.common.networking.Connection.request(Message),8
net.sf.freecol.common.networking.Connection.send(Message),8
net.sf.freecol.common.networking.Connection.sendDisconnect(),3
net.sf.freecol.common.networking.Connection.sendMessage(Message),10
net.sf.freecol.common.networking.Connection.sendReconnect(),3
net.sf.freecol.common.networking.Connection.setCommsLogging(boolean),6
net.sf.freecol.common.networking.Connection.setMessageHandler(MessageHandler),7
net.sf.freecol.common.networking.Connection.setSocket(Socket),5
net.sf.freecol.common.networking.Connection.setWriteScope(WriteScope),5
net.sf.freecol.common.networking.Connection.startListen(),0
net.sf.freecol.common.networking.Connection.startReceiving(),3
net.sf.freecol.common.networking.Connection.toString(),3
"net.sf.freecol.common.networking.ConnectionVerificationMessage.ConnectionVerificationMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.ConnectionVerificationMessage.ConnectionVerificationMessage(boolean),5
net.sf.freecol.common.networking.ConnectionVerificationMessage.isConnectable(),0
net.sf.freecol.common.networking.ContinueMessage.ContinueMessage(),3
"net.sf.freecol.common.networking.ContinueMessage.ContinueMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.ContinueMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.DeclareIndependenceMessage.DeclareIndependenceMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.DeclareIndependenceMessage.DeclareIndependenceMessage(String, String)",7
net.sf.freecol.common.networking.DeclareIndependenceMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.DeclareIndependenceMessage.getPriority(),3
"net.sf.freecol.common.networking.DeclareIndependenceMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.DeclineMoundsMessage.DeclineMoundsMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.DeclineMoundsMessage.DeclineMoundsMessage(Unit, Direction)",7
net.sf.freecol.common.networking.DeclineMoundsMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.DeclineMoundsMessage.getPriority(),3
"net.sf.freecol.common.networking.DeclineMoundsMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.DeleteTradeRouteMessage.DeleteTradeRouteMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.DeleteTradeRouteMessage.DeleteTradeRouteMessage(TradeRoute),6
"net.sf.freecol.common.networking.DeleteTradeRouteMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.DeleteTradeRouteMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.DeleteTradeRouteMessage.getPriority(),3
"net.sf.freecol.common.networking.DeleteTradeRouteMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.DeliverGiftMessage.DeliverGiftMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.DeliverGiftMessage.DeliverGiftMessage(Unit, IndianSettlement, Goods)",7
net.sf.freecol.common.networking.DeliverGiftMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.DeliverGiftMessage.getGoods(),5
net.sf.freecol.common.networking.DeliverGiftMessage.getPriority(),3
"net.sf.freecol.common.networking.DeliverGiftMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.DemandTributeMessage.DemandTributeMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.DemandTributeMessage.DemandTributeMessage(Unit, Direction)",7
net.sf.freecol.common.networking.DemandTributeMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.DemandTributeMessage.getPriority(),3
"net.sf.freecol.common.networking.DemandTributeMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.DiplomacyMessage.DiplomacyMessage(Colony, Unit, DiplomaticTrade)",7
"net.sf.freecol.common.networking.DiplomacyMessage.DiplomacyMessage(FreeColGameObject, FreeColGameObject, DiplomaticTrade)",7
"net.sf.freecol.common.networking.DiplomacyMessage.DiplomacyMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.DiplomacyMessage.DiplomacyMessage(Unit, Colony, DiplomaticTrade)",7
"net.sf.freecol.common.networking.DiplomacyMessage.DiplomacyMessage(Unit, Unit, DiplomaticTrade)",7
"net.sf.freecol.common.networking.DiplomacyMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.DiplomacyMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.DiplomacyMessage.getAgreement(),5
net.sf.freecol.common.networking.DiplomacyMessage.getExtraUnit(),5
net.sf.freecol.common.networking.DiplomacyMessage.getOtherFCGO(Game),6
net.sf.freecol.common.networking.DiplomacyMessage.getOurFCGO(Game),6
net.sf.freecol.common.networking.DiplomacyMessage.getPriority(),3
"net.sf.freecol.common.networking.DiplomacyMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.DisbandUnitMessage.DisbandUnitMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.DisbandUnitMessage.DisbandUnitMessage(Unit),6
net.sf.freecol.common.networking.DisbandUnitMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.DisbandUnitMessage.getPriority(),3
"net.sf.freecol.common.networking.DisbandUnitMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.DisconnectMessage.DisconnectMessage(),3
"net.sf.freecol.common.networking.DisconnectMessage.DisconnectMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.DisconnectMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.DisconnectMessage.clientHandler(FreeColClient),3
"net.sf.freecol.common.networking.DisconnectMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.DisembarkMessage.DisembarkMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.DisembarkMessage.DisembarkMessage(Unit),6
net.sf.freecol.common.networking.DisembarkMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.DisembarkMessage.getPriority(),3
"net.sf.freecol.common.networking.DisembarkMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.EmbarkMessage.EmbarkMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.EmbarkMessage.EmbarkMessage(Unit, Unit, Direction)",8
net.sf.freecol.common.networking.EmbarkMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.EmbarkMessage.getPriority(),3
"net.sf.freecol.common.networking.EmbarkMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.EmigrateUnitMessage.EmigrateUnitMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.EmigrateUnitMessage.EmigrateUnitMessage(int),5
net.sf.freecol.common.networking.EmigrateUnitMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.EmigrateUnitMessage.getPriority(),3
"net.sf.freecol.common.networking.EmigrateUnitMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.EndTurnMessage.EndTurnMessage(),3
"net.sf.freecol.common.networking.EndTurnMessage.EndTurnMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.EndTurnMessage.currentPlayerMessage(),3
"net.sf.freecol.common.networking.EndTurnMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.EnterRevengeModeMessage.EnterRevengeModeMessage(),3
"net.sf.freecol.common.networking.EnterRevengeModeMessage.EnterRevengeModeMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.EnterRevengeModeMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.EquipForRoleMessage.EquipForRoleMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.EquipForRoleMessage.EquipForRoleMessage(Unit, Role, int)",8
net.sf.freecol.common.networking.EquipForRoleMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.EquipForRoleMessage.getPriority(),3
"net.sf.freecol.common.networking.EquipForRoleMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(Exception),6
"net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(String),6
"net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(String, Exception)",7
net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(StringTemplate),5
"net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(StringTemplate, String)",7
"net.sf.freecol.common.networking.ErrorMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.ErrorMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.ErrorMessage.getMessage(),5
net.sf.freecol.common.networking.ErrorMessage.getPriority(),3
net.sf.freecol.common.networking.ErrorMessage.getTemplate(),5
"net.sf.freecol.common.networking.FeatureChangeMessage.FeatureChangeMessage(FreeColGameObject, FreeColObject, boolean)",8
"net.sf.freecol.common.networking.FeatureChangeMessage.FeatureChangeMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.FeatureChangeMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.FeatureChangeMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.FeatureChangeMessage.getAdd(),5
net.sf.freecol.common.networking.FeatureChangeMessage.getParent(Game),6
net.sf.freecol.common.networking.FeatureChangeMessage.getParentId(),5
net.sf.freecol.common.networking.FeatureChangeMessage.getPriority(),3
net.sf.freecol.common.networking.FeatureChangeMessage.merge(Message),3
"net.sf.freecol.common.networking.FirstContactMessage.FirstContactMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.FirstContactMessage.FirstContactMessage(Player, Player, Tile)",7
"net.sf.freecol.common.networking.FirstContactMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.FirstContactMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.FirstContactMessage.getOtherPlayer(Game),0
net.sf.freecol.common.networking.FirstContactMessage.getPlayer(Game),0
net.sf.freecol.common.networking.FirstContactMessage.getPriority(),3
net.sf.freecol.common.networking.FirstContactMessage.getResult(),0
net.sf.freecol.common.networking.FirstContactMessage.getSettlementCount(),0
net.sf.freecol.common.networking.FirstContactMessage.getTile(Game),0
"net.sf.freecol.common.networking.FirstContactMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.FirstContactMessage.setResult(boolean),0
"net.sf.freecol.common.networking.FountainOfYouthMessage.FountainOfYouthMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.FountainOfYouthMessage.FountainOfYouthMessage(int),5
"net.sf.freecol.common.networking.FountainOfYouthMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.FountainOfYouthMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.FountainOfYouthMessage.getMigrants(),5
net.sf.freecol.common.networking.FountainOfYouthMessage.getPriority(),3
"net.sf.freecol.common.networking.GameEndedMessage.GameEndedMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.GameEndedMessage.GameEndedMessage(Player, boolean)",6
"net.sf.freecol.common.networking.GameEndedMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.GameEndedMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.GameEndedMessage.getPriority(),3
net.sf.freecol.common.networking.GameEndedMessage.getScore(),7
net.sf.freecol.common.networking.GameEndedMessage.getWinner(Game),6
net.sf.freecol.common.networking.GameStateMessage.GameStateMessage(),3
"net.sf.freecol.common.networking.GameStateMessage.GameStateMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.GameStateMessage.GameStateMessage(ServerState),5
net.sf.freecol.common.networking.GameStateMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.GameStateMessage.getPriority(),3
net.sf.freecol.common.networking.GameStateMessage.getState(),5
"net.sf.freecol.common.networking.GameStateMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.HighScoresMessage.HighScoresMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.HighScoresMessage.HighScoresMessage(String, List<HighScore>)",7
net.sf.freecol.common.networking.HighScoresMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.HighScoresMessage.getKey(),5
net.sf.freecol.common.networking.HighScoresMessage.getPriority(),3
net.sf.freecol.common.networking.HighScoresMessage.getScores(),5
"net.sf.freecol.common.networking.HighScoresMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.InciteMessage.InciteMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.InciteMessage.InciteMessage(Unit, IndianSettlement, Player, int)",10
net.sf.freecol.common.networking.InciteMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.InciteMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.InciteMessage.getEnemy(Game),0
net.sf.freecol.common.networking.InciteMessage.getGold(),0
net.sf.freecol.common.networking.InciteMessage.getPriority(),3
net.sf.freecol.common.networking.InciteMessage.getSettlement(Unit),0
net.sf.freecol.common.networking.InciteMessage.getUnit(Player),0
"net.sf.freecol.common.networking.InciteMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.IndianDemandMessage.IndianDemandMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.IndianDemandMessage.IndianDemandMessage(Unit, Colony, GoodsType, int)",9
"net.sf.freecol.common.networking.IndianDemandMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.IndianDemandMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.IndianDemandMessage.getAmount(),6
net.sf.freecol.common.networking.IndianDemandMessage.getColony(Game),6
net.sf.freecol.common.networking.IndianDemandMessage.getPriority(),3
net.sf.freecol.common.networking.IndianDemandMessage.getResult(),5
net.sf.freecol.common.networking.IndianDemandMessage.getType(Game),6
net.sf.freecol.common.networking.IndianDemandMessage.getUnit(Game),6
"net.sf.freecol.common.networking.IndianDemandMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.IndianDemandMessage.setResult(IndianDemandAction),6
"net.sf.freecol.common.networking.JoinColonyMessage.JoinColonyMessage(Colony, Unit)",7
"net.sf.freecol.common.networking.JoinColonyMessage.JoinColonyMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.JoinColonyMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.JoinColonyMessage.getPriority(),3
"net.sf.freecol.common.networking.JoinColonyMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.LearnSkillMessage.LearnSkillMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.LearnSkillMessage.LearnSkillMessage(Unit, Direction)",7
net.sf.freecol.common.networking.LearnSkillMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.LearnSkillMessage.getPriority(),3
"net.sf.freecol.common.networking.LearnSkillMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.LoadGoodsMessage.LoadGoodsMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.LoadGoodsMessage.LoadGoodsMessage(Location, GoodsType, int, Unit)",8
net.sf.freecol.common.networking.LoadGoodsMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.LoadGoodsMessage.getPriority(),3
"net.sf.freecol.common.networking.LoadGoodsMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.LoginMessage.LoginMessage(Game, FreeColXMLReader)",8
"net.sf.freecol.common.networking.LoginMessage.LoginMessage(Player, String, String, String, ServerState, boolean, boolean, ...)",12
net.sf.freecol.common.networking.LoginMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.LoginMessage.getCurrentPlayer(),0
net.sf.freecol.common.networking.LoginMessage.getGame(),0
net.sf.freecol.common.networking.LoginMessage.getNationId(),0
net.sf.freecol.common.networking.LoginMessage.getPlayer(Game),6
net.sf.freecol.common.networking.LoginMessage.getPriority(),3
net.sf.freecol.common.networking.LoginMessage.getSinglePlayer(),0
net.sf.freecol.common.networking.LoginMessage.getState(),0
net.sf.freecol.common.networking.LoginMessage.getUserName(),0
net.sf.freecol.common.networking.LoginMessage.getVersion(),0
"net.sf.freecol.common.networking.LoginMessage.inGameLogin(FreeColServer, Connection)",7
"net.sf.freecol.common.networking.LoginMessage.loadGameLogin(FreeColServer, Connection)",7
"net.sf.freecol.common.networking.LoginMessage.loginHandler(FreeColServer, Connection)",7
"net.sf.freecol.common.networking.LoginMessage.preGameLogin(FreeColServer, Connection)",7
net.sf.freecol.common.networking.LoginMessage.toXML(FreeColXMLWriter),3
"net.sf.freecol.common.networking.LogoutMessage.LogoutMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.LogoutMessage.LogoutMessage(Player, LogoutReason)",8
"net.sf.freecol.common.networking.LogoutMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.LogoutMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.LogoutMessage.getPlayer(Game),6
net.sf.freecol.common.networking.LogoutMessage.getPriority(),3
net.sf.freecol.common.networking.LogoutMessage.getReason(),5
"net.sf.freecol.common.networking.LogoutMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.LootCargoMessage.LootCargoMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.LootCargoMessage.LootCargoMessage(Unit, String, List<Goods>)",7
"net.sf.freecol.common.networking.LootCargoMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.LootCargoMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.LootCargoMessage.getGoods(),5
net.sf.freecol.common.networking.LootCargoMessage.getLoserId(),5
net.sf.freecol.common.networking.LootCargoMessage.getPriority(),3
net.sf.freecol.common.networking.LootCargoMessage.getWinner(Game),6
"net.sf.freecol.common.networking.LootCargoMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.Message.Message(),3
net.sf.freecol.common.networking.Message.MessagePriority.MessagePriority(int),0
net.sf.freecol.common.networking.Message.MessagePriority.getValue(),0
net.sf.freecol.common.networking.Message.canMerge(),5
net.sf.freecol.common.networking.Message.clientGeneric(FreeColClient),5
"net.sf.freecol.common.networking.Message.expected(String, String)",7
net.sf.freecol.common.networking.Message.getArrayAttributes(),5
"net.sf.freecol.common.networking.Message.getBooleanAttribute(String, Boolean)",7
"net.sf.freecol.common.networking.Message.getChild(int, Class<T>)",9
net.sf.freecol.common.networking.Message.getChildren(Class<T>),7
"net.sf.freecol.common.networking.Message.getEnumAttribute(String, Class<T>, T)",9
"net.sf.freecol.common.networking.Message.getIntegerAttribute(String, int)",7
net.sf.freecol.common.networking.Message.getPriorityLevel(),5
net.sf.freecol.common.networking.Message.igc(FreeColClient),0
net.sf.freecol.common.networking.Message.igc(FreeColServer),0
"net.sf.freecol.common.networking.Message.invokeAndWait(FreeColClient, Runnable)",0
"net.sf.freecol.common.networking.Message.invokeLater(FreeColClient, Runnable)",0
net.sf.freecol.common.networking.Message.isEmpty(),5
net.sf.freecol.common.networking.Message.isType(String),6
net.sf.freecol.common.networking.Message.merge(Message),6
net.sf.freecol.common.networking.Message.pgc(FreeColClient),0
net.sf.freecol.common.networking.Message.pgc(FreeColServer),0
"net.sf.freecol.common.networking.Message.pretty(StringBuilder, String, Map<String, String>, List<FreeColObject>)",8
"net.sf.freecol.common.networking.Message.read(Game, FreeColXMLReader)",8
net.sf.freecol.common.networking.Message.setArrayAttributes(List<String>),5
net.sf.freecol.common.networking.Message.setArrayAttributes(String[]),5
"net.sf.freecol.common.networking.Message.setBooleanAttribute(String, Boolean)",6
"net.sf.freecol.common.networking.Message.setEnumAttribute(String, Enum<?>)",6
"net.sf.freecol.common.networking.Message.setIntegerAttribute(String, int)",6
"net.sf.freecol.common.networking.Message.setStringAttributeMap(Map<String, String>)",5
net.sf.freecol.common.networking.Message.setStringAttributes(List<String>),5
net.sf.freecol.common.networking.Message.setStringAttributes(String[]),5
net.sf.freecol.common.networking.Message.toString(),3
net.sf.freecol.common.networking.Message.toXML(FreeColXMLWriter),6
net.sf.freecol.common.networking.Message.writeAttributes(FreeColXMLWriter),6
net.sf.freecol.common.networking.Message.writeChildren(FreeColXMLWriter),6
"net.sf.freecol.common.networking.MissionaryMessage.MissionaryMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.MissionaryMessage.MissionaryMessage(Unit, Direction, boolean)",8
net.sf.freecol.common.networking.MissionaryMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.MissionaryMessage.getPriority(),3
"net.sf.freecol.common.networking.MissionaryMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.MonarchActionMessage.MonarchActionMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.MonarchActionMessage.MonarchActionMessage(MonarchAction, StringTemplate, String)",8
"net.sf.freecol.common.networking.MonarchActionMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.MonarchActionMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.MonarchActionMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.MonarchActionMessage.getAction(),5
net.sf.freecol.common.networking.MonarchActionMessage.getMonarchKey(),5
net.sf.freecol.common.networking.MonarchActionMessage.getPriority(),3
net.sf.freecol.common.networking.MonarchActionMessage.getResult(),5
net.sf.freecol.common.networking.MonarchActionMessage.getTax(),5
net.sf.freecol.common.networking.MonarchActionMessage.getTemplate(),5
"net.sf.freecol.common.networking.MonarchActionMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.MonarchActionMessage.setResult(boolean),6
net.sf.freecol.common.networking.MonarchActionMessage.setTax(int),6
"net.sf.freecol.common.networking.MoveMessage.MoveMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.MoveMessage.MoveMessage(Unit, Direction)",7
net.sf.freecol.common.networking.MoveMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.MoveMessage.getPriority(),3
"net.sf.freecol.common.networking.MoveMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.MoveToMessage.MoveToMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.MoveToMessage.MoveToMessage(Unit, Location)",7
net.sf.freecol.common.networking.MoveToMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.MoveToMessage.getPriority(),3
"net.sf.freecol.common.networking.MoveToMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.MultipleMessage.MultipleMessage(),3
"net.sf.freecol.common.networking.MultipleMessage.MultipleMessage(Game, FreeColXMLReader)",8
net.sf.freecol.common.networking.MultipleMessage.MultipleMessage(List<Message>),5
"net.sf.freecol.common.networking.MultipleMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.MultipleMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.MultipleMessage.isEmpty(),3
"net.sf.freecol.common.networking.MultipleMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.MultipleMessage.simplify(),7
net.sf.freecol.common.networking.MultipleMessage.toString(),3
net.sf.freecol.common.networking.MultipleMessage.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.networking.NationSummaryMessage.NationSummaryMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.NationSummaryMessage.NationSummaryMessage(Player, NationSummary)",7
"net.sf.freecol.common.networking.NationSummaryMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.NationSummaryMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.NationSummaryMessage.getNationSummary(),5
net.sf.freecol.common.networking.NationSummaryMessage.getPlayer(Game),6
net.sf.freecol.common.networking.NationSummaryMessage.getPriority(),3
"net.sf.freecol.common.networking.NationSummaryMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.NativeGiftMessage.NativeGiftMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.NativeGiftMessage.NativeGiftMessage(Unit, Colony)",6
"net.sf.freecol.common.networking.NativeGiftMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.NativeGiftMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.NativeGiftMessage.getPriority(),3
"net.sf.freecol.common.networking.NativeGiftMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.NativeTradeMessage.NativeTradeMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.NativeTradeMessage.NativeTradeMessage(NativeTradeAction, NativeTrade)",7
"net.sf.freecol.common.networking.NativeTradeMessage.NativeTradeMessage(Unit, IndianSettlement)",8
"net.sf.freecol.common.networking.NativeTradeMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.NativeTradeMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.NativeTradeMessage.getAction(),0
net.sf.freecol.common.networking.NativeTradeMessage.getNativeTrade(),0
net.sf.freecol.common.networking.NativeTradeMessage.getPriority(),3
"net.sf.freecol.common.networking.NativeTradeMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.NetworkReplyObject.NetworkReplyObject(int),6
net.sf.freecol.common.networking.NetworkReplyObject.getNetworkReplyId(),6
net.sf.freecol.common.networking.NetworkReplyObject.getResponse(long),10
net.sf.freecol.common.networking.NetworkReplyObject.interrupt(),3
net.sf.freecol.common.networking.NetworkReplyObject.setResponse(Object),6
"net.sf.freecol.common.networking.NewLandNameMessage.NewLandNameMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.NewLandNameMessage.NewLandNameMessage(Unit, String)",7
"net.sf.freecol.common.networking.NewLandNameMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.NewLandNameMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.NewLandNameMessage.getNewLandName(),5
net.sf.freecol.common.networking.NewLandNameMessage.getPriority(),3
net.sf.freecol.common.networking.NewLandNameMessage.getUnit(Player),6
"net.sf.freecol.common.networking.NewLandNameMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.NewRegionNameMessage.NewRegionNameMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.NewRegionNameMessage.NewRegionNameMessage(Region, Tile, Unit, String)",9
"net.sf.freecol.common.networking.NewRegionNameMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.NewRegionNameMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.NewRegionNameMessage.getNewRegionName(),5
net.sf.freecol.common.networking.NewRegionNameMessage.getPriority(),3
net.sf.freecol.common.networking.NewRegionNameMessage.getRegion(Game),6
net.sf.freecol.common.networking.NewRegionNameMessage.getTile(Game),6
net.sf.freecol.common.networking.NewRegionNameMessage.getUnit(Player),6
"net.sf.freecol.common.networking.NewRegionNameMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.NewTradeRouteMessage.NewTradeRouteMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.NewTradeRouteMessage.NewTradeRouteMessage(TradeRoute),6
"net.sf.freecol.common.networking.NewTradeRouteMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.NewTradeRouteMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.NewTradeRouteMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.NewTradeRouteMessage.getPriority(),3
net.sf.freecol.common.networking.NewTradeRouteMessage.getTradeRoute(),5
"net.sf.freecol.common.networking.NewTradeRouteMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.NewTurnMessage.NewTurnMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.NewTurnMessage.NewTurnMessage(Turn),6
"net.sf.freecol.common.networking.NewTurnMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.NewTurnMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.NewTurnMessage.getPriority(),3
net.sf.freecol.common.networking.NewTurnMessage.getTurnNumber(),5
net.sf.freecol.common.networking.ObjectMessage.ObjectMessage(String),5
"net.sf.freecol.common.networking.ObjectMessage.ObjectMessage(String, FreeColXMLReader, String...)",7
"net.sf.freecol.common.networking.ObjectMessage.ObjectMessage(String, String...)",7
net.sf.freecol.common.networking.ObjectMessage.appendChild(T),3
net.sf.freecol.common.networking.ObjectMessage.appendChildren(Collection<T>),3
net.sf.freecol.common.networking.ObjectMessage.getChildCount(),3
net.sf.freecol.common.networking.ObjectMessage.getChildren(),3
net.sf.freecol.common.networking.ObjectMessage.setChildren(List<? extends FreeColObject>),3
"net.sf.freecol.common.networking.PartialMessage.PartialMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.PartialMessage.PartialMessage(Map<String, String>)",5
"net.sf.freecol.common.networking.PartialMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.PartialMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.PartialMessage.getPriority(),3
"net.sf.freecol.common.networking.PayArrearsMessage.PayArrearsMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.PayArrearsMessage.PayArrearsMessage(GoodsType),6
net.sf.freecol.common.networking.PayArrearsMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.PayArrearsMessage.getPriority(),3
"net.sf.freecol.common.networking.PayArrearsMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.PayForBuildingMessage.PayForBuildingMessage(Colony),6
"net.sf.freecol.common.networking.PayForBuildingMessage.PayForBuildingMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.PayForBuildingMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.PayForBuildingMessage.getPriority(),3
"net.sf.freecol.common.networking.PayForBuildingMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.PutOutsideColonyMessage.PutOutsideColonyMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.PutOutsideColonyMessage.PutOutsideColonyMessage(Unit),6
net.sf.freecol.common.networking.PutOutsideColonyMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.PutOutsideColonyMessage.getPriority(),3
"net.sf.freecol.common.networking.PutOutsideColonyMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.QuestionMessage.QuestionMessage(Game, FreeColXMLReader)",8
"net.sf.freecol.common.networking.QuestionMessage.QuestionMessage(int, Message)",6
"net.sf.freecol.common.networking.ReadyMessage.ReadyMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.ReadyMessage.ReadyMessage(Player, boolean)",6
net.sf.freecol.common.networking.ReadyMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.ReadyMessage.getPlayer(Game),6
net.sf.freecol.common.networking.ReadyMessage.getPriority(),3
net.sf.freecol.common.networking.ReadyMessage.getValue(),5
"net.sf.freecol.common.networking.ReadyMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.Arrangement(),0
"net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.Arrangement(Game, String, String, String, String, String)",0
"net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.Arrangement(Unit, Location, GoodsType, Role, int)",0
"net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.getArrangements(Colony, List<Unit>, Colony)",9
"net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.init(Game, String, String, String, String, String)",0
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.locKey(int),0
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.roleComparison(Arrangement),6
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.roleCountKey(int),0
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.roleKey(int),0
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.toString(),3
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.unitKey(int),0
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.workKey(int),0
"net.sf.freecol.common.networking.RearrangeColonyMessage.RearrangeColonyMessage(Colony, List<Unit>, Colony)",8
"net.sf.freecol.common.networking.RearrangeColonyMessage.RearrangeColonyMessage(Game, FreeColXMLReader)",6
net.sf.freecol.common.networking.RearrangeColonyMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.RearrangeColonyMessage.getArrangements(Game),6
net.sf.freecol.common.networking.RearrangeColonyMessage.getAttributeMap(FreeColXMLReader),6
net.sf.freecol.common.networking.RearrangeColonyMessage.getPriority(),3
net.sf.freecol.common.networking.RearrangeColonyMessage.isEmpty(),5
"net.sf.freecol.common.networking.RearrangeColonyMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.RearrangeColonyMessage.setArrangementAttributes(List<Arrangement>),5
"net.sf.freecol.common.networking.ReceivingThread.QuestionThread.QuestionThread(String, Connection, Message, int)",8
net.sf.freecol.common.networking.ReceivingThread.QuestionThread.run(),3
"net.sf.freecol.common.networking.ReceivingThread.ReceivingThread(Connection, String)",7
"net.sf.freecol.common.networking.ReceivingThread.UpdateThread.UpdateThread(String, Connection, Message)",7
net.sf.freecol.common.networking.ReceivingThread.UpdateThread.run(),3
net.sf.freecol.common.networking.ReceivingThread.askToStop(String),5
net.sf.freecol.common.networking.ReceivingThread.disconnect(),3
net.sf.freecol.common.networking.ReceivingThread.getNextNetworkReplyId(),6
net.sf.freecol.common.networking.ReceivingThread.listen(),8
"net.sf.freecol.common.networking.ReceivingThread.messageQuestion(QuestionMessage, int)",7
net.sf.freecol.common.networking.ReceivingThread.messageUpdate(Message),6
net.sf.freecol.common.networking.ReceivingThread.run(),3
net.sf.freecol.common.networking.ReceivingThread.shouldRun(),5
net.sf.freecol.common.networking.ReceivingThread.stopRun(),5
net.sf.freecol.common.networking.ReceivingThread.stopThread(),5
net.sf.freecol.common.networking.ReceivingThread.waitForNetworkReply(int),9
net.sf.freecol.common.networking.ReconnectMessage.ReconnectMessage(),3
"net.sf.freecol.common.networking.ReconnectMessage.ReconnectMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.ReconnectMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.ReconnectMessage.clientHandler(FreeColClient),3
"net.sf.freecol.common.networking.RegisterServerMessage.RegisterServerMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.RegisterServerMessage.RegisterServerMessage(ServerInfo),5
"net.sf.freecol.common.networking.RemoveMessage.RemoveMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.RemoveMessage.RemoveMessage(String, List<? extends FreeColGameObject>)",7
"net.sf.freecol.common.networking.RemoveMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.RemoveMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.RemoveMessage.getAttributeMap(FreeColXMLReader),6
net.sf.freecol.common.networking.RemoveMessage.getDivertObject(Game),6
net.sf.freecol.common.networking.RemoveMessage.getPriority(),3
net.sf.freecol.common.networking.RemoveMessage.getRemovals(Game),6
"net.sf.freecol.common.networking.RemoveServerMessage.RemoveServerMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.RemoveServerMessage.RemoveServerMessage(ServerInfo),5
"net.sf.freecol.common.networking.RenameMessage.RenameMessage(FreeColGameObject, String)",7
"net.sf.freecol.common.networking.RenameMessage.RenameMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.RenameMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.RenameMessage.getPriority(),3
"net.sf.freecol.common.networking.RenameMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.ReplyMessage.ReplyMessage(Game, FreeColXMLReader)",8
"net.sf.freecol.common.networking.ReplyMessage.ReplyMessage(int, Message)",6
net.sf.freecol.common.networking.RequestLaunchMessage.RequestLaunchMessage(),3
"net.sf.freecol.common.networking.RequestLaunchMessage.RequestLaunchMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.RequestLaunchMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.RetireMessage.RetireMessage(),3
"net.sf.freecol.common.networking.RetireMessage.RetireMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.RetireMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.ScoutIndianSettlementMessage.ScoutIndianSettlementMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.ScoutIndianSettlementMessage.ScoutIndianSettlementMessage(Unit, Direction)",7
net.sf.freecol.common.networking.ScoutIndianSettlementMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.ScoutIndianSettlementMessage.getPriority(),3
"net.sf.freecol.common.networking.ScoutIndianSettlementMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.ScoutSpeakToChiefMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.ScoutSpeakToChiefMessage(Unit, IndianSettlement, String)",10
"net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.getPriority(),3
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.getResult(),0
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.getSettlement(Game),0
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.getUnit(Game),0
"net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.ServerAPI.ServerAPI(),3
net.sf.freecol.common.networking.ServerAPI.abandonColony(Colony),6
"net.sf.freecol.common.networking.ServerAPI.answerMonarch(MonarchAction, boolean)",7
net.sf.freecol.common.networking.ServerAPI.ask(Message),14
"net.sf.freecol.common.networking.ServerAPI.askSkill(Unit, Direction)",7
"net.sf.freecol.common.networking.ServerAPI.assignTeacher(Unit, Unit)",7
"net.sf.freecol.common.networking.ServerAPI.assignTradeRoute(Unit, TradeRoute)",7
"net.sf.freecol.common.networking.ServerAPI.attack(Unit, Direction)",7
"net.sf.freecol.common.networking.ServerAPI.attackRanged(Unit, Tile)",7
"net.sf.freecol.common.networking.ServerAPI.buildColony(String, Unit)",7
net.sf.freecol.common.networking.ServerAPI.cashInTreasureTrain(Unit),6
"net.sf.freecol.common.networking.ServerAPI.changeState(Unit, UnitState)",7
"net.sf.freecol.common.networking.ServerAPI.changeWorkImprovementType(Unit, TileImprovementType)",7
"net.sf.freecol.common.networking.ServerAPI.changeWorkType(Unit, GoodsType)",7
"net.sf.freecol.common.networking.ServerAPI.chat(Player, String)",7
"net.sf.freecol.common.networking.ServerAPI.check(String, String)",7
"net.sf.freecol.common.networking.ServerAPI.chooseFoundingFather(List<FoundingFather>, FoundingFather)",7
"net.sf.freecol.common.networking.ServerAPI.claimTile(Tile, FreeColGameObject, int)",9
net.sf.freecol.common.networking.ServerAPI.clearSpeciality(Unit),6
net.sf.freecol.common.networking.ServerAPI.continuePlaying(),5
"net.sf.freecol.common.networking.ServerAPI.declareIndependence(String, String)",7
"net.sf.freecol.common.networking.ServerAPI.declineMounds(Unit, Direction)",9
net.sf.freecol.common.networking.ServerAPI.deleteTradeRoute(TradeRoute),6
"net.sf.freecol.common.networking.ServerAPI.deliverGiftToSettlement(Unit, IndianSettlement, Goods)",8
"net.sf.freecol.common.networking.ServerAPI.demandTribute(Unit, Direction)",8
"net.sf.freecol.common.networking.ServerAPI.diplomacy(FreeColGameObject, FreeColGameObject, DiplomaticTrade)",10
net.sf.freecol.common.networking.ServerAPI.disbandUnit(Unit),6
net.sf.freecol.common.networking.ServerAPI.disembark(Unit),6
"net.sf.freecol.common.networking.ServerAPI.embark(Unit, Unit, Direction)",9
net.sf.freecol.common.networking.ServerAPI.emigrate(int),7
net.sf.freecol.common.networking.ServerAPI.endTurn(),5
net.sf.freecol.common.networking.ServerAPI.enterRevengeMode(),5
"net.sf.freecol.common.networking.ServerAPI.equipUnitForRole(Unit, Role, int)",8
"net.sf.freecol.common.networking.ServerAPI.firstContact(Player, Player, Tile, boolean)",10
net.sf.freecol.common.networking.ServerAPI.getHighScores(String),6
"net.sf.freecol.common.networking.ServerAPI.incite(Unit, IndianSettlement, Player, int)",9
"net.sf.freecol.common.networking.ServerAPI.indianDemand(Unit, Colony, GoodsType, int, IndianDemandAction)",10
net.sf.freecol.common.networking.ServerAPI.isConnected(),5
"net.sf.freecol.common.networking.ServerAPI.joinColony(Unit, Colony)",7
"net.sf.freecol.common.networking.ServerAPI.learnSkill(Unit, Direction)",7
"net.sf.freecol.common.networking.ServerAPI.loadGoods(Location, GoodsType, int, Unit)",9
"net.sf.freecol.common.networking.ServerAPI.login(String, String, String, boolean, boolean)",11
"net.sf.freecol.common.networking.ServerAPI.logout(Player, LogoutReason)",7
"net.sf.freecol.common.networking.ServerAPI.loot(Unit, String, List<Goods>)",11
"net.sf.freecol.common.networking.ServerAPI.missionary(Unit, Direction, boolean)",8
"net.sf.freecol.common.networking.ServerAPI.move(Unit, Direction)",7
"net.sf.freecol.common.networking.ServerAPI.moveTo(Unit, Location)",7
"net.sf.freecol.common.networking.ServerAPI.nationSummary(Player, Player)",7
"net.sf.freecol.common.networking.ServerAPI.nativeGift(Unit, Colony)",7
"net.sf.freecol.common.networking.ServerAPI.nativeTrade(NativeTradeAction, NativeTrade)",7
"net.sf.freecol.common.networking.ServerAPI.newLandName(Unit, String)",7
"net.sf.freecol.common.networking.ServerAPI.newNativeTradeSession(Unit, IndianSettlement)",7
"net.sf.freecol.common.networking.ServerAPI.newRegionName(Region, Tile, Unit, String)",9
net.sf.freecol.common.networking.ServerAPI.newTradeRoute(),5
net.sf.freecol.common.networking.ServerAPI.payArrears(GoodsType),6
net.sf.freecol.common.networking.ServerAPI.payForBuilding(Colony),6
net.sf.freecol.common.networking.ServerAPI.putOutsideColony(Unit),6
"net.sf.freecol.common.networking.ServerAPI.rearrangeColony(Colony, List<Unit>, Colony)",9
"net.sf.freecol.common.networking.ServerAPI.rename(FreeColGameObject, String)",7
net.sf.freecol.common.networking.ServerAPI.requestLaunch(),5
net.sf.freecol.common.networking.ServerAPI.retire(),5
"net.sf.freecol.common.networking.ServerAPI.scoutSettlement(Unit, Direction)",9
"net.sf.freecol.common.networking.ServerAPI.scoutSpeakToChief(Unit, IndianSettlement)",7
net.sf.freecol.common.networking.ServerAPI.send(Message),6
"net.sf.freecol.common.networking.ServerAPI.setAvailable(Nation, NationState)",7
"net.sf.freecol.common.networking.ServerAPI.setBuildQueue(Colony, List<BuildableType>)",7
"net.sf.freecol.common.networking.ServerAPI.setColor(Nation, Color)",8
"net.sf.freecol.common.networking.ServerAPI.setCurrentStop(Unit, int)",7
"net.sf.freecol.common.networking.ServerAPI.setDestination(Unit, Location)",8
"net.sf.freecol.common.networking.ServerAPI.setGoodsLevels(Colony, ExportData)",7
net.sf.freecol.common.networking.ServerAPI.setMessageHandler(MessageHandler),5
net.sf.freecol.common.networking.ServerAPI.setNation(Nation),7
net.sf.freecol.common.networking.ServerAPI.setNationType(NationType),7
net.sf.freecol.common.networking.ServerAPI.setReady(boolean),7
"net.sf.freecol.common.networking.ServerAPI.spy(Unit, Settlement)",7
net.sf.freecol.common.networking.ServerAPI.startSkipping(),5
net.sf.freecol.common.networking.ServerAPI.trainUnitInEurope(UnitType),6
"net.sf.freecol.common.networking.ServerAPI.unloadGoods(GoodsType, int, Unit)",8
net.sf.freecol.common.networking.ServerAPI.updateGameOptions(OptionGroup),8
net.sf.freecol.common.networking.ServerAPI.updateMapGeneratorOptions(OptionGroup),8
net.sf.freecol.common.networking.ServerAPI.updateTradeRoute(TradeRoute),6
"net.sf.freecol.common.networking.ServerAPI.work(Unit, WorkLocation)",7
"net.sf.freecol.common.networking.ServerInfoMessage.ServerInfoMessage(String, Game, FreeColXMLReader)",8
"net.sf.freecol.common.networking.ServerInfoMessage.ServerInfoMessage(String, ServerInfo)",6
net.sf.freecol.common.networking.ServerInfoMessage.getAddress(),5
net.sf.freecol.common.networking.ServerInfoMessage.getPort(),5
net.sf.freecol.common.networking.ServerInfoMessage.getServerInfo(),5
net.sf.freecol.common.networking.ServerInfoMessage.setAddress(String),5
net.sf.freecol.common.networking.ServerListMessage.ServerListMessage(),4
"net.sf.freecol.common.networking.ServerListMessage.ServerListMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.ServerListMessage.addServer(ServerInfo),6
net.sf.freecol.common.networking.ServerListMessage.addServers(List<ServerInfo>),6
net.sf.freecol.common.networking.ServerListMessage.getServers(),5
net.sf.freecol.common.networking.ServerListMessage.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.networking.SetAIMessage.SetAIMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.SetAIMessage.SetAIMessage(Player, boolean)",6
"net.sf.freecol.common.networking.SetAIMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.SetAIMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.SetAIMessage.getAI(),5
net.sf.freecol.common.networking.SetAIMessage.getPlayer(Game),6
net.sf.freecol.common.networking.SetAIMessage.getPriority(),3
"net.sf.freecol.common.networking.SetAvailableMessage.SetAvailableMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.SetAvailableMessage.SetAvailableMessage(Nation, NationState)",6
net.sf.freecol.common.networking.SetAvailableMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.SetAvailableMessage.getNation(Specification),6
net.sf.freecol.common.networking.SetAvailableMessage.getNationState(),5
net.sf.freecol.common.networking.SetAvailableMessage.getPriority(),3
"net.sf.freecol.common.networking.SetAvailableMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.SetBuildQueueMessage.SetBuildQueueMessage(Colony, List<BuildableType>)",7
"net.sf.freecol.common.networking.SetBuildQueueMessage.SetBuildQueueMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.SetBuildQueueMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.SetBuildQueueMessage.getAttributeMap(FreeColXMLReader),6
net.sf.freecol.common.networking.SetBuildQueueMessage.getColony(Player),6
net.sf.freecol.common.networking.SetBuildQueueMessage.getPriority(),3
net.sf.freecol.common.networking.SetBuildQueueMessage.getQueue(Specification),6
"net.sf.freecol.common.networking.SetBuildQueueMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.SetColorMessage.SetColorMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.SetColorMessage.SetColorMessage(Nation, Color)",6
net.sf.freecol.common.networking.SetColorMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.SetColorMessage.getColor(),5
net.sf.freecol.common.networking.SetColorMessage.getNation(Specification),6
net.sf.freecol.common.networking.SetColorMessage.getPriority(),3
"net.sf.freecol.common.networking.SetColorMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.SetCurrentPlayerMessage.SetCurrentPlayerMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.SetCurrentPlayerMessage.SetCurrentPlayerMessage(Player),5
"net.sf.freecol.common.networking.SetCurrentPlayerMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.SetCurrentPlayerMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.SetCurrentPlayerMessage.getPlayer(Game),6
net.sf.freecol.common.networking.SetCurrentPlayerMessage.getPriority(),3
"net.sf.freecol.common.networking.SetCurrentStopMessage.SetCurrentStopMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.SetCurrentStopMessage.SetCurrentStopMessage(Unit, int)",7
net.sf.freecol.common.networking.SetCurrentStopMessage.getPriority(),3
"net.sf.freecol.common.networking.SetCurrentStopMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.SetDeadMessage.SetDeadMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.SetDeadMessage.SetDeadMessage(Player),5
"net.sf.freecol.common.networking.SetDeadMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.SetDeadMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.SetDeadMessage.getPlayer(Game),6
net.sf.freecol.common.networking.SetDeadMessage.getPriority(),3
"net.sf.freecol.common.networking.SetDestinationMessage.SetDestinationMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.SetDestinationMessage.SetDestinationMessage(Unit, Location)",7
net.sf.freecol.common.networking.SetDestinationMessage.getPriority(),3
"net.sf.freecol.common.networking.SetDestinationMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.SetGoodsLevelsMessage.SetGoodsLevelsMessage(Colony, ExportData)",7
"net.sf.freecol.common.networking.SetGoodsLevelsMessage.SetGoodsLevelsMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.SetGoodsLevelsMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.SetGoodsLevelsMessage.getExportData(),5
net.sf.freecol.common.networking.SetGoodsLevelsMessage.getPriority(),3
"net.sf.freecol.common.networking.SetGoodsLevelsMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.SetNationMessage.SetNationMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.SetNationMessage.SetNationMessage(Player, Nation)",6
net.sf.freecol.common.networking.SetNationMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.SetNationMessage.getPlayer(Game),6
net.sf.freecol.common.networking.SetNationMessage.getPriority(),3
net.sf.freecol.common.networking.SetNationMessage.getValue(Specification),6
"net.sf.freecol.common.networking.SetNationMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.SetNationTypeMessage.SetNationTypeMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.SetNationTypeMessage.SetNationTypeMessage(Player, NationType)",6
net.sf.freecol.common.networking.SetNationTypeMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.SetNationTypeMessage.getPlayer(Game),6
net.sf.freecol.common.networking.SetNationTypeMessage.getPriority(),3
net.sf.freecol.common.networking.SetNationTypeMessage.getValue(Specification),6
"net.sf.freecol.common.networking.SetNationTypeMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.SetStanceMessage.SetStanceMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.SetStanceMessage.SetStanceMessage(Stance, Player, Player)",7
"net.sf.freecol.common.networking.SetStanceMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.SetStanceMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.SetStanceMessage.getFirstPlayer(Game),6
net.sf.freecol.common.networking.SetStanceMessage.getPriority(),3
net.sf.freecol.common.networking.SetStanceMessage.getSecondPlayer(Game),6
net.sf.freecol.common.networking.SetStanceMessage.getStance(),5
"net.sf.freecol.common.networking.SpySettlementMessage.SpySettlementMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.SpySettlementMessage.SpySettlementMessage(Unit, Settlement)",7
net.sf.freecol.common.networking.SpySettlementMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.SpySettlementMessage.getColony(Game),0
net.sf.freecol.common.networking.SpySettlementMessage.getPriority(),3
net.sf.freecol.common.networking.SpySettlementMessage.getSpyTile(),0
net.sf.freecol.common.networking.SpySettlementMessage.getUnit(Player),0
"net.sf.freecol.common.networking.SpySettlementMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.SpySettlementMessage.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.networking.StartGameMessage.StartGameMessage(),3
"net.sf.freecol.common.networking.StartGameMessage.StartGameMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.StartGameMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.StartGameMessage.clientHandler(FreeColClient),3
"net.sf.freecol.common.networking.TrainUnitInEuropeMessage.TrainUnitInEuropeMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.TrainUnitInEuropeMessage.TrainUnitInEuropeMessage(UnitType),6
net.sf.freecol.common.networking.TrainUnitInEuropeMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.TrainUnitInEuropeMessage.getPriority(),3
"net.sf.freecol.common.networking.TrainUnitInEuropeMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.TrivialMessage.TrivialMessage(String),5
"net.sf.freecol.common.networking.TrivialMessage.TrivialMessage(String, Game, FreeColXMLReader)",11
"net.sf.freecol.common.networking.TrivialMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.TrivialMessage.appendChild(T),3
net.sf.freecol.common.networking.TrivialMessage.appendChildren(Collection<T>),3
net.sf.freecol.common.networking.TrivialMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.TrivialMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.TrivialMessage.getChildCount(),3
net.sf.freecol.common.networking.TrivialMessage.getChildren(),3
net.sf.freecol.common.networking.TrivialMessage.getPriority(),3
net.sf.freecol.common.networking.TrivialMessage.getStringAttribute(String),3
net.sf.freecol.common.networking.TrivialMessage.getStringAttributeMap(),3
net.sf.freecol.common.networking.TrivialMessage.getType(),3
net.sf.freecol.common.networking.TrivialMessage.hasAttribute(String),3
"net.sf.freecol.common.networking.TrivialMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.TrivialMessage.setChildren(List<? extends FreeColObject>),3
"net.sf.freecol.common.networking.TrivialMessage.setStringAttribute(String, String)",3
net.sf.freecol.common.networking.TrivialMessage.setType(String),3
"net.sf.freecol.common.networking.UnloadGoodsMessage.UnloadGoodsMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.UnloadGoodsMessage.UnloadGoodsMessage(GoodsType, int, Unit)",7
net.sf.freecol.common.networking.UnloadGoodsMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.UnloadGoodsMessage.getPriority(),3
"net.sf.freecol.common.networking.UnloadGoodsMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.UpdateGameOptionsMessage.UpdateGameOptionsMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.UpdateGameOptionsMessage.UpdateGameOptionsMessage(OptionGroup),5
net.sf.freecol.common.networking.UpdateGameOptionsMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.UpdateGameOptionsMessage.getGameOptions(),5
net.sf.freecol.common.networking.UpdateGameOptionsMessage.getPriority(),3
"net.sf.freecol.common.networking.UpdateGameOptionsMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.UpdateMapGeneratorOptionsMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.UpdateMapGeneratorOptionsMessage(OptionGroup),6
net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.getMapGeneratorOptions(),5
net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.getPriority(),3
"net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.UpdateMessage.UpdateMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.UpdateMessage.UpdateMessage(Player),5
"net.sf.freecol.common.networking.UpdateMessage.UpdateMessage(Player, FreeColGameObject)",6
"net.sf.freecol.common.networking.UpdateMessage.UpdateMessage(Player, List<FreeColGameObject>)",6
"net.sf.freecol.common.networking.UpdateMessage.aiHandler(FreeColServer, AIPlayer)",3
net.sf.freecol.common.networking.UpdateMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.UpdateMessage.getPriority(),3
net.sf.freecol.common.networking.UpdateMessage.merge(Message),3
net.sf.freecol.common.networking.UpdateMessage.toXML(FreeColXMLWriter),3
"net.sf.freecol.common.networking.UpdateServerMessage.UpdateServerMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.UpdateServerMessage.UpdateServerMessage(ServerInfo),5
"net.sf.freecol.common.networking.UpdateTradeRouteMessage.UpdateTradeRouteMessage(Game, FreeColXMLReader)",7
net.sf.freecol.common.networking.UpdateTradeRouteMessage.UpdateTradeRouteMessage(TradeRoute),6
net.sf.freecol.common.networking.UpdateTradeRouteMessage.getPriority(),3
net.sf.freecol.common.networking.UpdateTradeRouteMessage.getTradeRoute(),5
"net.sf.freecol.common.networking.UpdateTradeRouteMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.VacantPlayersMessage.VacantPlayersMessage(),3
"net.sf.freecol.common.networking.VacantPlayersMessage.VacantPlayersMessage(Game, FreeColXMLReader)",6
net.sf.freecol.common.networking.VacantPlayersMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.VacantPlayersMessage.getPriority(),3
net.sf.freecol.common.networking.VacantPlayersMessage.getVacantPlayers(),5
"net.sf.freecol.common.networking.VacantPlayersMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.VacantPlayersMessage.setVacantPlayers(Game),6
"net.sf.freecol.common.networking.WorkMessage.WorkMessage(Game, FreeColXMLReader)",7
"net.sf.freecol.common.networking.WorkMessage.WorkMessage(Unit, WorkLocation)",7
net.sf.freecol.common.networking.WorkMessage.currentPlayerMessage(),3
net.sf.freecol.common.networking.WorkMessage.getPriority(),3
"net.sf.freecol.common.networking.WorkMessage.serverHandler(FreeColServer, ServerPlayer)",3
"net.sf.freecol.common.networking.WrapperMessage.WrapperMessage(String, Game, FreeColXMLReader)",9
"net.sf.freecol.common.networking.WrapperMessage.WrapperMessage(String, int, Message)",7
net.sf.freecol.common.networking.WrapperMessage.clientHandler(FreeColClient),3
net.sf.freecol.common.networking.WrapperMessage.getMessage(),5
net.sf.freecol.common.networking.WrapperMessage.getSubType(),3
net.sf.freecol.common.networking.WrapperMessage.isEmpty(),3
"net.sf.freecol.common.networking.WrapperMessage.serverHandler(FreeColServer, ServerPlayer)",3
net.sf.freecol.common.networking.WrapperMessage.toString(),3
net.sf.freecol.common.networking.WrapperMessage.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.option.AbstractOption.AbstractOption(Specification),5
net.sf.freecol.common.option.AbstractOption.AbstractOption(String),5
"net.sf.freecol.common.option.AbstractOption.AbstractOption(String, Specification)",6
net.sf.freecol.common.option.AbstractOption.generateChoices(),5
net.sf.freecol.common.option.AbstractOption.getEnabledBy(),3
net.sf.freecol.common.option.AbstractOption.getGroup(),3
net.sf.freecol.common.option.AbstractOption.isNullValueOK(),7
net.sf.freecol.common.option.AbstractOption.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.option.AbstractOption.readOption(FreeColXMLReader),7
net.sf.freecol.common.option.AbstractOption.setGroup(String),3
"net.sf.freecol.common.option.AbstractOption.setValue(String, String)",12
net.sf.freecol.common.option.AbstractOption.setValues(AbstractOption<T>),5
net.sf.freecol.common.option.AbstractOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.AbstractUnitOption.AbstractUnitOption(Specification),5
"net.sf.freecol.common.option.AbstractUnitOption.AbstractUnitOption(String, Specification)",6
net.sf.freecol.common.option.AbstractUnitOption.cloneOption(),3
net.sf.freecol.common.option.AbstractUnitOption.generateChoices(),3
net.sf.freecol.common.option.AbstractUnitOption.getNationType(),5
net.sf.freecol.common.option.AbstractUnitOption.getNumber(),5
net.sf.freecol.common.option.AbstractUnitOption.getRole(),5
net.sf.freecol.common.option.AbstractUnitOption.getUnitType(),5
net.sf.freecol.common.option.AbstractUnitOption.getValue(),3
net.sf.freecol.common.option.AbstractUnitOption.getXMLTagName(),3
net.sf.freecol.common.option.AbstractUnitOption.isNullValueOK(),3
net.sf.freecol.common.option.AbstractUnitOption.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.option.AbstractUnitOption.readChild(FreeColXMLReader),3
net.sf.freecol.common.option.AbstractUnitOption.readChildren(FreeColXMLReader),3
net.sf.freecol.common.option.AbstractUnitOption.requireNumberOption(),0
net.sf.freecol.common.option.AbstractUnitOption.requireRoleOption(),0
net.sf.freecol.common.option.AbstractUnitOption.requireUnitTypeOption(),0
net.sf.freecol.common.option.AbstractUnitOption.setValue(AbstractUnit),3
net.sf.freecol.common.option.AbstractUnitOption.toString(),3
net.sf.freecol.common.option.AbstractUnitOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.AbstractUnitOption.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.option.AllTests.suite(),0
net.sf.freecol.common.option.AudioMixerOption.AudioMixerOption(Specification),5
"net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.MixerWrapper(String, Info)",0
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.compareTo(MixerWrapper),0
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.equals(Object),3
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.getKey(),0
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.getMixerInfo(),0
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.hashCode(),3
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.toString(),3
net.sf.freecol.common.option.AudioMixerOption.cloneOption(),3
net.sf.freecol.common.option.AudioMixerOption.getChoices(),5
net.sf.freecol.common.option.AudioMixerOption.getMixerWrapperByName(String),6
net.sf.freecol.common.option.AudioMixerOption.getValue(),3
net.sf.freecol.common.option.AudioMixerOption.getXMLTagName(),3
net.sf.freecol.common.option.AudioMixerOption.setValue(MixerWrapper),3
"net.sf.freecol.common.option.AudioMixerOption.setValue(String, String)",3
net.sf.freecol.common.option.AudioMixerOption.toString(),3
net.sf.freecol.common.option.AudioMixerOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.BooleanOption.BooleanOption(Specification),5
"net.sf.freecol.common.option.BooleanOption.BooleanOption(String, Specification)",6
net.sf.freecol.common.option.BooleanOption.cloneOption(),3
net.sf.freecol.common.option.BooleanOption.getValue(),3
net.sf.freecol.common.option.BooleanOption.getXMLTagName(),3
net.sf.freecol.common.option.BooleanOption.setValue(Boolean),3
"net.sf.freecol.common.option.BooleanOption.setValue(String, String)",3
net.sf.freecol.common.option.BooleanOption.toString(),3
net.sf.freecol.common.option.BooleanOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.FileOption.FileOption(Specification),5
net.sf.freecol.common.option.FileOption.cloneOption(),3
net.sf.freecol.common.option.FileOption.getType(),5
net.sf.freecol.common.option.FileOption.getValue(),3
net.sf.freecol.common.option.FileOption.getXMLTagName(),3
net.sf.freecol.common.option.FileOption.isNullValueOK(),3
net.sf.freecol.common.option.FileOption.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.option.FileOption.setType(String),5
net.sf.freecol.common.option.FileOption.setValue(File),3
"net.sf.freecol.common.option.FileOption.setValue(String, String)",3
net.sf.freecol.common.option.FileOption.toString(),3
net.sf.freecol.common.option.FileOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.GameOptions.getXMLTagName(),3
net.sf.freecol.common.option.IntegerOption.IntegerOption(Specification),5
"net.sf.freecol.common.option.IntegerOption.IntegerOption(String, Specification)",6
net.sf.freecol.common.option.IntegerOption.cloneOption(),3
net.sf.freecol.common.option.IntegerOption.getMaximumValue(),5
net.sf.freecol.common.option.IntegerOption.getMinimumValue(),5
net.sf.freecol.common.option.IntegerOption.getStepSize(),6
net.sf.freecol.common.option.IntegerOption.getValue(),3
net.sf.freecol.common.option.IntegerOption.getXMLTagName(),3
net.sf.freecol.common.option.IntegerOption.isPreviewEnabled(),7
net.sf.freecol.common.option.IntegerOption.limitValue(int),6
net.sf.freecol.common.option.IntegerOption.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.option.IntegerOption.resetValue(),3
net.sf.freecol.common.option.IntegerOption.setMaximumValue(int),5
net.sf.freecol.common.option.IntegerOption.setMinimumValue(int),5
net.sf.freecol.common.option.IntegerOption.setPreviewEnabled(boolean),6
net.sf.freecol.common.option.IntegerOption.setValue(Integer),3
"net.sf.freecol.common.option.IntegerOption.setValue(String, String)",3
net.sf.freecol.common.option.IntegerOption.toString(),3
net.sf.freecol.common.option.IntegerOption.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.common.option.LanguageOption.Language.Language(String, Locale)",0
net.sf.freecol.common.option.LanguageOption.Language.compareTo(Language),3
net.sf.freecol.common.option.LanguageOption.Language.equals(Object),3
net.sf.freecol.common.option.LanguageOption.Language.getKey(),5
net.sf.freecol.common.option.LanguageOption.Language.getLocale(),5
net.sf.freecol.common.option.LanguageOption.Language.hashCode(),3
net.sf.freecol.common.option.LanguageOption.Language.setKey(String),5
net.sf.freecol.common.option.LanguageOption.Language.setLocale(Locale),5
net.sf.freecol.common.option.LanguageOption.Language.toString(),3
net.sf.freecol.common.option.LanguageOption.LanguageOption(Specification),5
net.sf.freecol.common.option.LanguageOption.cloneOption(),3
net.sf.freecol.common.option.LanguageOption.getChoices(),5
net.sf.freecol.common.option.LanguageOption.getLanguage(String),6
net.sf.freecol.common.option.LanguageOption.getValue(),3
net.sf.freecol.common.option.LanguageOption.getXMLTagName(),3
net.sf.freecol.common.option.LanguageOption.initializeLanguages(),3
net.sf.freecol.common.option.LanguageOption.setValue(Language),3
"net.sf.freecol.common.option.LanguageOption.setValue(String, String)",3
net.sf.freecol.common.option.LanguageOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.ListOption.ListOption(Specification),5
"net.sf.freecol.common.option.ListOption.ListOption(String, Specification)",6
net.sf.freecol.common.option.ListOption.addMember(AbstractOption<T>),5
net.sf.freecol.common.option.ListOption.canAdd(AbstractOption<T>),6
net.sf.freecol.common.option.ListOption.getAllowDuplicates(),5
net.sf.freecol.common.option.ListOption.getMaximumNumber(),5
net.sf.freecol.common.option.ListOption.getOptionValues(),5
net.sf.freecol.common.option.ListOption.getTemplate(),5
net.sf.freecol.common.option.ListOption.getValue(),5
net.sf.freecol.common.option.ListOption.isNullValueOK(),3
net.sf.freecol.common.option.ListOption.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.option.ListOption.readChild(FreeColXMLReader),3
net.sf.freecol.common.option.ListOption.readChildOption(FreeColXMLReader),9
net.sf.freecol.common.option.ListOption.readChildren(FreeColXMLReader),3
net.sf.freecol.common.option.ListOption.setAllowDuplicates(boolean),5
net.sf.freecol.common.option.ListOption.setListValues(ListOption<T>),5
net.sf.freecol.common.option.ListOption.setMaximumNumber(int),5
net.sf.freecol.common.option.ListOption.setTemplate(AbstractOption<T>),5
net.sf.freecol.common.option.ListOption.setValue(List<AbstractOption<T>>),5
net.sf.freecol.common.option.ListOption.toString(),3
net.sf.freecol.common.option.ListOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.ListOption.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.option.MapGeneratorOptions.getXMLTagName(),0
net.sf.freecol.common.option.ModListOption.ModListOption(Specification),5
"net.sf.freecol.common.option.ModListOption.ModListOption(String, Specification)",6
net.sf.freecol.common.option.ModListOption.cloneOption(),3
net.sf.freecol.common.option.ModListOption.getXMLTagName(),3
net.sf.freecol.common.option.ModOption.ModOption(Specification),5
net.sf.freecol.common.option.ModOption.cloneOption(),3
net.sf.freecol.common.option.ModOption.equals(Object),3
net.sf.freecol.common.option.ModOption.getChoices(),5
net.sf.freecol.common.option.ModOption.getValue(),5
net.sf.freecol.common.option.ModOption.getXMLTagName(),3
net.sf.freecol.common.option.ModOption.hashCode(),3
net.sf.freecol.common.option.ModOption.isNullValueOK(),3
net.sf.freecol.common.option.ModOption.setValue(FreeColModFile),5
"net.sf.freecol.common.option.ModOption.setValue(String, String)",3
net.sf.freecol.common.option.ModOption.toString(),3
net.sf.freecol.common.option.ModOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.OptionContainer.getBoolean(String),6
net.sf.freecol.common.option.OptionContainer.getFile(String),6
net.sf.freecol.common.option.OptionContainer.getInteger(String),6
net.sf.freecol.common.option.OptionContainer.getIntegerMinimum(String),6
net.sf.freecol.common.option.OptionContainer.getModList(String),6
net.sf.freecol.common.option.OptionContainer.getOptionGroup(String),6
net.sf.freecol.common.option.OptionContainer.getPercentage(String),6
net.sf.freecol.common.option.OptionContainer.getPercentageMultiplier(String),7
net.sf.freecol.common.option.OptionContainer.getRange(String),6
net.sf.freecol.common.option.OptionContainer.getSelection(String),6
net.sf.freecol.common.option.OptionContainer.getSelectionName(String),7
net.sf.freecol.common.option.OptionContainer.getString(String),6
net.sf.freecol.common.option.OptionContainer.getText(String),6
net.sf.freecol.common.option.OptionContainer.getUnitList(String),6
"net.sf.freecol.common.option.OptionContainer.setBoolean(String, boolean)",6
"net.sf.freecol.common.option.OptionContainer.setFile(String, File)",6
"net.sf.freecol.common.option.OptionContainer.setInteger(String, int)",6
"net.sf.freecol.common.option.OptionContainer.setIntegerMinimum(String, Integer)",6
"net.sf.freecol.common.option.OptionContainer.setString(String, String)",6
"net.sf.freecol.common.option.OptionContainer.setText(String, String)",6
"net.sf.freecol.common.option.OptionGroup.OptionGroup(FreeColXMLReader, Specification)",7
net.sf.freecol.common.option.OptionGroup.OptionGroup(Specification),5
net.sf.freecol.common.option.OptionGroup.OptionGroup(String),5
"net.sf.freecol.common.option.OptionGroup.OptionGroup(String, Specification)",6
net.sf.freecol.common.option.OptionGroup.add(Option),6
net.sf.freecol.common.option.OptionGroup.addOptionGroup(OptionGroup),6
net.sf.freecol.common.option.OptionGroup.cloneOption(),3
net.sf.freecol.common.option.OptionGroup.generateChoices(),3
net.sf.freecol.common.option.OptionGroup.getName(),5
net.sf.freecol.common.option.OptionGroup.getOption(String),6
"net.sf.freecol.common.option.OptionGroup.getOption(String, Class<T>)",3
net.sf.freecol.common.option.OptionGroup.getOptions(),5
net.sf.freecol.common.option.OptionGroup.getShortDescription(),6
net.sf.freecol.common.option.OptionGroup.getValue(),3
net.sf.freecol.common.option.OptionGroup.getXMLTagName(),3
"net.sf.freecol.common.option.OptionGroup.hasOption(String, Class<T>)",3
net.sf.freecol.common.option.OptionGroup.hasOptionGroup(),5
net.sf.freecol.common.option.OptionGroup.isEditable(),5
net.sf.freecol.common.option.OptionGroup.isNullValueOK(),3
net.sf.freecol.common.option.OptionGroup.isVisible(),5
net.sf.freecol.common.option.OptionGroup.load(File),6
net.sf.freecol.common.option.OptionGroup.load(FreeColXMLReader),7
"net.sf.freecol.common.option.OptionGroup.loadOptionGroup(File, String, Specification)",9
"net.sf.freecol.common.option.OptionGroup.merge(Option, LogBuilder)",15
net.sf.freecol.common.option.OptionGroup.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.option.OptionGroup.readChild(FreeColXMLReader),3
net.sf.freecol.common.option.OptionGroup.readChildren(FreeColXMLReader),3
net.sf.freecol.common.option.OptionGroup.remove(String),6
net.sf.freecol.common.option.OptionGroup.removeAll(),4
net.sf.freecol.common.option.OptionGroup.save(File),3
net.sf.freecol.common.option.OptionGroup.setEditable(boolean),5
net.sf.freecol.common.option.OptionGroup.setValue(OptionGroup),3
"net.sf.freecol.common.option.OptionGroup.setValue(String, String)",3
net.sf.freecol.common.option.OptionGroup.toString(),3
net.sf.freecol.common.option.OptionGroup.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.OptionGroup.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.option.OptionTest.testCloneIntegerOption(),0
net.sf.freecol.common.option.OptionTest.testGameOptions(),0
net.sf.freecol.common.option.OptionTest.testInheritsEditable(),4
net.sf.freecol.common.option.OptionTest.testUnitListOption(),0
net.sf.freecol.common.option.PercentageOption.PercentageOption(Specification),5
"net.sf.freecol.common.option.PercentageOption.PercentageOption(String, Specification)",6
net.sf.freecol.common.option.PercentageOption.getXMLTagName(),0
net.sf.freecol.common.option.PercentageOption.toString(),3
net.sf.freecol.common.option.RangeOption.RangeOption(Specification),5
"net.sf.freecol.common.option.RangeOption.RangeOption(String, Specification)",6
net.sf.freecol.common.option.RangeOption.getValueRank(),6
net.sf.freecol.common.option.RangeOption.getXMLItemElementTagName(),5
net.sf.freecol.common.option.RangeOption.getXMLTagName(),3
net.sf.freecol.common.option.RangeOption.setValueRank(int),6
net.sf.freecol.common.option.SelectOption.SelectOption(Specification),5
"net.sf.freecol.common.option.SelectOption.SelectOption(String, Specification)",6
"net.sf.freecol.common.option.SelectOption.addItemValue(Integer, String)",6
net.sf.freecol.common.option.SelectOption.clearItemValues(),5
net.sf.freecol.common.option.SelectOption.getItemValues(),5
net.sf.freecol.common.option.SelectOption.getName(),5
net.sf.freecol.common.option.SelectOption.getXMLItemElementTagName(),7
net.sf.freecol.common.option.SelectOption.getXMLTagName(),3
net.sf.freecol.common.option.SelectOption.localizeLabels(),6
net.sf.freecol.common.option.SelectOption.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.option.SelectOption.readChild(FreeColXMLReader),3
net.sf.freecol.common.option.SelectOption.readChildren(FreeColXMLReader),3
net.sf.freecol.common.option.SelectOption.setValue(Integer),3
net.sf.freecol.common.option.SelectOption.toString(),3
net.sf.freecol.common.option.SelectOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.SelectOption.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.option.StringOption.StringOption(Specification),5
"net.sf.freecol.common.option.StringOption.StringOption(String, Specification)",6
net.sf.freecol.common.option.StringOption.cloneOption(),3
net.sf.freecol.common.option.StringOption.getChoices(),5
net.sf.freecol.common.option.StringOption.getValue(),3
net.sf.freecol.common.option.StringOption.getXMLTagName(),3
net.sf.freecol.common.option.StringOption.readChild(FreeColXMLReader),3
net.sf.freecol.common.option.StringOption.readChildren(FreeColXMLReader),3
net.sf.freecol.common.option.StringOption.setChoices(List<String>),5
net.sf.freecol.common.option.StringOption.setValue(String),3
"net.sf.freecol.common.option.StringOption.setValue(String, String)",3
net.sf.freecol.common.option.StringOption.toString(),3
net.sf.freecol.common.option.StringOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.StringOption.writeChildren(FreeColXMLWriter),3
net.sf.freecol.common.option.TextOption.TextOption(Specification),5
"net.sf.freecol.common.option.TextOption.TextOption(String, Specification)",6
net.sf.freecol.common.option.TextOption.cloneOption(),3
net.sf.freecol.common.option.TextOption.getValue(),3
net.sf.freecol.common.option.TextOption.getXMLTagName(),3
net.sf.freecol.common.option.TextOption.setValue(String),3
"net.sf.freecol.common.option.TextOption.setValue(String, String)",3
net.sf.freecol.common.option.TextOption.toString(),3
net.sf.freecol.common.option.TextOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.UnitListOption.UnitListOption(Specification),5
"net.sf.freecol.common.option.UnitListOption.UnitListOption(String, Specification)",6
net.sf.freecol.common.option.UnitListOption.cloneOption(),3
net.sf.freecol.common.option.UnitListOption.getXMLTagName(),3
net.sf.freecol.common.option.UnitTypeOption.UnitTypeOption(Specification),5
"net.sf.freecol.common.option.UnitTypeOption.UnitTypeOption(String, Specification)",6
net.sf.freecol.common.option.UnitTypeOption.addNone(),5
net.sf.freecol.common.option.UnitTypeOption.cloneOption(),3
net.sf.freecol.common.option.UnitTypeOption.generateChoices(),3
net.sf.freecol.common.option.UnitTypeOption.getChoices(),5
net.sf.freecol.common.option.UnitTypeOption.getSelector(),5
net.sf.freecol.common.option.UnitTypeOption.getValue(),5
net.sf.freecol.common.option.UnitTypeOption.getXMLTagName(),3
net.sf.freecol.common.option.UnitTypeOption.isNullValueOK(),3
net.sf.freecol.common.option.UnitTypeOption.readAttributes(FreeColXMLReader),3
net.sf.freecol.common.option.UnitTypeOption.readChild(FreeColXMLReader),3
net.sf.freecol.common.option.UnitTypeOption.readChildren(FreeColXMLReader),3
"net.sf.freecol.common.option.UnitTypeOption.setValue(String, String)",3
net.sf.freecol.common.option.UnitTypeOption.setValue(UnitType),5
net.sf.freecol.common.option.UnitTypeOption.toString(),3
net.sf.freecol.common.option.UnitTypeOption.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.common.option.UnitTypeOption.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.common.resources.AudioResource.AudioResource(String, URI)",8
net.sf.freecol.common.resources.AudioResource.getAllAudio(),0
net.sf.freecol.common.resources.AudioResource.getAudio(),5
net.sf.freecol.common.resources.AudioResource.preload(),3
"net.sf.freecol.common.resources.ColorResource.ColorResource(String, Color)",0
"net.sf.freecol.common.resources.ColorResource.ColorResource(String, URI)",7
net.sf.freecol.common.resources.ColorResource.createColor(String),8
net.sf.freecol.common.resources.ColorResource.getColor(),5
net.sf.freecol.common.resources.ColorResource.isHexString(String),0
net.sf.freecol.common.resources.ColorResource.preload(),3
net.sf.freecol.common.resources.FAFile.CREatingInputStream.CREatingInputStream(InputStream),5
net.sf.freecol.common.resources.FAFile.CREatingInputStream.read(),6
net.sf.freecol.common.resources.FAFile.FAFile(InputStream),7
net.sf.freecol.common.resources.FAFile.getDimension(String),7
net.sf.freecol.common.resources.FAFile.getFAName(String),0
net.sf.freecol.common.resources.FAFile.getLetter(char),0
net.sf.freecol.common.resources.FAFile.getPoints(String),8
net.sf.freecol.common.resources.FAFile.load(InputStream),0
"net.sf.freecol.common.resources.FAFileResource.FAFileResource(String, FAFile)",0
"net.sf.freecol.common.resources.FAFileResource.FAFileResource(String, URI)",8
net.sf.freecol.common.resources.FAFileResource.getFAFile(),6
net.sf.freecol.common.resources.FAFileResource.preload(),3
"net.sf.freecol.common.resources.FontResource.FontResource(String, Font)",0
"net.sf.freecol.common.resources.FontResource.FontResource(String, URI)",8
net.sf.freecol.common.resources.FontResource.getEmergencyFont(),6
net.sf.freecol.common.resources.FontResource.getFont(),9
net.sf.freecol.common.resources.FontResource.preload(),3
net.sf.freecol.common.resources.ImageCache.ImageCache(),3
net.sf.freecol.common.resources.ImageCache.clear(),3
net.sf.freecol.common.resources.ImageCache.clearLowPriorityCache(),0
net.sf.freecol.common.resources.ImageCache.debugPrintCacheSizes(),0
"net.sf.freecol.common.resources.ImageCache.getCachedImage(ImageResource, Dimension, boolean, int)",13
"net.sf.freecol.common.resources.ImageCache.getCachedImageOrGenerate(String, Dimension, boolean, int, Callable<BufferedImage>)",0
net.sf.freecol.common.resources.ImageCache.getImageResource(String),9
"net.sf.freecol.common.resources.ImageCache.getScaledImage(String, float, boolean)",8
"net.sf.freecol.common.resources.ImageCache.getSizedImage(String, Dimension, boolean)",12
"net.sf.freecol.common.resources.ImageCache.getSizedImage(String, Dimension, boolean, int)",14
"net.sf.freecol.common.resources.ImageCache.imageHash(String, Dimension, boolean, int)",13
"net.sf.freecol.common.resources.ImageCache.placeImageInCache(long, BufferedImage)",0
"net.sf.freecol.common.resources.ImageCache.placeImageInLowPriorityCache(long, BufferedImage)",0
net.sf.freecol.common.resources.ImageCache.searchCaches(long),0
"net.sf.freecol.common.resources.ImageResource.ImageResource(String, URI)",6
net.sf.freecol.common.resources.ImageResource.addAlternativeResourceLocator(URI),6
net.sf.freecol.common.resources.ImageResource.addAlternativeResourceLocators(List<URI>),6
net.sf.freecol.common.resources.ImageResource.addVariation(ImageResource),0
net.sf.freecol.common.resources.ImageResource.canUseBitmask(URI),0
net.sf.freecol.common.resources.ImageResource.clean(),0
net.sf.freecol.common.resources.ImageResource.findLoadedImage(Predicate<BufferedImage>),7
net.sf.freecol.common.resources.ImageResource.forceLowestQuality(boolean),0
net.sf.freecol.common.resources.ImageResource.getColorImage(Dimension),8
net.sf.freecol.common.resources.ImageResource.getGrayscaleImage(Dimension),6
net.sf.freecol.common.resources.ImageResource.getImage(),5
"net.sf.freecol.common.resources.ImageResource.getImage(Dimension, boolean)",7
"net.sf.freecol.common.resources.ImageResource.getImage(int, Dimension, boolean)",8
net.sf.freecol.common.resources.ImageResource.getNumberOfVariations(),0
net.sf.freecol.common.resources.ImageResource.getVariation(int),0
net.sf.freecol.common.resources.ImageResource.getVariationNumberForSeed(int),0
net.sf.freecol.common.resources.ImageResource.getVariationNumberForTick(long),0
net.sf.freecol.common.resources.ImageResource.haveAlternatives(),0
net.sf.freecol.common.resources.ImageResource.isForceLowestQuality(),0
net.sf.freecol.common.resources.ImageResource.loadImage(URI),6
net.sf.freecol.common.resources.ImageResource.preload(),3
net.sf.freecol.common.resources.PropertyList.PropertyList(String),0
net.sf.freecol.common.resources.PropertyList.getInt(String),0
"net.sf.freecol.common.resources.PropertyList.getInt(String, int)",0
net.sf.freecol.common.resources.PropertyList.getString(String),0
net.sf.freecol.common.resources.Resource.Resource(String),5
"net.sf.freecol.common.resources.Resource.Resource(String, URI)",8
net.sf.freecol.common.resources.Resource.getCachingKey(),9
net.sf.freecol.common.resources.Resource.getResourceLocator(),4
"net.sf.freecol.common.resources.ResourceFactory.createResource(String, String, URI)",9
net.sf.freecol.common.resources.ResourceManager.finishPreloading(),4
net.sf.freecol.common.resources.ResourceManager.getAudio(String),10
"net.sf.freecol.common.resources.ResourceManager.getAudioResource(String, boolean)",8
"net.sf.freecol.common.resources.ResourceManager.getColor(String, Color)",8
"net.sf.freecol.common.resources.ResourceManager.getColorResource(String, boolean)",8
net.sf.freecol.common.resources.ResourceManager.getFAFile(String),8
"net.sf.freecol.common.resources.ResourceManager.getFAFileResource(String, boolean)",8
net.sf.freecol.common.resources.ResourceManager.getFont(String),7
"net.sf.freecol.common.resources.ResourceManager.getFontResource(String, boolean)",8
net.sf.freecol.common.resources.ResourceManager.getImage(String),6
"net.sf.freecol.common.resources.ResourceManager.getImage(String, Dimension, boolean)",9
net.sf.freecol.common.resources.ResourceManager.getImageKeys(String),6
"net.sf.freecol.common.resources.ResourceManager.getImageResource(String, boolean)",8
net.sf.freecol.common.resources.ResourceManager.getPropertyList(String),7
net.sf.freecol.common.resources.ResourceManager.getSZA(String),13
"net.sf.freecol.common.resources.ResourceManager.getSZA(String, float)",11
"net.sf.freecol.common.resources.ResourceManager.getSZAResource(String, boolean)",8
net.sf.freecol.common.resources.ResourceManager.getString(String),8
"net.sf.freecol.common.resources.ResourceManager.getString(String, String)",8
"net.sf.freecol.common.resources.ResourceManager.getStringResource(String, boolean)",8
net.sf.freecol.common.resources.ResourceManager.getVideo(String),8
"net.sf.freecol.common.resources.ResourceManager.getVideoResource(String, boolean)",8
net.sf.freecol.common.resources.ResourceManager.prepare(),0
net.sf.freecol.common.resources.ResourceManager.reload(),3
net.sf.freecol.common.resources.ResourceManager.setBaseData(FreeColDataFile),0
net.sf.freecol.common.resources.ResourceManager.setMods(List<T>),0
net.sf.freecol.common.resources.ResourceManager.setSavegameFile(FreeColSavegameFile),0
net.sf.freecol.common.resources.ResourceManager.setTcData(FreeColDataFile),0
net.sf.freecol.common.resources.ResourceManager.startPreloading(Runnable),11
net.sf.freecol.common.resources.ResourceManager.summarizeImageResources(StringBuilder),5
net.sf.freecol.common.resources.ResourceManager.waitForPreloadingToStop(),0
net.sf.freecol.common.resources.ResourceMapping.ResourceMapping(),3
"net.sf.freecol.common.resources.ResourceMapping.ResourceType.ResourceType(Class<T>, String, Map<String, T>)",0
"net.sf.freecol.common.resources.ResourceMapping.ResourceType.put(String, Object)",0
"net.sf.freecol.common.resources.ResourceMapping.add(String, Resource)",0
net.sf.freecol.common.resources.ResourceMapping.addAll(ResourceMapping),6
net.sf.freecol.common.resources.ResourceMapping.clearCaches(),0
"net.sf.freecol.common.resources.ResourceMapping.duplicateResource(String, String)",7
net.sf.freecol.common.resources.ResourceMapping.getAudioResource(String),6
net.sf.freecol.common.resources.ResourceMapping.getColorResource(String),6
net.sf.freecol.common.resources.ResourceMapping.getFAFileResource(String),6
net.sf.freecol.common.resources.ResourceMapping.getFontResource(String),6
net.sf.freecol.common.resources.ResourceMapping.getImageKeySet(),5
net.sf.freecol.common.resources.ResourceMapping.getImageResource(String),6
net.sf.freecol.common.resources.ResourceMapping.getSZAResource(String),6
net.sf.freecol.common.resources.ResourceMapping.getStringResource(String),6
net.sf.freecol.common.resources.ResourceMapping.getVideoResource(String),6
net.sf.freecol.common.resources.ResourceMapping.mapFrom(ResourceType<?>...),0
net.sf.freecol.common.resources.ResourceMapping.preload(PreloadController),7
"net.sf.freecol.common.resources.SZAResource.SZAResource(String, URI)",7
net.sf.freecol.common.resources.SZAResource.getSimpleZippedAnimation(),6
net.sf.freecol.common.resources.SZAResource.getSimpleZippedAnimation(float),6
net.sf.freecol.common.resources.SZAResource.preload(),3
"net.sf.freecol.common.resources.StringResource.StringResource(String, URI)",7
net.sf.freecol.common.resources.StringResource.getString(),5
net.sf.freecol.common.resources.StringResource.preload(),3
net.sf.freecol.common.resources.Video.Video(URL),5
net.sf.freecol.common.resources.Video.getURL(),0
"net.sf.freecol.common.resources.VideoResource.VideoResource(String, URI)",8
net.sf.freecol.common.resources.VideoResource.getVideo(),5
net.sf.freecol.common.resources.VideoResource.preload(),3
net.sf.freecol.common.sound.AllTests.suite(),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.OggStream(InputStream),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.available(),5
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.close(),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.decodePacket(int),7
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.getBody(InputStream),6
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.getFormat(),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.getHeader(),8
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.getInput(),5
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.getPage(),5
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.read(),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.read(byte[]),0
"net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.read(byte[], int)",9
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.reset(),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.skip(long),6
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.OggVorbisAudioInputStream(OggStream),6
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.available(),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.close(),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.getFormat(),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.mark(int),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.markSupported(),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.read(),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.read(byte[]),0
"net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.read(byte[], int)",0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.reset(),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.skip(long),0
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisDecoderFactory(),3
net.sf.freecol.common.sound.OggVorbisDecoderFactory.getOggStream(File),8
"net.sf.freecol.common.sound.SoundPlayer.SoundPlayer(AudioMixerOption, PercentageOption)",6
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.SoundPlayerThread(),3
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.add(File),5
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.playSound(File),7
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.remove(),5
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.run(),3
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.stopPlaying(),3
"net.sf.freecol.common.sound.SoundPlayer.changeVolume(SourceDataLine, int)",6
net.sf.freecol.common.sound.SoundPlayer.getAudioInputStream(File),11
net.sf.freecol.common.sound.SoundPlayer.getMixer(),5
net.sf.freecol.common.sound.SoundPlayer.getVolume(),5
"net.sf.freecol.common.sound.SoundPlayer.openLine(AudioFormat, Mixer, int)",8
net.sf.freecol.common.sound.SoundPlayer.playOnce(File),6
net.sf.freecol.common.sound.SoundPlayer.setDefaultPlaylist(File...),6
net.sf.freecol.common.sound.SoundPlayer.setMixer(MixerWrapper),9
net.sf.freecol.common.sound.SoundPlayer.setVolume(int),5
net.sf.freecol.common.sound.SoundPlayer.stop(),3
net.sf.freecol.common.sound.SoundTest.playSound(String),0
net.sf.freecol.common.sound.SoundTest.setUp(),0
net.sf.freecol.common.sound.SoundTest.tearDown(),0
net.sf.freecol.common.sound.SoundTest.testClassic(),0
net.sf.freecol.common.sound.SoundTest.testSound(),0
"net.sf.freecol.common.util.CachingFunction.CachingFunction(Function<T, R>)",5
net.sf.freecol.common.util.CachingFunction.apply(T),3
"net.sf.freecol.common.util.CollectionUtils.accumulateMap(Map<K, V>, Map<K, V>, BinaryOperator<V>)",0
"net.sf.freecol.common.util.CollectionUtils.accumulateToMap(Map<K, V>, K, V, BinaryOperator<V>)",0
"net.sf.freecol.common.util.CollectionUtils.all(Collection<T>, Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.all(Stream<T>, Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.all(T[], Predicate<? super T>)",8
net.sf.freecol.common.util.CollectionUtils.allSame(Collection<T>),7
"net.sf.freecol.common.util.CollectionUtils.all_internal(Stream<T>, Predicate<? super T>)",8
net.sf.freecol.common.util.CollectionUtils.alwaysTrue(),6
net.sf.freecol.common.util.CollectionUtils.any(Collection<T>),7
"net.sf.freecol.common.util.CollectionUtils.any(Collection<T>, Predicate<? super T>)",8
net.sf.freecol.common.util.CollectionUtils.any(Stream<T>),7
"net.sf.freecol.common.util.CollectionUtils.any(Stream<T>, Predicate<? super T>)",8
net.sf.freecol.common.util.CollectionUtils.any(T[]),7
"net.sf.freecol.common.util.CollectionUtils.any(T[], Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.any_internal(Stream<T>, Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.appendToMapList(Map<K, List<T>>, K, T)",9
net.sf.freecol.common.util.CollectionUtils.asMap(T...),9
"net.sf.freecol.common.util.CollectionUtils.cacheDouble(Function<T, Double>)",7
"net.sf.freecol.common.util.CollectionUtils.cacheInt(Function<T, Integer>)",7
"net.sf.freecol.common.util.CollectionUtils.cachingDoubleComparator(Function<T, Double>)",7
"net.sf.freecol.common.util.CollectionUtils.cachingIntComparator(Function<T, Integer>)",7
"net.sf.freecol.common.util.CollectionUtils.concat(Stream<T>, Stream<T>...)",8
net.sf.freecol.common.util.CollectionUtils.count(Collection<T>),7
"net.sf.freecol.common.util.CollectionUtils.count(Collection<T>, Predicate<? super T>)",8
net.sf.freecol.common.util.CollectionUtils.count(Stream<T>),7
"net.sf.freecol.common.util.CollectionUtils.count(Stream<T>, Predicate<? super T>)",8
net.sf.freecol.common.util.CollectionUtils.count(T[]),7
"net.sf.freecol.common.util.CollectionUtils.count(T[], Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.count_internal(Stream<T>, Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.dump(String, Collection<?>)",6
"net.sf.freecol.common.util.CollectionUtils.dump(String, Map<?, ?>)",6
"net.sf.freecol.common.util.CollectionUtils.dump(String, Stream<?>)",6
"net.sf.freecol.common.util.CollectionUtils.dump(String, T[])",7
"net.sf.freecol.common.util.CollectionUtils.dump_internal(String, Stream<?>)",6
net.sf.freecol.common.util.CollectionUtils.fileStream(File),6
"net.sf.freecol.common.util.CollectionUtils.fileStream(File, Predicate<? super File>)",7
"net.sf.freecol.common.util.CollectionUtils.find(Collection<T>, Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.find(Collection<T>, Predicate<? super T>, T)",9
"net.sf.freecol.common.util.CollectionUtils.find(Stream<T>, Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.find(Stream<T>, Predicate<? super T>, T)",9
"net.sf.freecol.common.util.CollectionUtils.find(T[], Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.find(T[], Predicate<? super T>, T)",9
"net.sf.freecol.common.util.CollectionUtils.find_internal(Stream<T>, Predicate<? super T>, T)",9
net.sf.freecol.common.util.CollectionUtils.first(Collection<T>),7
net.sf.freecol.common.util.CollectionUtils.first(Stream<T>),7
net.sf.freecol.common.util.CollectionUtils.first(T[]),7
"net.sf.freecol.common.util.CollectionUtils.first_internal(Stream<T>, T)",8
"net.sf.freecol.common.util.CollectionUtils.flatten(Collection<T>, Function<? super T, ? extends Stream<? extends R>>)",9
"net.sf.freecol.common.util.CollectionUtils.flatten(Collection<T>, Predicate<? super T>, Function<? super T, ? extends Stream<? extends R>>)",10
"net.sf.freecol.common.util.CollectionUtils.flatten(Stream<T>, Function<? super T, ? extends Stream<? extends R>>)",9
"net.sf.freecol.common.util.CollectionUtils.flatten(Stream<T>, Predicate<? super T>, Function<? super T, ? extends Stream<? extends R>>)",10
"net.sf.freecol.common.util.CollectionUtils.flatten(T[], Function<? super T, ? extends Stream<? extends R>>)",9
"net.sf.freecol.common.util.CollectionUtils.flatten(T[], Predicate<? super T>, Function<? super T, ? extends Stream<? extends R>>)",10
"net.sf.freecol.common.util.CollectionUtils.flatten_internal(Stream<T>, Predicate<? super T>, Function<? super T, ? extends Stream<? extends R>>)",10
"net.sf.freecol.common.util.CollectionUtils.forEach(Collection<T>, Consumer<? super T>)",7
"net.sf.freecol.common.util.CollectionUtils.forEach(Collection<T>, Predicate<? super T>, Consumer<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.forEach(Stream<T>, Consumer<? super T>)",7
"net.sf.freecol.common.util.CollectionUtils.forEach(Stream<T>, Predicate<? super T>, Consumer<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.forEach(T[], Consumer<? super T>)",7
"net.sf.freecol.common.util.CollectionUtils.forEach(T[], Predicate<? super T>, Consumer<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.forEachMapEntry(Map<K, V>, Consumer<Entry<K, V>>)",8
"net.sf.freecol.common.util.CollectionUtils.forEachMapEntry(Map<K, V>, Predicate<Entry<K, V>>, Consumer<Entry<K, V>>)",9
"net.sf.freecol.common.util.CollectionUtils.forEach_internal(Stream<T>, Predicate<? super T>, Consumer<? super T>)",8
net.sf.freecol.common.util.CollectionUtils.getPermutations(List<T>),11
"net.sf.freecol.common.util.CollectionUtils.incrementMapCount(Map<K, Integer>, K)",8
net.sf.freecol.common.util.CollectionUtils.isNotNull(),7
"net.sf.freecol.common.util.CollectionUtils.isNotNull(Function<? super T, V>)",9
net.sf.freecol.common.util.CollectionUtils.isNull(),7
"net.sf.freecol.common.util.CollectionUtils.isNull(Function<? super T, V>)",9
net.sf.freecol.common.util.CollectionUtils.iterable(Stream<T>),7
"net.sf.freecol.common.util.CollectionUtils.listEquals(List<T>, List<T>)",9
net.sf.freecol.common.util.CollectionUtils.makeUnmodifiableList(T...),7
"net.sf.freecol.common.util.CollectionUtils.makeUnmodifiableMap(K[], V[])",11
net.sf.freecol.common.util.CollectionUtils.makeUnmodifiableSet(T...),7
"net.sf.freecol.common.util.CollectionUtils.map(Collection<T>, Function<? super T, ? extends R>)",9
"net.sf.freecol.common.util.CollectionUtils.map(Stream<T>, Function<? super T, ? extends R>)",9
"net.sf.freecol.common.util.CollectionUtils.map(T[], Function<? super T, ? extends R>)",9
"net.sf.freecol.common.util.CollectionUtils.mapEntriesByKey(Map<K, V>)",8
"net.sf.freecol.common.util.CollectionUtils.mapEntriesByKey(Map<K, V>, Comparator<K>)",9
"net.sf.freecol.common.util.CollectionUtils.mapEntriesByValue(Map<K, V>)",8
"net.sf.freecol.common.util.CollectionUtils.mapEntriesByValue(Map<K, V>, Comparator<V>)",9
"net.sf.freecol.common.util.CollectionUtils.map_internal(Stream<T>, Function<? super T, ? extends R>)",9
"net.sf.freecol.common.util.CollectionUtils.matchKey(K, Function<T, K>)",10
net.sf.freecol.common.util.CollectionUtils.matchKey(T),7
"net.sf.freecol.common.util.CollectionUtils.matchKeyEquals(K, Function<T, K>)",10
net.sf.freecol.common.util.CollectionUtils.matchKeyEquals(T),8
"net.sf.freecol.common.util.CollectionUtils.max(Collection<T>, Predicate<? super T>, ToIntFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.max(Collection<T>, ToIntFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.max(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.max(Stream<T>, ToIntFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.max(T[], Predicate<? super T>, ToIntFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.max(T[], ToIntFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.max_internal(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.maximize(Collection<T>, Comparator<? super T>)",9
"net.sf.freecol.common.util.CollectionUtils.maximize(Collection<T>, Predicate<? super T>, Comparator<? super T>)",10
"net.sf.freecol.common.util.CollectionUtils.maximize(Stream<T>, Comparator<? super T>)",9
"net.sf.freecol.common.util.CollectionUtils.maximize(Stream<T>, Predicate<? super T>, Comparator<? super T>)",10
"net.sf.freecol.common.util.CollectionUtils.maximize(T[], Comparator<? super T>)",9
"net.sf.freecol.common.util.CollectionUtils.maximize(T[], Predicate<? super T>, Comparator<? super T>)",10
"net.sf.freecol.common.util.CollectionUtils.maximize_internal(Stream<T>, Predicate<? super T>, Comparator<? super T>)",9
"net.sf.freecol.common.util.CollectionUtils.min(Collection<T>, Predicate<? super T>, ToIntFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.min(Collection<T>, ToIntFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.min(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.min(Stream<T>, ToIntFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.min(T[], Predicate<? super T>, ToIntFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.min(T[], ToIntFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.min_internal(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.minimize(Collection<T>, Comparator<? super T>)",9
"net.sf.freecol.common.util.CollectionUtils.minimize(Collection<T>, Predicate<? super T>, Comparator<? super T>)",10
"net.sf.freecol.common.util.CollectionUtils.minimize(Stream<T>, Comparator<? super T>)",9
"net.sf.freecol.common.util.CollectionUtils.minimize(Stream<T>, Predicate<? super T>, Comparator<? super T>)",10
"net.sf.freecol.common.util.CollectionUtils.minimize(T[], Comparator<? super T>)",9
"net.sf.freecol.common.util.CollectionUtils.minimize(T[], Predicate<? super T>, Comparator<? super T>)",10
"net.sf.freecol.common.util.CollectionUtils.minimize_internal(Stream<T>, Predicate<? super T>, Comparator<? super T>)",9
net.sf.freecol.common.util.CollectionUtils.none(Collection<T>),7
"net.sf.freecol.common.util.CollectionUtils.none(Collection<T>, Predicate<? super T>)",8
net.sf.freecol.common.util.CollectionUtils.none(Stream<T>),7
"net.sf.freecol.common.util.CollectionUtils.none(Stream<T>, Predicate<? super T>)",8
net.sf.freecol.common.util.CollectionUtils.none(T[]),7
"net.sf.freecol.common.util.CollectionUtils.none(T[], Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.none_internal(Stream<T>, Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.product(Collection<T>, Predicate<? super T>, ToDoubleFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.product(Collection<T>, ToDoubleFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.product(Stream<T>, Predicate<? super T>, ToDoubleFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.product(Stream<T>, ToDoubleFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.product(T[], Predicate<? super T>, ToDoubleFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.product(T[], ToDoubleFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.product_internal(Stream<T>, Predicate<? super T>, ToDoubleFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.removeInPlace(Collection<T>, Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.removeInPlace(Map<K, V>, Predicate<Entry<K, V>>)",9
net.sf.freecol.common.util.CollectionUtils.reverse(List<T>),6
"net.sf.freecol.common.util.CollectionUtils.rotate(List<T>, int)",7
net.sf.freecol.common.util.CollectionUtils.sort(Collection<T>),7
"net.sf.freecol.common.util.CollectionUtils.sort(Collection<T>, Comparator<? super T>)",8
net.sf.freecol.common.util.CollectionUtils.sort(Stream<T>),7
"net.sf.freecol.common.util.CollectionUtils.sort(Stream<T>, Comparator<? super T>)",8
net.sf.freecol.common.util.CollectionUtils.sort(T[]),7
"net.sf.freecol.common.util.CollectionUtils.sort(T[], Comparator<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.sort_internal(Stream<T>, Comparator<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.sum(Collection<T>, Predicate<? super T>, ToIntFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.sum(Collection<T>, ToIntFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.sum(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.sum(Stream<T>, ToIntFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.sum(T[], Predicate<? super T>, ToIntFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.sum(T[], ToIntFunction<T>)",8
"net.sf.freecol.common.util.CollectionUtils.sumDouble(Collection<T>, Predicate<? super T>, ToDoubleFunction<T>)",10
"net.sf.freecol.common.util.CollectionUtils.sumDouble(Collection<T>, ToDoubleFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.sumDouble(Stream<T>, Predicate<? super T>, ToDoubleFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.sumDouble(Stream<T>, ToDoubleFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.sumDouble(T[], Predicate<? super T>, ToDoubleFunction<T>)",10
"net.sf.freecol.common.util.CollectionUtils.sumDouble(T[], ToDoubleFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.sumDouble_internal(Stream<T>, Predicate<? super T>, ToDoubleFunction<T>)",9
"net.sf.freecol.common.util.CollectionUtils.sum_internal(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",9
net.sf.freecol.common.util.CollectionUtils.toAppendedList(),6
net.sf.freecol.common.util.CollectionUtils.toList(Collection<T>),7
net.sf.freecol.common.util.CollectionUtils.toList(Stream<T>),7
net.sf.freecol.common.util.CollectionUtils.toList(T[]),7
net.sf.freecol.common.util.CollectionUtils.toListNoNulls(),7
net.sf.freecol.common.util.CollectionUtils.toList_internal(Stream<T>),7
net.sf.freecol.common.util.CollectionUtils.toStream(Iterable<T>),7
net.sf.freecol.common.util.CollectionUtils.toStream(Iterator<T>),7
"net.sf.freecol.common.util.CollectionUtils.transform(Collection<T>, Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.transform(Collection<T>, Predicate<? super T>, Function<? super T, ? extends R>)",10
"net.sf.freecol.common.util.CollectionUtils.transform(Collection<T>, Predicate<? super T>, Function<? super T, ? extends R>, Collector<R, ?, C>)",12
"net.sf.freecol.common.util.CollectionUtils.transform(Collection<T>, Predicate<? super T>, Function<? super T, ? extends R>, Comparator<? super R>)",11
"net.sf.freecol.common.util.CollectionUtils.transform(Stream<T>, Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.transform(Stream<T>, Predicate<? super T>, Function<? super T, ? extends R>)",10
"net.sf.freecol.common.util.CollectionUtils.transform(Stream<T>, Predicate<? super T>, Function<? super T, ? extends R>, Collector<R, ?, C>)",12
"net.sf.freecol.common.util.CollectionUtils.transform(Stream<T>, Predicate<? super T>, Function<? super T, ? extends R>, Comparator<? super R>)",11
"net.sf.freecol.common.util.CollectionUtils.transform(T[], Predicate<? super T>)",8
"net.sf.freecol.common.util.CollectionUtils.transform(T[], Predicate<? super T>, Function<? super T, ? extends R>)",10
"net.sf.freecol.common.util.CollectionUtils.transform(T[], Predicate<? super T>, Function<? super T, ? extends R>, Collector<R, ?, C>)",12
"net.sf.freecol.common.util.CollectionUtils.transform(T[], Predicate<? super T>, Function<? super T, ? extends R>, Comparator<? super R>)",11
"net.sf.freecol.common.util.CollectionUtils.transform_internal(Stream<T>, Predicate<? super T>, Function<? super T, ? extends R>, Comparator<? super R>, Collector<R, ?, C>)",14
net.sf.freecol.common.util.ImageUtils.createBufferedImage(Image),6
"net.sf.freecol.common.util.ImageUtils.createBufferedImage(int, int)",7
"net.sf.freecol.common.util.ImageUtils.createCenteredImage(BufferedImage, Dimension)",8
"net.sf.freecol.common.util.ImageUtils.createCenteredImage(BufferedImage, int, int)",9
net.sf.freecol.common.util.ImageUtils.createGrayscaleImage(Image),6
net.sf.freecol.common.util.ImageUtils.createHalvedImage(Image),9
net.sf.freecol.common.util.ImageUtils.createMirroredImage(Image),6
"net.sf.freecol.common.util.ImageUtils.createResizedImage(Image, int, int)",11
"net.sf.freecol.common.util.ImageUtils.createResizedImage(Image, int, int, boolean)",12
"net.sf.freecol.common.util.ImageUtils.drawTiledImage(BufferedImage, Graphics, JComponent, Insets)",11
"net.sf.freecol.common.util.ImageUtils.fadeImage(Image, float, float)",8
"net.sf.freecol.common.util.ImageUtils.fillTexture(Graphics2D, BufferedImage, int, int, int, int)",10
"net.sf.freecol.common.util.ImageUtils.imageWithAlphaFromMask(BufferedImage, BufferedImage)",7
"net.sf.freecol.common.util.ImageUtils.wildcardDimension(Dimension, Dimension)",9
"net.sf.freecol.common.util.Introspector.Introspector(Class<?>, String)",6
"net.sf.freecol.common.util.Introspector.IntrospectorException.IntrospectorException(String, Throwable)",0
net.sf.freecol.common.util.Introspector.IntrospectorException.IntrospectorException(Throwable),0
"net.sf.freecol.common.util.Introspector.construct(Constructor<T>, Object[])",9
net.sf.freecol.common.util.Introspector.fromSnakeCase(String),0
net.sf.freecol.common.util.Introspector.getClassByName(String),6
"net.sf.freecol.common.util.Introspector.getConstructor(Class<T>, Class[])",8
net.sf.freecol.common.util.Introspector.getFromStringConverter(Class<?>),9
net.sf.freecol.common.util.Introspector.getGetMethod(),6
net.sf.freecol.common.util.Introspector.getMethodReturnType(Method),7
net.sf.freecol.common.util.Introspector.getSetMethod(Class<?>),8
net.sf.freecol.common.util.Introspector.getToStringConverter(Class<?>),8
net.sf.freecol.common.util.Introspector.getter(Object),9
"net.sf.freecol.common.util.Introspector.instantiate(Class<T>, Class[], Object[])",11
"net.sf.freecol.common.util.Introspector.instantiate(String, Class[], Object[])",10
"net.sf.freecol.common.util.Introspector.invokeMethod(Object, String, Class<T>)",12
"net.sf.freecol.common.util.Introspector.invokeVoidMethod(Object, String)",9
"net.sf.freecol.common.util.Introspector.setter(Object, String)",8
net.sf.freecol.common.util.LogBuilder.LogBuilder(int),5
net.sf.freecol.common.util.LogBuilder.add(Object...),5
"net.sf.freecol.common.util.LogBuilder.addCollection(String, Collection<T>)",7
"net.sf.freecol.common.util.LogBuilder.addInternal(StringBuilder, Object...)",6
net.sf.freecol.common.util.LogBuilder.addStackTrace(),3
net.sf.freecol.common.util.LogBuilder.grew(Object...),8
"net.sf.freecol.common.util.LogBuilder.log(Logger, Level)",6
net.sf.freecol.common.util.LogBuilder.mark(),3
net.sf.freecol.common.util.LogBuilder.o2s(Object),6
net.sf.freecol.common.util.LogBuilder.shrink(String),7
net.sf.freecol.common.util.LogBuilder.size(),5
net.sf.freecol.common.util.LogBuilder.toString(),3
net.sf.freecol.common.util.LogBuilder.truncate(int),5
"net.sf.freecol.common.util.LogBuilder.wide(int, Object...)",7
net.sf.freecol.common.util.OSUtils.getBrowserExecString(String),8
net.sf.freecol.common.util.OSUtils.getOperatingSystem(),5
net.sf.freecol.common.util.OSUtils.launchBrowser(String),5
net.sf.freecol.common.util.OSUtils.onMacOSX(),5
net.sf.freecol.common.util.OSUtils.onUnix(),5
net.sf.freecol.common.util.OSUtils.onWindows(),5
"net.sf.freecol.common.util.RandomChoice.RandomChoice(T, int)",0
net.sf.freecol.common.util.RandomChoice.getObject(),0
net.sf.freecol.common.util.RandomChoice.getProbability(),0
net.sf.freecol.common.util.RandomChoice.getTotalProbability(Collection<RandomChoice<T>>),0
"net.sf.freecol.common.util.RandomChoice.getWeightedRandom(Logger, String, Collection<RandomChoice<T>>, Random)",0
"net.sf.freecol.common.util.RandomChoice.getWeightedRandom(Logger, String, Stream<RandomChoice<T>>, Random)",0
"net.sf.freecol.common.util.RandomChoice.normalize(Collection<RandomChoice<T>>, int)",0
"net.sf.freecol.common.util.RandomChoice.select(Collection<RandomChoice<T>>, int)",0
"net.sf.freecol.common.util.RandomUtils.RandomIntCache.RandomIntCache(Logger, String, Random, int, int)",0
net.sf.freecol.common.util.RandomUtils.RandomIntCache.nextInt(),0
net.sf.freecol.common.util.RandomUtils.RandomIntCache.nextInt(int),0
net.sf.freecol.common.util.RandomUtils.RandomIntCache.refill(),0
"net.sf.freecol.common.util.RandomUtils.getRandomMember(Logger, String, List<T>, Random)",10
"net.sf.freecol.common.util.RandomUtils.getRandomMember(Logger, String, Stream<T>, Random)",10
"net.sf.freecol.common.util.RandomUtils.logArray(Logger, String, int[])",7
"net.sf.freecol.common.util.RandomUtils.randomDouble(Logger, String, Random)",8
"net.sf.freecol.common.util.RandomUtils.randomFloat(Logger, String, Random)",8
"net.sf.freecol.common.util.RandomUtils.randomInt(Logger, String, Random, int)",9
"net.sf.freecol.common.util.RandomUtils.randomInts(Logger, String, Random, int, int)",10
"net.sf.freecol.common.util.RandomUtils.randomShuffle(Logger, String, List<?>, Random)",8
net.sf.freecol.common.util.StringUtils.capitalize(String),6
"net.sf.freecol.common.util.StringUtils.capitalize(String, Locale)",7
"net.sf.freecol.common.util.StringUtils.chop(String, int)",7
net.sf.freecol.common.util.StringUtils.downCase(String),6
"net.sf.freecol.common.util.StringUtils.downCase(String, Locale)",7
"net.sf.freecol.common.util.StringUtils.firstPart(String, String)",9
net.sf.freecol.common.util.StringUtils.getBreakingPoint(String),7
"net.sf.freecol.common.util.StringUtils.getBreakingPoint(String, String)",8
net.sf.freecol.common.util.StringUtils.getEnumKey(Enum<?>),9
"net.sf.freecol.common.util.StringUtils.join(String, Collection<String>)",8
"net.sf.freecol.common.util.StringUtils.join(String, String...)",10
"net.sf.freecol.common.util.StringUtils.lastPart(String, String)",9
"net.sf.freecol.common.util.StringUtils.splitText(String, String, FontMetrics, int)",11
net.sf.freecol.common.util.StringUtils.upCase(String),6
"net.sf.freecol.common.util.StringUtils.upCase(String, Locale)",7
"net.sf.freecol.common.util.Utils.delay(long, String)",7
net.sf.freecol.common.util.Utils.deleteFile(File),5
net.sf.freecol.common.util.Utils.deleteFiles(List<File>),5
net.sf.freecol.common.util.Utils.determineDpi(GraphicsDevice),6
"net.sf.freecol.common.util.Utils.directoryAllPresent(File, String...)",7
"net.sf.freecol.common.util.Utils.equals(T, T)",9
"net.sf.freecol.common.util.Utils.fileAnySuffix(File, String...)",7
net.sf.freecol.common.util.Utils.garbageCollect(),5
"net.sf.freecol.common.util.Utils.getF8W(File, boolean)",7
net.sf.freecol.common.util.Utils.getFileUTF8AppendWriter(File),6
net.sf.freecol.common.util.Utils.getFileUTF8Reader(File),6
net.sf.freecol.common.util.Utils.getFileUTF8Writer(File),6
net.sf.freecol.common.util.Utils.getGoodGraphicsDevice(),6
net.sf.freecol.common.util.Utils.getRandomState(Random),9
net.sf.freecol.common.util.Utils.getUTF8Contents(File),6
net.sf.freecol.common.util.Utils.getUTF8Writer(OutputStream),6
net.sf.freecol.common.util.Utils.hashCode(Object),6
net.sf.freecol.common.util.Utils.isHeadless(),5
"net.sf.freecol.common.util.Utils.makeTransformer(boolean, boolean)",7
net.sf.freecol.common.util.Utils.now(),5
net.sf.freecol.common.util.Utils.restoreRandomState(String),6
net.sf.freecol.common.utils.AllTests.suite(),0
net.sf.freecol.common.utils.UtilsTest.makeList(int...),0
net.sf.freecol.common.utils.UtilsTest.testComparator(),0
net.sf.freecol.common.utils.UtilsTest.testGetPermutations(),0
net.sf.freecol.metaserver.MetaRegister.MetaRegister(),3
net.sf.freecol.metaserver.MetaRegister.addServer(ServerInfo),6
net.sf.freecol.metaserver.MetaRegister.canConnectToServer(ServerInfo),0
"net.sf.freecol.metaserver.MetaRegister.getServer(String, int)",8
net.sf.freecol.metaserver.MetaRegister.getServers(),5
"net.sf.freecol.metaserver.MetaRegister.indexOf(String, int)",8
net.sf.freecol.metaserver.MetaRegister.removeDeadServers(),3
"net.sf.freecol.metaserver.MetaRegister.removeServer(String, int)",6
net.sf.freecol.metaserver.MetaRegister.startCleanupTimer(),3
net.sf.freecol.metaserver.MetaRegister.updateServer(ServerInfo),5
net.sf.freecol.metaserver.MetaServer.MetaServer(int),7
net.sf.freecol.metaserver.MetaServer.getConnection(Socket),7
net.sf.freecol.metaserver.MetaServer.getMetaServerHandler(),5
net.sf.freecol.metaserver.MetaServer.getPort(),5
net.sf.freecol.metaserver.MetaServer.main(String[]),5
net.sf.freecol.metaserver.MetaServer.removeConnection(Connection),5
net.sf.freecol.metaserver.MetaServer.run(),3
net.sf.freecol.metaserver.MetaServer.shutdown(),3
"net.sf.freecol.metaserver.MetaServerHandler.MetaServerHandler(MetaServer, MetaRegister)",7
net.sf.freecol.metaserver.MetaServerHandler.disconnect(Connection),5
"net.sf.freecol.metaserver.MetaServerHandler.handle(Connection, Message)",3
net.sf.freecol.metaserver.MetaServerHandler.read(Connection),3
net.sf.freecol.metaserver.MetaServerHandler.register(RegisterServerMessage),6
net.sf.freecol.metaserver.MetaServerHandler.remove(RemoveServerMessage),5
net.sf.freecol.metaserver.MetaServerHandler.serverList(),6
net.sf.freecol.metaserver.MetaServerHandler.update(UpdateServerMessage),5
net.sf.freecol.server.AllTests.suite(),0
"net.sf.freecol.server.FreeColServer.FreeColServer(FreeColSavegameFile, Specification, InetAddress, int, String)",16
"net.sf.freecol.server.FreeColServer.FreeColServer(String, InetAddress, int)",9
"net.sf.freecol.server.FreeColServer.FreeColServer(boolean, boolean, Specification, InetAddress, int, String)",11
net.sf.freecol.server.FreeColServer.ServerState.ServerState(int),0
net.sf.freecol.server.FreeColServer.ServerState.getMetaServerState(),0
net.sf.freecol.server.FreeColServer.addAIConnection(Player),5
net.sf.freecol.server.FreeColServer.addNewUserConnection(Socket),9
net.sf.freecol.server.FreeColServer.addPlayerConnection(Connection),6
net.sf.freecol.server.FreeColServer.buildGame(),7
net.sf.freecol.server.FreeColServer.changeServerState(ServerState),6
"net.sf.freecol.server.FreeColServer.createServer(InetAddress, int)",11
net.sf.freecol.server.FreeColServer.endGame(),3
net.sf.freecol.server.FreeColServer.exploreMapForAllPlayers(boolean),6
"net.sf.freecol.server.FreeColServer.generateEmptyMap(int, int)",9
net.sf.freecol.server.FreeColServer.generateMap(boolean),6
net.sf.freecol.server.FreeColServer.getAIMain(),6
net.sf.freecol.server.FreeColServer.getAIPlayer(Player),6
net.sf.freecol.server.FreeColServer.getController(),5
net.sf.freecol.server.FreeColServer.getGame(),6
net.sf.freecol.server.FreeColServer.getHost(),5
net.sf.freecol.server.FreeColServer.getInGameController(),5
net.sf.freecol.server.FreeColServer.getInputHandler(),5
net.sf.freecol.server.FreeColServer.getIntegrity(),5
net.sf.freecol.server.FreeColServer.getMapGenerator(),5
net.sf.freecol.server.FreeColServer.getName(),5
net.sf.freecol.server.FreeColServer.getPlayer(Connection),7
net.sf.freecol.server.FreeColServer.getPort(),5
net.sf.freecol.server.FreeColServer.getPreGameController(),5
net.sf.freecol.server.FreeColServer.getPublicServer(),5
net.sf.freecol.server.FreeColServer.getServer(),5
net.sf.freecol.server.FreeColServer.getServerInfo(),5
net.sf.freecol.server.FreeColServer.getServerRandom(),5
net.sf.freecol.server.FreeColServer.getServerState(),5
net.sf.freecol.server.FreeColServer.getSinglePlayer(),5
net.sf.freecol.server.FreeColServer.getSpecification(),5
net.sf.freecol.server.FreeColServer.getUserConnectionHandler(),6
net.sf.freecol.server.FreeColServer.loadGame(FreeColSavegameFile),9
"net.sf.freecol.server.FreeColServer.loadGame(FreeColSavegameFile, Specification)",10
net.sf.freecol.server.FreeColServer.makeAIPlayer(Nation),8
"net.sf.freecol.server.FreeColServer.readGame(File, Specification, FreeColServer)",14
"net.sf.freecol.server.FreeColServer.readGame(FreeColSavegameFile, Specification, FreeColServer)",14
"net.sf.freecol.server.FreeColServer.readMap(File, Specification)",13
net.sf.freecol.server.FreeColServer.registerWithMetaServer(),5
net.sf.freecol.server.FreeColServer.removeFromMetaServer(),5
net.sf.freecol.server.FreeColServer.removePlayerConnection(Player),5
"net.sf.freecol.server.FreeColServer.saveGame(File, OptionGroup, Unit)",9
"net.sf.freecol.server.FreeColServer.saveGame(File, String, OptionGroup, Unit, BufferedImage)",11
"net.sf.freecol.server.FreeColServer.saveMapEditorGame(File, BufferedImage)",8
"net.sf.freecol.server.FreeColServer.sendToAll(Message, Connection)",6
"net.sf.freecol.server.FreeColServer.sendToAll(Message, Player)",6
net.sf.freecol.server.FreeColServer.setAIMain(AIMain),6
net.sf.freecol.server.FreeColServer.setGame(ServerGame),5
net.sf.freecol.server.FreeColServer.setMapGenerator(MapGenerator),5
net.sf.freecol.server.FreeColServer.setName(String),5
net.sf.freecol.server.FreeColServer.setPublicServer(boolean),5
net.sf.freecol.server.FreeColServer.setServerRandom(Random),5
net.sf.freecol.server.FreeColServer.setSinglePlayer(boolean),5
net.sf.freecol.server.FreeColServer.shutdown(),3
net.sf.freecol.server.FreeColServer.startGame(),17
net.sf.freecol.server.FreeColServer.updateMetaServer(),5
net.sf.freecol.server.FreeColServer.waitForGame(),9
net.sf.freecol.server.SaveLoadTest.tearDown(),0
net.sf.freecol.server.SaveLoadTest.testDelayedLoading(),0
net.sf.freecol.server.SaveLoadTest.testImmediateLoading(),0
net.sf.freecol.server.SaveLoadTest.testImport(),0
net.sf.freecol.server.ServerTestHelper.createRandomSaveGame(),0
net.sf.freecol.server.ServerTestHelper.getInGameController(),0
net.sf.freecol.server.ServerTestHelper.getServer(),0
net.sf.freecol.server.ServerTestHelper.newTurn(),0
net.sf.freecol.server.ServerTestHelper.setRandom(Random),0
net.sf.freecol.server.ServerTestHelper.setServer(FreeColServer),0
"net.sf.freecol.server.ServerTestHelper.startServer(File, boolean, boolean)",0
"net.sf.freecol.server.ServerTestHelper.startServer(File, boolean, boolean, int, String)",0
"net.sf.freecol.server.ServerTestHelper.startServer(boolean, boolean)",0
"net.sf.freecol.server.ServerTestHelper.startServer(boolean, boolean, Specification)",0
"net.sf.freecol.server.ServerTestHelper.startServer(boolean, boolean, Specification, int, String)",0
net.sf.freecol.server.ServerTestHelper.startServerGame(Map),6
"net.sf.freecol.server.ServerTestHelper.startServerGame(Map, Specification)",7
net.sf.freecol.server.ServerTestHelper.stopServer(),0
net.sf.freecol.server.ServerTestHelper.stopServerGame(),0
"net.sf.freecol.server.ai.AIColony.AIColony(AIMain, Colony)",6
"net.sf.freecol.server.ai.AIColony.AIColony(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.AIColony.AIColony(AIMain, String)",6
net.sf.freecol.server.ai.AIColony.addExportGoods(AIGoods),5
net.sf.freecol.server.ai.AIColony.addTileImprovementPlan(TileImprovementPlan),5
net.sf.freecol.server.ai.AIColony.addWish(Wish),5
net.sf.freecol.server.ai.AIColony.avertAutoDestruction(),10
net.sf.freecol.server.ai.AIColony.baseInitialize(),3
"net.sf.freecol.server.ai.AIColony.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.server.ai.AIColony.clearExportGoods(),3
net.sf.freecol.server.ai.AIColony.clearTileImprovementPlans(),3
net.sf.freecol.server.ai.AIColony.clearWishes(),3
"net.sf.freecol.server.ai.AIColony.completeWish(Goods, LogBuilder)",7
"net.sf.freecol.server.ai.AIColony.completeWish(TransportableAIObject, LogBuilder)",7
"net.sf.freecol.server.ai.AIColony.completeWish(Unit, LogBuilder)",7
"net.sf.freecol.server.ai.AIColony.completeWish(Wish, String, LogBuilder)",8
net.sf.freecol.server.ai.AIColony.dispose(),3
net.sf.freecol.server.ai.AIColony.dropExportGoods(AIGoods),5
net.sf.freecol.server.ai.AIColony.exploreLCRs(),4
net.sf.freecol.server.ai.AIColony.getAIOwner(),0
net.sf.freecol.server.ai.AIColony.getAIUnit(Unit),0
net.sf.freecol.server.ai.AIColony.getColony(),5
net.sf.freecol.server.ai.AIColony.getExportGoods(),5
net.sf.freecol.server.ai.AIColony.getGoodsWishes(),5
"net.sf.freecol.server.ai.AIColony.getPlanFor(Tile, List<TileImprovementPlan>)",8
net.sf.freecol.server.ai.AIColony.getPlannedBuildableTypes(),7
net.sf.freecol.server.ai.AIColony.getTileImprovementPlans(),5
net.sf.freecol.server.ai.AIColony.getWishes(),5
net.sf.freecol.server.ai.AIColony.getWorkerWishes(),5
net.sf.freecol.server.ai.AIColony.getXMLTagName(),3
"net.sf.freecol.server.ai.AIColony.goodsLog(AIGoods, String, LogBuilder)",7
net.sf.freecol.server.ai.AIColony.isBadlyDefended(),5
net.sf.freecol.server.ai.AIColony.planToString(),5
net.sf.freecol.server.ai.AIColony.propertyChange(PropertyChangeEvent),5
net.sf.freecol.server.ai.AIColony.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.AIColony.readChild(FreeColXMLReader),3
net.sf.freecol.server.ai.AIColony.readChildren(FreeColXMLReader),3
net.sf.freecol.server.ai.AIColony.rearrangeColony(LogBuilder),8
net.sf.freecol.server.ai.AIColony.removeExportGoods(AIGoods),10
net.sf.freecol.server.ai.AIColony.removeTileImprovementPlan(TileImprovementPlan),6
net.sf.freecol.server.ai.AIColony.requestRearrange(),4
"net.sf.freecol.server.ai.AIColony.requireGoodsWish(GoodsType, int, int, LogBuilder)",11
"net.sf.freecol.server.ai.AIColony.requireWorkerWish(UnitType, boolean, int, LogBuilder)",10
net.sf.freecol.server.ai.AIColony.resetExports(),7
net.sf.freecol.server.ai.AIColony.setExportGoods(List<AIGoods>),5
net.sf.freecol.server.ai.AIColony.setInitialized(),3
net.sf.freecol.server.ai.AIColony.sortExportGoods(),3
net.sf.freecol.server.ai.AIColony.stealTiles(LogBuilder),8
net.sf.freecol.server.ai.AIColony.stopUsing(WorkLocation),8
net.sf.freecol.server.ai.AIColony.update(LogBuilder),9
net.sf.freecol.server.ai.AIColony.updateExportGoods(LogBuilder),5
net.sf.freecol.server.ai.AIColony.updateGoodsWishes(LogBuilder),5
net.sf.freecol.server.ai.AIColony.updateTileImprovementPlans(LogBuilder),9
net.sf.freecol.server.ai.AIColony.updateWishes(LogBuilder),5
net.sf.freecol.server.ai.AIColony.updateWorkerWishes(LogBuilder),5
net.sf.freecol.server.ai.AIColony.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.server.ai.AIColonyTest.decorateMap(Game, boolean)",0
net.sf.freecol.server.ai.AIColonyTest.getToolsBuilder(AIColony),0
net.sf.freecol.server.ai.AIColonyTest.tearDown(),0
net.sf.freecol.server.ai.AIColonyTest.testBestDefender(),0
net.sf.freecol.server.ai.AIColonyTest.testBuildersAllocNoRawMatTiles(),5
net.sf.freecol.server.ai.AIColonyTest.testBuildersAllocation(),3
net.sf.freecol.server.ai.AIColonyTest.testExpertAllocColonyHasEnoughRawMat(),4
"net.sf.freecol.server.ai.AIGoods.AIGoods(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.AIGoods.AIGoods(AIMain, Location, GoodsType, int, Location)",10
"net.sf.freecol.server.ai.AIGoods.AIGoods(AIMain, String)",6
net.sf.freecol.server.ai.AIGoods.canMove(),3
net.sf.freecol.server.ai.AIGoods.carriableBy(Unit),3
"net.sf.freecol.server.ai.AIGoods.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.server.ai.AIGoods.dispose(),3
net.sf.freecol.server.ai.AIGoods.equals(Object),3
"net.sf.freecol.server.ai.AIGoods.getDeliveryPath(Unit, Location)",3
net.sf.freecol.server.ai.AIGoods.getGoods(),5
net.sf.freecol.server.ai.AIGoods.getGoodsAmount(),5
net.sf.freecol.server.ai.AIGoods.getGoodsType(),5
"net.sf.freecol.server.ai.AIGoods.getIntermediatePath(Unit, Location)",3
net.sf.freecol.server.ai.AIGoods.getTransportDestination(),3
net.sf.freecol.server.ai.AIGoods.getTransportLocatable(),3
net.sf.freecol.server.ai.AIGoods.getTransportSource(),3
net.sf.freecol.server.ai.AIGoods.getXMLTagName(),3
net.sf.freecol.server.ai.AIGoods.hashCode(),3
net.sf.freecol.server.ai.AIGoods.invalidReason(),3
"net.sf.freecol.server.ai.AIGoods.joinTransport(Unit, Direction)",3
net.sf.freecol.server.ai.AIGoods.leaveTransport(),3
net.sf.freecol.server.ai.AIGoods.leaveTransport(Direction),3
net.sf.freecol.server.ai.AIGoods.leaveTransport(int),6
net.sf.freecol.server.ai.AIGoods.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.AIGoods.readChild(FreeColXMLReader),3
net.sf.freecol.server.ai.AIGoods.setGoods(Goods),5
net.sf.freecol.server.ai.AIGoods.setGoodsAmount(int),5
net.sf.freecol.server.ai.AIGoods.setInitialized(),3
net.sf.freecol.server.ai.AIGoods.setTransportDestination(Location),3
net.sf.freecol.server.ai.AIGoods.toString(),3
net.sf.freecol.server.ai.AIGoods.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.server.ai.AIGoods.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.server.ai.AIInGameInputHandler.AIInGameInputHandler(FreeColServer, Player, AIMain)",7
net.sf.freecol.server.ai.AIInGameInputHandler.getMyAIPlayer(),5
"net.sf.freecol.server.ai.AIInGameInputHandler.handle(Connection, Message)",3
net.sf.freecol.server.ai.AIInGameInputHandler.read(Connection),3
net.sf.freecol.server.ai.AIMain.AIMain(FreeColServer),6
"net.sf.freecol.server.ai.AIMain.AIMain(FreeColServer, FreeColXMLReader)",9
"net.sf.freecol.server.ai.AIMain.addAIObject(String, AIObject)",11
"net.sf.freecol.server.ai.AIMain.checkIntegrity(boolean, LogBuilder)",8
net.sf.freecol.server.ai.AIMain.checkSortConsistency(),6
net.sf.freecol.server.ai.AIMain.copyIn(T),3
net.sf.freecol.server.ai.AIMain.findNewObjects(boolean),7
net.sf.freecol.server.ai.AIMain.getAIColony(Colony),6
net.sf.freecol.server.ai.AIMain.getAIObject(FreeColGameObject),9
net.sf.freecol.server.ai.AIMain.getAIObject(String),7
"net.sf.freecol.server.ai.AIMain.getAIObject(String, Class<T>)",9
net.sf.freecol.server.ai.AIMain.getAIObjects(),5
net.sf.freecol.server.ai.AIMain.getAIPlayer(Player),6
net.sf.freecol.server.ai.AIMain.getAIStatistics(),6
net.sf.freecol.server.ai.AIMain.getAIUnit(Unit),6
net.sf.freecol.server.ai.AIMain.getFreeColServer(),5
net.sf.freecol.server.ai.AIMain.getGame(),5
net.sf.freecol.server.ai.AIMain.getNextId(),5
net.sf.freecol.server.ai.AIMain.getRandomSeed(String),7
net.sf.freecol.server.ai.AIMain.getSpecification(),3
net.sf.freecol.server.ai.AIMain.getXMLTagName(),3
"net.sf.freecol.server.ai.AIMain.ownerChanged(FreeColGameObject, Player, Player)",7
net.sf.freecol.server.ai.AIMain.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.AIMain.readChild(FreeColXMLReader),3
net.sf.freecol.server.ai.AIMain.readChildren(FreeColXMLReader),3
net.sf.freecol.server.ai.AIMain.removeAIObject(String),6
net.sf.freecol.server.ai.AIMain.removeFreeColGameObject(String),6
"net.sf.freecol.server.ai.AIMain.setFreeColGameObject(String, FreeColGameObject)",11
net.sf.freecol.server.ai.AIMain.shouldHaveAIObject(FreeColGameObject),13
net.sf.freecol.server.ai.AIMain.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.server.ai.AIMain.writeChildren(FreeColXMLWriter),3
"net.sf.freecol.server.ai.AIMessage.askAttack(AIUnit, Direction)",7
"net.sf.freecol.server.ai.AIMessage.askAttackRanged(AIUnit, Tile)",7
"net.sf.freecol.server.ai.AIMessage.askBuildColony(AIUnit, String)",7
net.sf.freecol.server.ai.AIMessage.askCashInTreasureTrain(AIUnit),6
"net.sf.freecol.server.ai.AIMessage.askChangeState(AIUnit, UnitState)",7
"net.sf.freecol.server.ai.AIMessage.askChangeWorkImprovementType(AIUnit, TileImprovementType)",7
"net.sf.freecol.server.ai.AIMessage.askChangeWorkType(AIUnit, GoodsType)",7
"net.sf.freecol.server.ai.AIMessage.askChooseFoundingFather(AIPlayer, List<FoundingFather>, FoundingFather)",8
"net.sf.freecol.server.ai.AIMessage.askClaimLand(Tile, AIColony, int)",8
"net.sf.freecol.server.ai.AIMessage.askClaimLand(Tile, AIUnit, int)",8
net.sf.freecol.server.ai.AIMessage.askClearSpeciality(AIUnit),6
"net.sf.freecol.server.ai.AIMessage.askDiplomacy(AIPlayer, FreeColGameObject, FreeColGameObject, DiplomaticTrade)",11
net.sf.freecol.server.ai.AIMessage.askDisband(AIUnit),6
net.sf.freecol.server.ai.AIMessage.askDisembark(AIUnit),6
"net.sf.freecol.server.ai.AIMessage.askEmbark(AIUnit, Unit, Direction)",8
"net.sf.freecol.server.ai.AIMessage.askEmigrate(AIPlayer, int)",7
net.sf.freecol.server.ai.AIMessage.askEndTurn(AIPlayer),6
"net.sf.freecol.server.ai.AIMessage.askEquipForRole(AIUnit, Role, int)",8
"net.sf.freecol.server.ai.AIMessage.askEstablishMission(AIUnit, Direction, boolean)",8
"net.sf.freecol.server.ai.AIMessage.askFirstContact(AIPlayer, Player, Player, Tile, boolean)",10
"net.sf.freecol.server.ai.AIMessage.askIndianDemand(AIPlayer, Unit, Colony, GoodsType, int, IndianDemandAction)",13
"net.sf.freecol.server.ai.AIMessage.askLoadGoods(Location, GoodsType, int, AIUnit)",9
"net.sf.freecol.server.ai.AIMessage.askLoot(AIUnit, String, List<Goods>)",8
"net.sf.freecol.server.ai.AIMessage.askMonarchAction(AIPlayer, MonarchAction, boolean)",8
"net.sf.freecol.server.ai.AIMessage.askMove(AIUnit, Direction)",7
"net.sf.freecol.server.ai.AIMessage.askMoveTo(AIUnit, Location)",7
"net.sf.freecol.server.ai.AIMessage.askNationSummary(AIPlayer, Player)",7
"net.sf.freecol.server.ai.AIMessage.askNativeGift(AIUnit, Colony)",7
"net.sf.freecol.server.ai.AIMessage.askNativeTrade(AIPlayer, NativeTradeAction, NativeTrade)",8
"net.sf.freecol.server.ai.AIMessage.askNewLandName(AIPlayer, Unit, String)",8
"net.sf.freecol.server.ai.AIMessage.askNewRegionName(AIPlayer, Region, Tile, Unit, String)",10
net.sf.freecol.server.ai.AIMessage.askPutOutsideColony(AIUnit),6
"net.sf.freecol.server.ai.AIMessage.askRearrangeColony(AIColony, List<Unit>, Colony)",9
"net.sf.freecol.server.ai.AIMessage.askScoutSpeakToChief(AIUnit, IndianSettlement)",7
"net.sf.freecol.server.ai.AIMessage.askSetBuildQueue(AIColony, List<BuildableType>)",7
"net.sf.freecol.server.ai.AIMessage.askTrainUnitInEurope(AIPlayer, UnitType)",7
"net.sf.freecol.server.ai.AIMessage.askUnloadGoods(GoodsType, int, AIUnit)",8
"net.sf.freecol.server.ai.AIMessage.askWork(AIUnit, WorkLocation)",7
net.sf.freecol.server.ai.AIObject.AIObject(AIMain),5
"net.sf.freecol.server.ai.AIObject.AIObject(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.AIObject.AIObject(AIMain, String)",8
net.sf.freecol.server.ai.AIObject.addAIObjectWithId(),3
net.sf.freecol.server.ai.AIObject.checkIntegrity(boolean),7
"net.sf.freecol.server.ai.AIObject.checkIntegrity(boolean, LogBuilder)",8
net.sf.freecol.server.ai.AIObject.copyIn(T),3
net.sf.freecol.server.ai.AIObject.dispose(),4
net.sf.freecol.server.ai.AIObject.getAIMain(),5
net.sf.freecol.server.ai.AIObject.getGame(),3
net.sf.freecol.server.ai.AIObject.getSpecification(),3
net.sf.freecol.server.ai.AIObject.isDisposed(),5
net.sf.freecol.server.ai.AIObject.isInitialized(),10
net.sf.freecol.server.ai.AIObject.setGame(Game),3
net.sf.freecol.server.ai.AIObject.setSpecification(Specification),3
"net.sf.freecol.server.ai.AIPlayer.AIPlayer(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.AIPlayer.AIPlayer(AIMain, Player)",6
net.sf.freecol.server.ai.AIPlayer.acceptDiplomaticTrade(DiplomaticTrade),7
net.sf.freecol.server.ai.AIPlayer.acceptMercenaries(),6
net.sf.freecol.server.ai.AIPlayer.acceptTax(int),7
net.sf.freecol.server.ai.AIPlayer.askServer(),5
"net.sf.freecol.server.ai.AIPlayer.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.server.ai.AIPlayer.chooseFoundingFatherHandler(List<FoundingFather>),5
net.sf.freecol.server.ai.AIPlayer.determineStance(Player),6
"net.sf.freecol.server.ai.AIPlayer.diplomacyHandler(FreeColGameObject, FreeColGameObject, DiplomaticTrade)",7
"net.sf.freecol.server.ai.AIPlayer.firstContactHandler(Player, Player, Tile)",7
net.sf.freecol.server.ai.AIPlayer.fountainOfYouthHandler(int),5
net.sf.freecol.server.ai.AIPlayer.getAIAdvantage(),5
net.sf.freecol.server.ai.AIPlayer.getAIColonies(),5
net.sf.freecol.server.ai.AIPlayer.getAIColony(Colony),6
net.sf.freecol.server.ai.AIPlayer.getAIRandom(),5
net.sf.freecol.server.ai.AIPlayer.getAIUnit(Unit),6
net.sf.freecol.server.ai.AIPlayer.getAIUnits(),5
net.sf.freecol.server.ai.AIPlayer.getConnection(),6
net.sf.freecol.server.ai.AIPlayer.getPlayer(),6
net.sf.freecol.server.ai.AIPlayer.getXMLTagName(),3
"net.sf.freecol.server.ai.AIPlayer.indianDemand(Unit, Colony, GoodsType, int, IndianDemandAction)",11
"net.sf.freecol.server.ai.AIPlayer.indianDemandHandler(Unit, Colony, GoodsType, int, IndianDemandAction)",9
net.sf.freecol.server.ai.AIPlayer.invoke(Runnable),5
"net.sf.freecol.server.ai.AIPlayer.lootCargoHandler(Unit, List<Goods>, String)",7
"net.sf.freecol.server.ai.AIPlayer.monarchActionHandler(MonarchAction, int)",6
"net.sf.freecol.server.ai.AIPlayer.nationSummaryHandler(Player, NationSummary)",6
"net.sf.freecol.server.ai.AIPlayer.nativeTradeHandler(NativeTradeAction, NativeTrade)",6
"net.sf.freecol.server.ai.AIPlayer.newLandNameHandler(Unit, String)",6
"net.sf.freecol.server.ai.AIPlayer.newRegionNameHandler(Region, Tile, Unit, String)",8
net.sf.freecol.server.ai.AIPlayer.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.AIPlayer.reconnectHandler(),3
net.sf.freecol.server.ai.AIPlayer.removeAIObject(AIObject),7
net.sf.freecol.server.ai.AIPlayer.selectFoundingFather(List<FoundingFather>),7
"net.sf.freecol.server.ai.AIPlayer.setAIHandler(Player, boolean)",6
net.sf.freecol.server.ai.AIPlayer.setCurrentPlayerHandler(Player),5
net.sf.freecol.server.ai.AIPlayer.setInitialized(),3
net.sf.freecol.server.ai.AIPlayer.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.server.ai.AIServerAPI.AIServerAPI(AIPlayer),5
"net.sf.freecol.server.ai.AIServerAPI.connect(String, String, int)",3
net.sf.freecol.server.ai.AIServerAPI.disconnect(),3
net.sf.freecol.server.ai.AIServerAPI.getConnection(),3
net.sf.freecol.server.ai.AIServerAPI.reconnect(),3
"net.sf.freecol.server.ai.AIUnit.AIUnit(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.AIUnit.AIUnit(AIMain, String)",6
"net.sf.freecol.server.ai.AIUnit.AIUnit(AIMain, Unit)",6
net.sf.freecol.server.ai.AIUnit.canMove(),3
net.sf.freecol.server.ai.AIUnit.carriableBy(Unit),3
net.sf.freecol.server.ai.AIUnit.changeMission(Mission),6
"net.sf.freecol.server.ai.AIUnit.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.server.ai.AIUnit.dispose(),3
net.sf.freecol.server.ai.AIUnit.doMission(LogBuilder),8
net.sf.freecol.server.ai.AIUnit.equals(Object),3
net.sf.freecol.server.ai.AIUnit.equipForRole(Role),10
net.sf.freecol.server.ai.AIUnit.getAIOwner(),5
net.sf.freecol.server.ai.AIUnit.getAIRandom(),5
net.sf.freecol.server.ai.AIUnit.getBuilderScore(),8
"net.sf.freecol.server.ai.AIUnit.getDeliveryPath(Unit, Location)",3
"net.sf.freecol.server.ai.AIUnit.getIntermediatePath(Unit, Location)",3
net.sf.freecol.server.ai.AIUnit.getMission(),5
net.sf.freecol.server.ai.AIUnit.getMission(Class<T>),8
net.sf.freecol.server.ai.AIUnit.getOwner(),5
net.sf.freecol.server.ai.AIUnit.getPioneerScore(),5
net.sf.freecol.server.ai.AIUnit.getScoutScore(),5
net.sf.freecol.server.ai.AIUnit.getTransportDestination(),3
net.sf.freecol.server.ai.AIUnit.getTransportLocatable(),3
net.sf.freecol.server.ai.AIUnit.getTransportPriority(),3
net.sf.freecol.server.ai.AIUnit.getTransportSource(),3
net.sf.freecol.server.ai.AIUnit.getTrivialTarget(),5
net.sf.freecol.server.ai.AIUnit.getUnit(),5
net.sf.freecol.server.ai.AIUnit.getXMLTagName(),3
net.sf.freecol.server.ai.AIUnit.hasCargo(),5
net.sf.freecol.server.ai.AIUnit.hasDefendSettlementMission(),0
net.sf.freecol.server.ai.AIUnit.hasMission(),5
net.sf.freecol.server.ai.AIUnit.hasMission(Class<T>),7
net.sf.freecol.server.ai.AIUnit.hashCode(),3
net.sf.freecol.server.ai.AIUnit.invalidReason(),3
net.sf.freecol.server.ai.AIUnit.isAvailableForWork(Colony),0
net.sf.freecol.server.ai.AIUnit.isCompleteWishRealizationMission(Colony),0
"net.sf.freecol.server.ai.AIUnit.joinTransport(Unit, Direction)",3
net.sf.freecol.server.ai.AIUnit.leaveTransport(),3
net.sf.freecol.server.ai.AIUnit.leaveTransport(Direction),3
net.sf.freecol.server.ai.AIUnit.move(Direction),6
net.sf.freecol.server.ai.AIUnit.moveToAmerica(),5
net.sf.freecol.server.ai.AIUnit.moveToEurope(),5
net.sf.freecol.server.ai.AIUnit.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.AIUnit.readChild(FreeColXMLReader),3
net.sf.freecol.server.ai.AIUnit.removeMission(),0
net.sf.freecol.server.ai.AIUnit.removeTransportable(AIGoods),0
net.sf.freecol.server.ai.AIUnit.requestLocalRearrange(),3
net.sf.freecol.server.ai.AIUnit.setInitialized(),3
net.sf.freecol.server.ai.AIUnit.setMission(Mission),5
net.sf.freecol.server.ai.AIUnit.setTransportDestination(Location),3
net.sf.freecol.server.ai.AIUnit.setUnit(Unit),7
net.sf.freecol.server.ai.AIUnit.takeTransport(),4
net.sf.freecol.server.ai.AIUnit.toString(),3
net.sf.freecol.server.ai.AIUnit.tryPioneeringMission(LogBuilder),0
"net.sf.freecol.server.ai.AIUnit.trySomeUsefulMission(Colony, LogBuilder)",0
"net.sf.freecol.server.ai.AIUnit.tryWorkInsideColonyMission(AIColony, LogBuilder)",0
net.sf.freecol.server.ai.AIUnit.writeChildren(FreeColXMLWriter),3
net.sf.freecol.server.ai.AllTests.suite(),0
"net.sf.freecol.server.ai.Cargo.Cargo(AIMain, FreeColXMLReader)",8
"net.sf.freecol.server.ai.Cargo.Cargo(TransportableAIObject, Unit, CargoPlan)",8
net.sf.freecol.server.ai.Cargo.CargoMode.isCollection(),0
"net.sf.freecol.server.ai.Cargo.CargoPlan.initialize(TransportableAIObject, Unit, Location, boolean)",11
"net.sf.freecol.server.ai.Cargo.canQueueAt(Unit, int, List<Cargo>)",11
net.sf.freecol.server.ai.Cargo.check(AIUnit),6
net.sf.freecol.server.ai.Cargo.clear(),0
net.sf.freecol.server.ai.Cargo.couldWrap(Cargo),8
net.sf.freecol.server.ai.Cargo.dump(),5
net.sf.freecol.server.ai.Cargo.getCarrier(),0
net.sf.freecol.server.ai.Cargo.getCarrierTarget(),0
net.sf.freecol.server.ai.Cargo.getJoinDirection(),5
net.sf.freecol.server.ai.Cargo.getLeaveDirection(),5
net.sf.freecol.server.ai.Cargo.getMode(),0
net.sf.freecol.server.ai.Cargo.getModeString(),0
net.sf.freecol.server.ai.Cargo.getNewSpace(),5
net.sf.freecol.server.ai.Cargo.getSpaceLeft(),0
net.sf.freecol.server.ai.Cargo.getTransportTarget(),0
net.sf.freecol.server.ai.Cargo.getTransportable(),5
net.sf.freecol.server.ai.Cargo.getTries(),0
net.sf.freecol.server.ai.Cargo.getTurns(),0
net.sf.freecol.server.ai.Cargo.getXMLTagName(),3
net.sf.freecol.server.ai.Cargo.hasPath(),5
net.sf.freecol.server.ai.Cargo.hasWrapped(),5
"net.sf.freecol.server.ai.Cargo.initialize(Location, boolean)",9
net.sf.freecol.server.ai.Cargo.isCarried(),5
net.sf.freecol.server.ai.Cargo.isCollectable(),6
net.sf.freecol.server.ai.Cargo.isDeliverable(),6
net.sf.freecol.server.ai.Cargo.isDelivered(),6
net.sf.freecol.server.ai.Cargo.isEuropeanTrade(GoodsType),7
net.sf.freecol.server.ai.Cargo.isFallback(),0
net.sf.freecol.server.ai.Cargo.isValid(),0
"net.sf.freecol.server.ai.Cargo.newCargo(TransportableAIObject, Unit)",8
"net.sf.freecol.server.ai.Cargo.newCargo(TransportableAIObject, Unit, Location, boolean)",12
"net.sf.freecol.server.ai.Cargo.readFromXML(AIMain, FreeColXMLReader)",0
net.sf.freecol.server.ai.Cargo.resetTries(),3
net.sf.freecol.server.ai.Cargo.retry(),8
net.sf.freecol.server.ai.Cargo.setSpaceLeft(int),0
net.sf.freecol.server.ai.Cargo.toShortString(),5
net.sf.freecol.server.ai.Cargo.toString(),3
net.sf.freecol.server.ai.Cargo.toXML(FreeColXMLWriter),0
net.sf.freecol.server.ai.Cargo.unwrap(),5
net.sf.freecol.server.ai.Cargo.update(),5
net.sf.freecol.server.ai.Cargo.wrap(Cargo),5
"net.sf.freecol.server.ai.ColonyPlan.BuildPlan.BuildPlan(BuildableType, double, double)",0
net.sf.freecol.server.ai.ColonyPlan.BuildPlan.getValue(),0
net.sf.freecol.server.ai.ColonyPlan.BuildPlan.toString(),3
"net.sf.freecol.server.ai.ColonyPlan.ColonyPlan(AIMain, Colony)",6
net.sf.freecol.server.ai.ColonyPlan.ProfileType.getProfileTypeFromSize(int),6
"net.sf.freecol.server.ai.ColonyPlan.assignWorkers(List<Unit>, boolean, LogBuilder)",8
net.sf.freecol.server.ai.ColonyPlan.createProductionMap(),8
net.sf.freecol.server.ai.ColonyPlan.findBuildPlan(BuildableType),6
"net.sf.freecol.server.ai.ColonyPlan.findPlan(GoodsType, List<WorkLocationPlan>)",8
"net.sf.freecol.server.ai.ColonyPlan.fullEquipUnit(Specification, Unit, Role, Colony)",10
net.sf.freecol.server.ai.ColonyPlan.getAIMain(),5
net.sf.freecol.server.ai.ColonyPlan.getBestBuildableType(),6
"net.sf.freecol.server.ai.ColonyPlan.getBestWorker(WorkLocation, GoodsType, List<Unit>)",19
net.sf.freecol.server.ai.ColonyPlan.getBuildableReport(),5
net.sf.freecol.server.ai.ColonyPlan.getBuildableTypes(),6
net.sf.freecol.server.ai.ColonyPlan.getFoodPlans(),6
net.sf.freecol.server.ai.ColonyPlan.getPreferredProduction(),5
net.sf.freecol.server.ai.ColonyPlan.getWorkPlans(),6
net.sf.freecol.server.ai.ColonyPlan.locationDescription(Location),7
"net.sf.freecol.server.ai.ColonyPlan.prioritize(BuildableType, double, double)",9
"net.sf.freecol.server.ai.ColonyPlan.prioritizeProduction(BuildableType, GoodsType)",8
"net.sf.freecol.server.ai.ColonyPlan.refine(BuildableType, LogBuilder)",6
net.sf.freecol.server.ai.ColonyPlan.spec(),5
net.sf.freecol.server.ai.ColonyPlan.toString(),3
net.sf.freecol.server.ai.ColonyPlan.update(),4
net.sf.freecol.server.ai.ColonyPlan.updateBuildableTypes(),3
"net.sf.freecol.server.ai.ColonyPlan.updateGoodsTypeLists(Map<GoodsType, Map<WorkLocation, Integer>>)",19
"net.sf.freecol.server.ai.ColonyPlan.updatePlans(Map<GoodsType, Map<WorkLocation, Integer>>)",17
"net.sf.freecol.server.ai.ColonyPlan.updateProductionList(Map<GoodsType, Map<WorkLocation, Integer>>)",7
"net.sf.freecol.server.ai.ColonyPlan.updateRawMaterials(Map<GoodsType, Map<WorkLocation, Integer>>)",8
net.sf.freecol.server.ai.ColonyPlanTest.buildMap(boolean),7
"net.sf.freecol.server.ai.ColonyPlanTest.shouldProduce(ColonyPlan, GoodsType)",8
net.sf.freecol.server.ai.ColonyPlanTest.tearDown(),0
net.sf.freecol.server.ai.ColonyPlanTest.testBestImprovements(),0
net.sf.freecol.server.ai.ColonyPlanTest.testGetBestWorker(),0
net.sf.freecol.server.ai.ColonyPlanTest.testNoBuildRawMatTiles(),4
net.sf.freecol.server.ai.ColonyPlanTest.testReqLumberAndHammersForBuild(),0
net.sf.freecol.server.ai.ColonyPlanTest.testReqOreAndToolsWithEnoughHammersForBuild(),0
net.sf.freecol.server.ai.ContactTest.tearDown(),0
net.sf.freecol.server.ai.ContactTest.testEuropeanMeetsIndianSettlement(),0
net.sf.freecol.server.ai.ContactTest.testEuropeanMeetsNative(),0
net.sf.freecol.server.ai.ContactTest.testNativeMeetsColony(),0
net.sf.freecol.server.ai.ContactTest.testNativeMeetsEuropean(),0
net.sf.freecol.server.ai.ContactTest.testNativeMeetsIndianSettlement(),0
net.sf.freecol.server.ai.ContactTest.testNativeMeetsNative(),0
net.sf.freecol.server.ai.ContactTest.testShipMeetsShip(),0
"net.sf.freecol.server.ai.EuropeanAIPlayer.EuropeanAIPlayer(AIMain, FreeColXMLReader)",7
"net.sf.freecol.server.ai.EuropeanAIPlayer.EuropeanAIPlayer(AIMain, Player)",7
net.sf.freecol.server.ai.EuropeanAIPlayer.acceptDiplomaticTrade(DiplomaticTrade),3
net.sf.freecol.server.ai.EuropeanAIPlayer.acceptMercenaries(),3
net.sf.freecol.server.ai.EuropeanAIPlayer.acceptTax(int),3
"net.sf.freecol.server.ai.EuropeanAIPlayer.adjustMission(AIUnit, PathNode, Class, int)",3
"net.sf.freecol.server.ai.EuropeanAIPlayer.allocateTransportables(List<TransportableAIObject>, List<TransportMission>, LogBuilder)",12
net.sf.freecol.server.ai.EuropeanAIPlayer.bringGifts(LogBuilder),9
net.sf.freecol.server.ai.EuropeanAIPlayer.buildTipMap(LogBuilder),9
net.sf.freecol.server.ai.EuropeanAIPlayer.buildTransportMaps(LogBuilder),6
net.sf.freecol.server.ai.EuropeanAIPlayer.buildWishMaps(LogBuilder),5
net.sf.freecol.server.ai.EuropeanAIPlayer.buildersNeeded(),8
net.sf.freecol.server.ai.EuropeanAIPlayer.buyArtillery(),0
net.sf.freecol.server.ai.EuropeanAIPlayer.buyDragoon(),0
net.sf.freecol.server.ai.EuropeanAIPlayer.buyShip(),0
net.sf.freecol.server.ai.EuropeanAIPlayer.buyUnitsInEurope(LogBuilder),0
"net.sf.freecol.server.ai.EuropeanAIPlayer.changeNeedWagon(Tile, int)",9
net.sf.freecol.server.ai.EuropeanAIPlayer.cheat(LogBuilder),7
"net.sf.freecol.server.ai.EuropeanAIPlayer.cheatGold(int, LogBuilder)",6
"net.sf.freecol.server.ai.EuropeanAIPlayer.cheatUnit(List<RandomChoice<UnitType>>, String, LogBuilder)",8
"net.sf.freecol.server.ai.EuropeanAIPlayer.cheatUnit(UnitType, String, LogBuilder)",8
net.sf.freecol.server.ai.EuropeanAIPlayer.checkTransport(TransportableAIObject),7
net.sf.freecol.server.ai.EuropeanAIPlayer.claimTransportable(TransportableAIObject),7
net.sf.freecol.server.ai.EuropeanAIPlayer.completeWish(Wish),5
"net.sf.freecol.server.ai.EuropeanAIPlayer.consumeGoodsWish(AIGoods, GoodsWish)",6
"net.sf.freecol.server.ai.EuropeanAIPlayer.consumeWorkerWish(AIUnit, WorkerWish)",6
net.sf.freecol.server.ai.EuropeanAIPlayer.demandTribute(LogBuilder),7
net.sf.freecol.server.ai.EuropeanAIPlayer.determineStance(Player),3
net.sf.freecol.server.ai.EuropeanAIPlayer.determineStances(LogBuilder),5
"net.sf.freecol.server.ai.EuropeanAIPlayer.doMissions(List<AIUnit>, LogBuilder)",3
net.sf.freecol.server.ai.EuropeanAIPlayer.getBadlyDefended(),6
"net.sf.freecol.server.ai.EuropeanAIPlayer.getBestGoodsWish(AIUnit, GoodsType)",7
net.sf.freecol.server.ai.EuropeanAIPlayer.getBestPlan(Tile),6
net.sf.freecol.server.ai.EuropeanAIPlayer.getBestPlanTile(Colony),6
"net.sf.freecol.server.ai.EuropeanAIPlayer.getBestWorkerWish(AIUnit, UnitType)",7
"net.sf.freecol.server.ai.EuropeanAIPlayer.getBuildColonyMission(AIUnit, Location)",7
net.sf.freecol.server.ai.EuropeanAIPlayer.getCashInTreasureTrainMission(AIUnit),6
"net.sf.freecol.server.ai.EuropeanAIPlayer.getDefendSettlementMission(AIUnit, boolean, boolean)",9
"net.sf.freecol.server.ai.EuropeanAIPlayer.getGoodsWishesAt(Location, GoodsType)",7
net.sf.freecol.server.ai.EuropeanAIPlayer.getMissionaryMission(AIUnit),6
net.sf.freecol.server.ai.EuropeanAIPlayer.getNationSummary(Player),6
net.sf.freecol.server.ai.EuropeanAIPlayer.getNavalStrengthRatio(),8
net.sf.freecol.server.ai.EuropeanAIPlayer.getNeededWagons(Tile),6
"net.sf.freecol.server.ai.EuropeanAIPlayer.getPioneeringMission(AIUnit, Location)",9
"net.sf.freecol.server.ai.EuropeanAIPlayer.getPrivateerMission(AIUnit, Location)",7
net.sf.freecol.server.ai.EuropeanAIPlayer.getScoutingMission(AIUnit),6
net.sf.freecol.server.ai.EuropeanAIPlayer.getSimpleMission(AIUnit),6
net.sf.freecol.server.ai.EuropeanAIPlayer.getStrengthRatio(Player),7
net.sf.freecol.server.ai.EuropeanAIPlayer.getTransportMission(AIUnit),6
net.sf.freecol.server.ai.EuropeanAIPlayer.getTransportables(),5
net.sf.freecol.server.ai.EuropeanAIPlayer.getUrgentTransportables(),5
"net.sf.freecol.server.ai.EuropeanAIPlayer.getWishRealizationMission(AIUnit, WorkerWish)",7
net.sf.freecol.server.ai.EuropeanAIPlayer.getWishes(),6
"net.sf.freecol.server.ai.EuropeanAIPlayer.getWorkInsideColonyMission(AIUnit, AIColony)",7
"net.sf.freecol.server.ai.EuropeanAIPlayer.getWorkerWishesAt(Location, UnitType)",7
"net.sf.freecol.server.ai.EuropeanAIPlayer.giveNormalMissions(LogBuilder, List<AIUnit>)",5
"net.sf.freecol.server.ai.EuropeanAIPlayer.handleTrade(NativeTradeAction, NativeTrade)",3
"net.sf.freecol.server.ai.EuropeanAIPlayer.indianDemand(Unit, Colony, GoodsType, int, IndianDemandAction)",3
net.sf.freecol.server.ai.EuropeanAIPlayer.initializeFromSpecification(Specification),6
net.sf.freecol.server.ai.EuropeanAIPlayer.initializeMissions(LogBuilder),6
net.sf.freecol.server.ai.EuropeanAIPlayer.isAggressive(),6
net.sf.freecol.server.ai.EuropeanAIPlayer.isLikesAttackingNatives(),5
net.sf.freecol.server.ai.EuropeanAIPlayer.needsMoreArtillery(),0
net.sf.freecol.server.ai.EuropeanAIPlayer.needsMoreDragoons(),0
net.sf.freecol.server.ai.EuropeanAIPlayer.peaceHolds(Player),6
net.sf.freecol.server.ai.EuropeanAIPlayer.pioneersNeeded(),8
net.sf.freecol.server.ai.EuropeanAIPlayer.reallyNeedsMoreArtillery(),0
net.sf.freecol.server.ai.EuropeanAIPlayer.reallyNeedsMoreDragoons(),0
net.sf.freecol.server.ai.EuropeanAIPlayer.rearrangeColonies(LogBuilder),5
net.sf.freecol.server.ai.EuropeanAIPlayer.recruitAIUnitInEurope(int),9
"net.sf.freecol.server.ai.EuropeanAIPlayer.rejectAgreement(TradeItem, DiplomaticTrade)",8
net.sf.freecol.server.ai.EuropeanAIPlayer.removeAIColony(AIColony),5
net.sf.freecol.server.ai.EuropeanAIPlayer.removeAIObject(AIObject),3
net.sf.freecol.server.ai.EuropeanAIPlayer.removeTileImprovementPlan(TileImprovementPlan),5
net.sf.freecol.server.ai.EuropeanAIPlayer.requestsTransport(TransportableAIObject),8
net.sf.freecol.server.ai.EuropeanAIPlayer.scoutsNeeded(),11
net.sf.freecol.server.ai.EuropeanAIPlayer.selectFoundingFather(List<FoundingFather>),3
net.sf.freecol.server.ai.EuropeanAIPlayer.startWorking(),3
"net.sf.freecol.server.ai.EuropeanAIPlayer.suppressEuropeanTrade(GoodsType, LogBuilder)",7
net.sf.freecol.server.ai.EuropeanAIPlayer.trainAIUnitInEurope(UnitType),10
net.sf.freecol.server.ai.EuropeanAIPlayer.updateTipMap(AIColony),5
"net.sf.freecol.server.ai.EuropeanAIPlayer.updateTransport(AIUnit, Location, LogBuilder)",12
"net.sf.freecol.server.ai.GoodsWish.GoodsWish(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.GoodsWish.GoodsWish(AIMain, Location, int, int, GoodsType)",13
"net.sf.freecol.server.ai.GoodsWish.GoodsWish(AIMain, String)",6
"net.sf.freecol.server.ai.GoodsWish.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.server.ai.GoodsWish.equals(Object),3
net.sf.freecol.server.ai.GoodsWish.getGoodsAmount(),5
net.sf.freecol.server.ai.GoodsWish.getGoodsType(),5
net.sf.freecol.server.ai.GoodsWish.getXMLTagName(),3
net.sf.freecol.server.ai.GoodsWish.hashCode(),3
net.sf.freecol.server.ai.GoodsWish.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.GoodsWish.satisfiedBy(T),8
net.sf.freecol.server.ai.GoodsWish.satisfiedBy(Unit),3
net.sf.freecol.server.ai.GoodsWish.setGoodsAmount(int),7
net.sf.freecol.server.ai.GoodsWish.setInitialized(),3
net.sf.freecol.server.ai.GoodsWish.shouldBeStored(),5
net.sf.freecol.server.ai.GoodsWish.toString(),3
"net.sf.freecol.server.ai.GoodsWish.update(GoodsType, int, int)",7
net.sf.freecol.server.ai.GoodsWish.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.MissionAIPlayer.MissionAIPlayer(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.MissionAIPlayer.MissionAIPlayer(AIMain, Player)",6
net.sf.freecol.server.ai.MissionAIPlayer.addAIUnit(AIUnit),5
net.sf.freecol.server.ai.MissionAIPlayer.clearAIUnits(),3
"net.sf.freecol.server.ai.MissionAIPlayer.doMissions(List<AIUnit>, LogBuilder)",7
net.sf.freecol.server.ai.MissionAIPlayer.getAIUnits(),5
net.sf.freecol.server.ai.MissionAIPlayer.getDefendCurrentSettlementMission(AIUnit),7
"net.sf.freecol.server.ai.MissionAIPlayer.getDefendSettlementMission(AIUnit, Settlement)",7
net.sf.freecol.server.ai.MissionAIPlayer.getIdleAtSettlementMission(AIUnit),6
"net.sf.freecol.server.ai.MissionAIPlayer.getSeekAndDestroyMission(AIUnit, Location)",7
"net.sf.freecol.server.ai.MissionAIPlayer.getSeekAndDestroyMission(AIUnit, int)",7
net.sf.freecol.server.ai.MissionAIPlayer.getSettlementDefenders(Settlement),6
net.sf.freecol.server.ai.MissionAIPlayer.getWanderHostileMission(AIUnit),6
"net.sf.freecol.server.ai.MissionAIPlayer.isTargetValidForSeekAndDestroy(Unit, Tile)",9
"net.sf.freecol.server.ai.MissionAIPlayer.logMissions(Map<Unit, String>, LogBuilder)",6
net.sf.freecol.server.ai.MissionAIPlayer.removeAIObject(AIObject),3
net.sf.freecol.server.ai.MissionAIPlayer.removeAIUnit(AIUnit),5
net.sf.freecol.server.ai.MissionAssignmentTest.tearDown(),0
net.sf.freecol.server.ai.MissionAssignmentTest.testAssignDefendSettlementMission(),0
net.sf.freecol.server.ai.MissionAssignmentTest.testImpossibleConditionsForTargetSelection(),0
net.sf.freecol.server.ai.MissionAssignmentTest.testIsTargetValidForSeekAndDestroy(),0
net.sf.freecol.server.ai.MissionAssignmentTest.testSecureIndianSettlementMission(),0
net.sf.freecol.server.ai.MissionAssignmentTest.testSecureIndianSettlementMissionIgnoreNavalThreat(),4
"net.sf.freecol.server.ai.NativeAIPlayer.NativeAIPlayer(AIMain, FreeColXMLReader)",7
"net.sf.freecol.server.ai.NativeAIPlayer.NativeAIPlayer(AIMain, Player)",7
net.sf.freecol.server.ai.NativeAIPlayer.abortInvalidMissions(),5
"net.sf.freecol.server.ai.NativeAIPlayer.adjustMission(AIUnit, PathNode, Class, int)",3
"net.sf.freecol.server.ai.NativeAIPlayer.bringGifts(int[], LogBuilder)",6
net.sf.freecol.server.ai.NativeAIPlayer.completeWish(Wish),3
"net.sf.freecol.server.ai.NativeAIPlayer.demandTribute(int[], LogBuilder)",6
net.sf.freecol.server.ai.NativeAIPlayer.determineStances(LogBuilder),6
"net.sf.freecol.server.ai.NativeAIPlayer.equipBraves(IndianSettlement, LogBuilder)",8
net.sf.freecol.server.ai.NativeAIPlayer.getNeededWagons(Tile),3
net.sf.freecol.server.ai.NativeAIPlayer.getShipTradePenalties(boolean),6
net.sf.freecol.server.ai.NativeAIPlayer.giveNormalMissions(LogBuilder),5
"net.sf.freecol.server.ai.NativeAIPlayer.handleTrade(NativeTradeAction, NativeTrade)",3
"net.sf.freecol.server.ai.NativeAIPlayer.indianDemand(Unit, Colony, GoodsType, int, IndianDemandAction)",3
net.sf.freecol.server.ai.NativeAIPlayer.initializeMissions(LogBuilder),6
net.sf.freecol.server.ai.NativeAIPlayer.pioneersNeeded(),3
net.sf.freecol.server.ai.NativeAIPlayer.scoutsNeeded(),3
"net.sf.freecol.server.ai.NativeAIPlayer.secureIndianSettlement(IndianSettlement, LogBuilder)",8
"net.sf.freecol.server.ai.NativeAIPlayer.secureSettlements(int[], LogBuilder)",8
net.sf.freecol.server.ai.NativeAIPlayer.startWorking(),3
"net.sf.freecol.server.ai.NativeAIPlayer.updateTrade(NativeTrade, int)",6
"net.sf.freecol.server.ai.REFAIPlayer.REFAIPlayer(AIMain, FreeColXMLReader)",7
"net.sf.freecol.server.ai.REFAIPlayer.REFAIPlayer(AIMain, Player)",7
"net.sf.freecol.server.ai.REFAIPlayer.REFNavyGoalDecider.REFNavyGoalDecider(Player, Set<Unit>)",6
"net.sf.freecol.server.ai.REFAIPlayer.REFNavyGoalDecider.check(Unit, PathNode)",3
net.sf.freecol.server.ai.REFAIPlayer.REFNavyGoalDecider.getGoal(),3
net.sf.freecol.server.ai.REFAIPlayer.REFNavyGoalDecider.hasSubGoals(),3
"net.sf.freecol.server.ai.REFAIPlayer.TargetTuple.TargetTuple(Colony, PathNode, double)",0
net.sf.freecol.server.ai.REFAIPlayer.TargetTuple.compareTo(TargetTuple),0
net.sf.freecol.server.ai.REFAIPlayer.TargetTuple.equals(Object),3
net.sf.freecol.server.ai.REFAIPlayer.TargetTuple.hashCode(),3
"net.sf.freecol.server.ai.REFAIPlayer.adjustMission(AIUnit, PathNode, Class, int)",3
net.sf.freecol.server.ai.REFAIPlayer.determineStance(Player),3
"net.sf.freecol.server.ai.REFAIPlayer.findColonyTargets(AIUnit, AIUnit)",7
"net.sf.freecol.server.ai.REFAIPlayer.findColonyTargets(AIUnit, boolean, AIUnit)",8
"net.sf.freecol.server.ai.REFAIPlayer.giveNormalMissions(LogBuilder, List<AIUnit>)",3
net.sf.freecol.server.ai.REFAIPlayer.initialize(boolean),24
"net.sf.freecol.server.ai.REFAIPlayer.requireTransports(int, List<AIUnit>, List<AIUnit>, LogBuilder)",12
net.sf.freecol.server.ai.REFAIPlayer.startWorking(),3
net.sf.freecol.server.ai.REFTest.tearDown(),0
net.sf.freecol.server.ai.REFTest.testAddToREF(),0
net.sf.freecol.server.ai.REFTest.testCreateREFPlayer(),0
net.sf.freecol.server.ai.StandardAIPlayerTest.setupNativeDragoons(),0
net.sf.freecol.server.ai.StandardAIPlayerTest.tearDown(),0
net.sf.freecol.server.ai.StandardAIPlayerTest.testEquipBraves(),0
net.sf.freecol.server.ai.StandardAIPlayerTest.testEquipBravesNotEnoughReqGoods(),0
net.sf.freecol.server.ai.TensionTest.tearDown(),0
net.sf.freecol.server.ai.TensionTest.testTension(),0
"net.sf.freecol.server.ai.TileImprovementPlan.TileImprovementPlan(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.TileImprovementPlan.TileImprovementPlan(AIMain, String)",6
"net.sf.freecol.server.ai.TileImprovementPlan.TileImprovementPlan(AIMain, Tile, TileImprovementType, int)",11
"net.sf.freecol.server.ai.TileImprovementPlan.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.server.ai.TileImprovementPlan.dispose(),6
net.sf.freecol.server.ai.TileImprovementPlan.equals(Object),3
"net.sf.freecol.server.ai.TileImprovementPlan.getBestTileImprovementType(Tile, GoodsType)",9
net.sf.freecol.server.ai.TileImprovementPlan.getPioneer(),9
net.sf.freecol.server.ai.TileImprovementPlan.getTarget(),7
net.sf.freecol.server.ai.TileImprovementPlan.getType(),5
net.sf.freecol.server.ai.TileImprovementPlan.getXMLTagName(),3
net.sf.freecol.server.ai.TileImprovementPlan.hashCode(),3
net.sf.freecol.server.ai.TileImprovementPlan.isComplete(),5
net.sf.freecol.server.ai.TileImprovementPlan.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.TileImprovementPlan.setInitialized(),3
net.sf.freecol.server.ai.TileImprovementPlan.setPioneer(AIUnit),9
net.sf.freecol.server.ai.TileImprovementPlan.setType(TileImprovementType),6
net.sf.freecol.server.ai.TileImprovementPlan.toString(),3
net.sf.freecol.server.ai.TileImprovementPlan.toXML(FreeColXMLWriter),3
net.sf.freecol.server.ai.TileImprovementPlan.update(GoodsType),7
net.sf.freecol.server.ai.TileImprovementPlan.validate(),5
net.sf.freecol.server.ai.TileImprovementPlan.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.TransportableAIObject.TransportableAIObject(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.TransportableAIObject.TransportableAIObject(AIMain, String)",6
net.sf.freecol.server.ai.TransportableAIObject.changeTransport(AIUnit),13
net.sf.freecol.server.ai.TransportableAIObject.dropTransport(),7
net.sf.freecol.server.ai.TransportableAIObject.equals(Object),3
net.sf.freecol.server.ai.TransportableAIObject.getLocation(),5
net.sf.freecol.server.ai.TransportableAIObject.getSpaceTaken(),5
net.sf.freecol.server.ai.TransportableAIObject.getTransport(),5
net.sf.freecol.server.ai.TransportableAIObject.getTransportPriority(),5
net.sf.freecol.server.ai.TransportableAIObject.hashCode(),3
net.sf.freecol.server.ai.TransportableAIObject.incrementTransportPriority(),3
net.sf.freecol.server.ai.TransportableAIObject.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.TransportableAIObject.setTransport(AIUnit),5
net.sf.freecol.server.ai.TransportableAIObject.setTransportPriority(int),5
net.sf.freecol.server.ai.TransportableAIObject.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.server.ai.ValuedAIObject.ValuedAIObject(AIMain),5
"net.sf.freecol.server.ai.ValuedAIObject.ValuedAIObject(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.ValuedAIObject.ValuedAIObject(AIMain, String)",6
net.sf.freecol.server.ai.ValuedAIObject.equals(Object),3
net.sf.freecol.server.ai.ValuedAIObject.getValue(),5
net.sf.freecol.server.ai.ValuedAIObject.hashCode(),3
net.sf.freecol.server.ai.ValuedAIObject.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.ValuedAIObject.setValue(int),5
net.sf.freecol.server.ai.ValuedAIObject.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.Wish.Wish(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.Wish.Wish(AIMain, String)",6
"net.sf.freecol.server.ai.Wish.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.server.ai.Wish.dispose(),4
net.sf.freecol.server.ai.Wish.equals(Object),3
net.sf.freecol.server.ai.Wish.getDestination(),7
net.sf.freecol.server.ai.Wish.getDestinationAIColony(),5
net.sf.freecol.server.ai.Wish.getTransportable(),8
net.sf.freecol.server.ai.Wish.hashCode(),3
net.sf.freecol.server.ai.Wish.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.Wish.setTransportable(TransportableAIObject),8
net.sf.freecol.server.ai.Wish.shouldBeStored(),5
net.sf.freecol.server.ai.Wish.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.WorkLocationPlan.WorkLocationPlan(AIMain, WorkLocation, GoodsType)",9
net.sf.freecol.server.ai.WorkLocationPlan.getGoodsType(),8
net.sf.freecol.server.ai.WorkLocationPlan.getWorkLocation(),6
net.sf.freecol.server.ai.WorkLocationPlan.getXMLTagName(),3
net.sf.freecol.server.ai.WorkLocationPlan.isFoodPlan(),5
net.sf.freecol.server.ai.WorkLocationPlan.setGoodsType(GoodsType),7
net.sf.freecol.server.ai.WorkLocationPlan.setInitialized(),3
net.sf.freecol.server.ai.WorkLocationPlan.toString(),3
"net.sf.freecol.server.ai.WorkerWish.WorkerWish(AIMain, FreeColXMLReader)",9
"net.sf.freecol.server.ai.WorkerWish.WorkerWish(AIMain, Location, int, UnitType, boolean)",14
"net.sf.freecol.server.ai.WorkerWish.WorkerWish(AIMain, String)",7
"net.sf.freecol.server.ai.WorkerWish.checkIntegrity(boolean, LogBuilder)",3
net.sf.freecol.server.ai.WorkerWish.equals(Object),3
net.sf.freecol.server.ai.WorkerWish.getUnitType(),5
net.sf.freecol.server.ai.WorkerWish.getXMLTagName(),3
net.sf.freecol.server.ai.WorkerWish.hashCode(),3
net.sf.freecol.server.ai.WorkerWish.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.WorkerWish.satisfiedBy(T),3
net.sf.freecol.server.ai.WorkerWish.satisfiedBy(Unit),7
net.sf.freecol.server.ai.WorkerWish.setInitialized(),3
net.sf.freecol.server.ai.WorkerWish.toString(),3
"net.sf.freecol.server.ai.WorkerWish.update(UnitType, boolean, int)",7
net.sf.freecol.server.ai.WorkerWish.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.military.DefensiveMap.DefensiveMap(Map<AIColony, DefensiveZone>, Map<String, DefensiveZone>)",0
"net.sf.freecol.server.ai.military.DefensiveMap.SearchNode.SearchNode(Tile, SearchNode, int, int, DefensiveZone, int)",0
net.sf.freecol.server.ai.military.DefensiveMap.SearchNode.getCost(),0
net.sf.freecol.server.ai.military.DefensiveMap.SearchNode.getTile(),0
net.sf.freecol.server.ai.military.DefensiveMap.createDefensiveMap(EuropeanAIPlayer),10
net.sf.freecol.server.ai.military.DefensiveMap.getAttackedColonies(),4
net.sf.freecol.server.ai.military.DefensiveMap.getAttackedDefensiveZones(),3
net.sf.freecol.server.ai.military.DefensiveMap.getColoniesExposedLand(),4
net.sf.freecol.server.ai.military.DefensiveMap.getColoniesExposedWater(),3
net.sf.freecol.server.ai.military.DefensiveMap.getDefensiveZone(Tile),7
net.sf.freecol.server.ai.military.DefensiveMap.getDefensiveZones(),3
net.sf.freecol.server.ai.military.DefensiveMap.getThreatenedColonies(),4
net.sf.freecol.server.ai.military.DefensiveMap.toString(),3
net.sf.freecol.server.ai.military.DefensiveZone.DefensiveZone(AIColony),0
net.sf.freecol.server.ai.military.DefensiveZone.addAllPotentialEnemies(Set<Unit>),0
net.sf.freecol.server.ai.military.DefensiveZone.addNeighbour(DefensiveZone),0
net.sf.freecol.server.ai.military.DefensiveZone.addPotentialEnemySettlement(Settlement),0
net.sf.freecol.server.ai.military.DefensiveZone.enemiesOnly(),0
net.sf.freecol.server.ai.military.DefensiveZone.equals(Object),3
net.sf.freecol.server.ai.military.DefensiveZone.getAiColony(),0
net.sf.freecol.server.ai.military.DefensiveZone.getEnemies(),0
net.sf.freecol.server.ai.military.DefensiveZone.getNeighbours(),4
net.sf.freecol.server.ai.military.DefensiveZone.getNumberOfMilitaryEnemies(),0
net.sf.freecol.server.ai.military.DefensiveZone.getNumberOfPotentialMilitaryEnemies(),0
net.sf.freecol.server.ai.military.DefensiveZone.getPlayer(),0
net.sf.freecol.server.ai.military.DefensiveZone.hashCode(),3
net.sf.freecol.server.ai.military.DefensiveZone.isEnemiesInNeighbour(),0
net.sf.freecol.server.ai.military.DefensiveZone.isExposed(),0
net.sf.freecol.server.ai.military.DefensiveZone.isExposedLand(),0
net.sf.freecol.server.ai.military.DefensiveZone.isExposedWater(),0
net.sf.freecol.server.ai.military.DefensiveZone.setEnemiesInNeighbour(boolean),0
net.sf.freecol.server.ai.military.DefensiveZone.setExposedLand(boolean),0
net.sf.freecol.server.ai.military.DefensiveZone.setExposedWater(boolean),0
"net.sf.freecol.server.ai.military.MilitaryCoordinator.MilitaryCoordinator(EuropeanAIPlayer, Set<AIUnit>)",9
net.sf.freecol.server.ai.military.MilitaryCoordinator.always(),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.assignDefendClosestColony(Set<AIUnit>),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.assignWanderHostile(),0
"net.sf.freecol.server.ai.military.MilitaryCoordinator.attackEnemySettlements(Set<AIUnit>, Set<AIUnit>)",0
"net.sf.freecol.server.ai.military.MilitaryCoordinator.counterattackAllEnemyUnitsReachableInTurns(Set<AIUnit>, int)",0
"net.sf.freecol.server.ai.military.MilitaryCoordinator.counterattackEnemyValuableUnitsReachableInTurns(Set<AIUnit>, int)",0
net.sf.freecol.server.ai.military.MilitaryCoordinator.determineMissions(),3
"net.sf.freecol.server.ai.military.MilitaryCoordinator.findUnitClosestToColony(AIColony, Set<AIUnit>)",0
"net.sf.freecol.server.ai.military.MilitaryCoordinator.findUnitInColony(AIColony, Set<AIUnit>)",0
net.sf.freecol.server.ai.military.MilitaryCoordinator.getOurColoniesSortedByValue(),0
"net.sf.freecol.server.ai.military.MilitaryCoordinator.getTurnsToReach(Unit, Location)",0
net.sf.freecol.server.ai.military.MilitaryCoordinator.identitySet(Collection<T>),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.isArtillery(Unit),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.isDragoon(Unit),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.isUnitHandledByMilitaryCoordinator(),0
"net.sf.freecol.server.ai.military.MilitaryCoordinator.keepUnitsInColonies(List<AIColony>, Set<AIUnit>, Function<List<AIUnit>, Boolean>)",0
net.sf.freecol.server.ai.military.MilitaryCoordinator.maxArtilleries(int),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.maxDefenders(int),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.maxDragoons(int),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.neitherArtilleryNorDragoons(Set<AIUnit>),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.onlyArtillery(Set<AIUnit>),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.onlyArtilleryUnits(Set<Unit>),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.onlyDragoons(Set<AIUnit>),0
net.sf.freecol.server.ai.military.MilitaryCoordinator.onlyUnprotectedUnarmedSoldierUnits(Set<Unit>),0
"net.sf.freecol.server.ai.military.MilitaryCoordinator.placeDefender(AIUnit, AIColony)",0
"net.sf.freecol.server.ai.military.MilitaryCoordinator.placeUnit(List<AIColony>, Set<AIUnit>, Function<List<AIUnit>, Boolean>, boolean)",0
"net.sf.freecol.server.ai.military.MilitaryCoordinator.placeUnitsInColonies(List<AIColony>, Set<AIUnit>, Function<List<AIUnit>, Boolean>)",0
"net.sf.freecol.server.ai.military.MilitaryCoordinator.transportMilitaryUnitsFromEurope(AIColony, Set<AIUnit>)",0
net.sf.freecol.server.ai.mission.AllTests.suite(),0
"net.sf.freecol.server.ai.mission.BuildColonyMission.BuildColonyMission(AIMain, AIUnit, FreeColXMLReader)",9
"net.sf.freecol.server.ai.mission.BuildColonyMission.BuildColonyMission(AIMain, AIUnit, Location)",7
net.sf.freecol.server.ai.mission.BuildColonyMission.doMission(LogBuilder),3
"net.sf.freecol.server.ai.mission.BuildColonyMission.extractTarget(AIUnit, PathNode)",8
"net.sf.freecol.server.ai.mission.BuildColonyMission.findMissionTarget(AIUnit, int, boolean)",8
net.sf.freecol.server.ai.mission.BuildColonyMission.findTarget(),3
"net.sf.freecol.server.ai.mission.BuildColonyMission.findTargetPath(AIUnit, int, boolean)",8
net.sf.freecol.server.ai.mission.BuildColonyMission.getBaseTransportPriority(),3
net.sf.freecol.server.ai.mission.BuildColonyMission.getColonyValue(Tile),6
"net.sf.freecol.server.ai.mission.BuildColonyMission.getGoalDecider(AIUnit, boolean)",8
net.sf.freecol.server.ai.mission.BuildColonyMission.getTarget(),3
net.sf.freecol.server.ai.mission.BuildColonyMission.getXMLTagName(),3
"net.sf.freecol.server.ai.mission.BuildColonyMission.invalidColonyReason(AIUnit, Colony)",7
net.sf.freecol.server.ai.mission.BuildColonyMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.BuildColonyMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.BuildColonyMission.invalidReason(),3
"net.sf.freecol.server.ai.mission.BuildColonyMission.invalidTileReason(AIUnit, Tile)",7
net.sf.freecol.server.ai.mission.BuildColonyMission.invalidUnitReason(AIUnit),7
net.sf.freecol.server.ai.mission.BuildColonyMission.readAttributes(FreeColXMLReader),3
"net.sf.freecol.server.ai.mission.BuildColonyMission.scorePath(AIUnit, PathNode)",7
net.sf.freecol.server.ai.mission.BuildColonyMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.BuildColonyMission.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.CashInTreasureTrainMission(AIMain, AIUnit, FreeColXMLReader)",10
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.CashInTreasureTrainMission(AIMain, AIUnit, Location)",7
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.assignCarrier(LogBuilder),7
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.doMission(LogBuilder),3
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.extractTarget(AIUnit, PathNode)",8
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.findMissionTarget(AIUnit, int, boolean)",8
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.findTarget(),3
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.findTargetPath(AIUnit, int, boolean)",10
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.getBaseTransportPriority(),3
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.getGoalDecider(AIUnit, boolean)",8
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.getTarget(),3
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.getXMLTagName(),3
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidColonyReason(AIUnit, Colony)",8
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidEuropeReason(AIUnit, Europe)",7
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidFullColonyReason(AIUnit, Colony)",8
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidReason(),3
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidUnitReason(AIUnit),7
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.readAttributes(FreeColXMLReader),3
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.scorePath(AIUnit, PathNode)",8
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.mission.DefendSettlementMission.DefendSettlementMission(AIMain, AIUnit, FreeColXMLReader)",10
"net.sf.freecol.server.ai.mission.DefendSettlementMission.DefendSettlementMission(AIMain, AIUnit, Settlement)",8
net.sf.freecol.server.ai.mission.DefendSettlementMission.doMission(LogBuilder),3
"net.sf.freecol.server.ai.mission.DefendSettlementMission.extractTarget(AIUnit, PathNode)",8
"net.sf.freecol.server.ai.mission.DefendSettlementMission.findMissionTarget(AIUnit, int, boolean)",8
net.sf.freecol.server.ai.mission.DefendSettlementMission.findTarget(),3
"net.sf.freecol.server.ai.mission.DefendSettlementMission.findTargetPath(AIUnit, int, boolean)",8
net.sf.freecol.server.ai.mission.DefendSettlementMission.getBaseTransportPriority(),3
net.sf.freecol.server.ai.mission.DefendSettlementMission.getGoalDecider(AIUnit),7
net.sf.freecol.server.ai.mission.DefendSettlementMission.getTarget(),3
net.sf.freecol.server.ai.mission.DefendSettlementMission.getXMLTagName(),3
net.sf.freecol.server.ai.mission.DefendSettlementMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.DefendSettlementMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.DefendSettlementMission.invalidReason(),3
"net.sf.freecol.server.ai.mission.DefendSettlementMission.invalidSettlementReason(AIUnit, Settlement)",7
net.sf.freecol.server.ai.mission.DefendSettlementMission.invalidUnitReason(AIUnit),7
net.sf.freecol.server.ai.mission.DefendSettlementMission.readAttributes(FreeColXMLReader),3
"net.sf.freecol.server.ai.mission.DefendSettlementMission.scorePath(AIUnit, PathNode)",7
net.sf.freecol.server.ai.mission.DefendSettlementMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.DefendSettlementMission.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.mission.EscortUnitMission.EscortUnitMission(AIMain, AIUnit, FreeColXMLReader)",10
"net.sf.freecol.server.ai.mission.EscortUnitMission.EscortUnitMission(AIMain, AIUnit, Unit)",7
net.sf.freecol.server.ai.mission.EscortUnitMission.doMission(LogBuilder),3
net.sf.freecol.server.ai.mission.EscortUnitMission.findTarget(),3
net.sf.freecol.server.ai.mission.EscortUnitMission.getBaseTransportPriority(),3
net.sf.freecol.server.ai.mission.EscortUnitMission.getTarget(),3
net.sf.freecol.server.ai.mission.EscortUnitMission.getTransportDestination(),3
net.sf.freecol.server.ai.mission.EscortUnitMission.getXMLTagName(),3
net.sf.freecol.server.ai.mission.EscortUnitMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.EscortUnitMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.EscortUnitMission.invalidReason(),3
"net.sf.freecol.server.ai.mission.EscortUnitMission.invalidTargetReason(AIUnit, Unit)",9
net.sf.freecol.server.ai.mission.EscortUnitMission.invalidUnitReason(AIUnit),7
net.sf.freecol.server.ai.mission.EscortUnitMission.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.mission.EscortUnitMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.EscortUnitMission.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.mission.IdleAtSettlementMission.IdleAtSettlementMission(AIMain, AIUnit)",6
"net.sf.freecol.server.ai.mission.IdleAtSettlementMission.IdleAtSettlementMission(AIMain, AIUnit, FreeColXMLReader)",10
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.doMission(LogBuilder),3
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.findTarget(),3
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.getBaseTransportPriority(),3
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.getTarget(),3
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.getXMLTagName(),3
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.invalidReason(),3
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.isOneTime(),3
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.isSafe(),5
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.setTarget(Location),3
"net.sf.freecol.server.ai.mission.IndianBringGiftMission.IndianBringGiftMission(AIMain, AIUnit, Colony)",7
"net.sf.freecol.server.ai.mission.IndianBringGiftMission.IndianBringGiftMission(AIMain, AIUnit, FreeColXMLReader)",9
net.sf.freecol.server.ai.mission.IndianBringGiftMission.doMission(LogBuilder),3
net.sf.freecol.server.ai.mission.IndianBringGiftMission.findTarget(),3
net.sf.freecol.server.ai.mission.IndianBringGiftMission.getColony(),0
net.sf.freecol.server.ai.mission.IndianBringGiftMission.getTarget(),3
net.sf.freecol.server.ai.mission.IndianBringGiftMission.getTransportDestination(),3
net.sf.freecol.server.ai.mission.IndianBringGiftMission.getXMLTagName(),3
net.sf.freecol.server.ai.mission.IndianBringGiftMission.hasGift(),5
"net.sf.freecol.server.ai.mission.IndianBringGiftMission.invalidColonyReason(AIUnit, Colony)",9
net.sf.freecol.server.ai.mission.IndianBringGiftMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.IndianBringGiftMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.IndianBringGiftMission.invalidReason(),3
net.sf.freecol.server.ai.mission.IndianBringGiftMission.invalidUnitReason(AIUnit),7
net.sf.freecol.server.ai.mission.IndianBringGiftMission.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.mission.IndianBringGiftMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.IndianBringGiftMission.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.mission.IndianDemandMission.IndianDemandMission(AIMain, AIUnit, Colony)",7
"net.sf.freecol.server.ai.mission.IndianDemandMission.IndianDemandMission(AIMain, AIUnit, FreeColXMLReader)",9
"net.sf.freecol.server.ai.mission.IndianDemandMission.capAmount(int, int)",0
net.sf.freecol.server.ai.mission.IndianDemandMission.doMission(LogBuilder),3
net.sf.freecol.server.ai.mission.IndianDemandMission.findTarget(),3
net.sf.freecol.server.ai.mission.IndianDemandMission.getHome(AIUnit),0
net.sf.freecol.server.ai.mission.IndianDemandMission.getTarget(),3
net.sf.freecol.server.ai.mission.IndianDemandMission.getTransportDestination(),3
net.sf.freecol.server.ai.mission.IndianDemandMission.getXMLTagName(),3
net.sf.freecol.server.ai.mission.IndianDemandMission.hasMissionTribute(AIUnit),6
net.sf.freecol.server.ai.mission.IndianDemandMission.hasTribute(),5
"net.sf.freecol.server.ai.mission.IndianDemandMission.invalidColonyReason(AIUnit, Colony)",9
net.sf.freecol.server.ai.mission.IndianDemandMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.IndianDemandMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.IndianDemandMission.invalidReason(),3
net.sf.freecol.server.ai.mission.IndianDemandMission.invalidUnitReason(AIUnit),7
net.sf.freecol.server.ai.mission.IndianDemandMission.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.mission.IndianDemandMission.selectGoods(Colony),6
net.sf.freecol.server.ai.mission.IndianDemandMission.setSucceeded(boolean),5
net.sf.freecol.server.ai.mission.IndianDemandMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.IndianDemandMission.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.mission.Mission.Mission(AIMain, AIUnit)",9
net.sf.freecol.server.ai.mission.Mission.dispose(),3
"net.sf.freecol.server.ai.mission.Mission.findCircleTarget(AIUnit, GoalDecider, int, boolean)",12
"net.sf.freecol.server.ai.mission.Mission.followMapPath(PathNode, LogBuilder)",8
net.sf.freecol.server.ai.mission.Mission.getAIPlayer(),5
net.sf.freecol.server.ai.mission.Mission.getAIRandom(),5
net.sf.freecol.server.ai.mission.Mission.getAIUnit(),5
net.sf.freecol.server.ai.mission.Mission.getBaseTransportPriority(),5
net.sf.freecol.server.ai.mission.Mission.getBestSettlement(Player),8
net.sf.freecol.server.ai.mission.Mission.getEuropeanAIPlayer(),5
net.sf.freecol.server.ai.mission.Mission.getPlayer(),5
net.sf.freecol.server.ai.mission.Mission.getTransportDestination(),11
net.sf.freecol.server.ai.mission.Mission.getUnit(),5
net.sf.freecol.server.ai.mission.Mission.invalidAIUnitReason(AIUnit),6
"net.sf.freecol.server.ai.mission.Mission.invalidAttackReason(AIUnit, Player)",7
net.sf.freecol.server.ai.mission.Mission.invalidMissionReason(AIUnit),16
"net.sf.freecol.server.ai.mission.Mission.invalidMissionReason(AIUnit, Location)",16
net.sf.freecol.server.ai.mission.Mission.invalidNewMissionReason(AIUnit),8
net.sf.freecol.server.ai.mission.Mission.invalidTargetReason(Location),6
"net.sf.freecol.server.ai.mission.Mission.invalidTargetReason(Location, Player)",8
net.sf.freecol.server.ai.mission.Mission.invalidTransportableReason(TransportableAIObject),7
net.sf.freecol.server.ai.mission.Mission.invalidUnitReason(Unit),6
net.sf.freecol.server.ai.mission.Mission.isOneTime(),9
net.sf.freecol.server.ai.mission.Mission.isTargetReason(String),6
net.sf.freecol.server.ai.mission.Mission.isValid(),5
net.sf.freecol.server.ai.mission.Mission.lbAt(LogBuilder),6
"net.sf.freecol.server.ai.mission.Mission.lbAttack(LogBuilder, Location)",8
net.sf.freecol.server.ai.mission.Mission.lbDodge(LogBuilder),6
"net.sf.freecol.server.ai.mission.Mission.lbDone(LogBuilder, boolean, Object...)",10
"net.sf.freecol.server.ai.mission.Mission.lbDrop(LogBuilder, Object...)",8
"net.sf.freecol.server.ai.mission.Mission.lbFail(LogBuilder, boolean, Object...)",10
"net.sf.freecol.server.ai.mission.Mission.lbMove(LogBuilder, MoveType)",7
net.sf.freecol.server.ai.mission.Mission.lbRetarget(LogBuilder),6
"net.sf.freecol.server.ai.mission.Mission.lbWait(LogBuilder, Object...)",7
"net.sf.freecol.server.ai.mission.Mission.moveRandomly(String, Direction)",7
net.sf.freecol.server.ai.mission.Mission.moveRandomlyTurn(String),5
net.sf.freecol.server.ai.mission.Mission.readAttributes(FreeColXMLReader),3
"net.sf.freecol.server.ai.mission.Mission.resolveBlockage(AIUnit, Location)",8
"net.sf.freecol.server.ai.mission.Mission.retargetMission(String, LogBuilder)",8
net.sf.freecol.server.ai.mission.Mission.setInitialized(),3
net.sf.freecol.server.ai.mission.Mission.toString(),3
net.sf.freecol.server.ai.mission.Mission.toXML(FreeColXMLWriter),3
"net.sf.freecol.server.ai.mission.Mission.travelToTarget(Location, CostDecider, LogBuilder)",35
net.sf.freecol.server.ai.mission.Mission.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.mission.MissionaryMission.MissionaryMission(AIMain, AIUnit, FreeColXMLReader)",10
"net.sf.freecol.server.ai.mission.MissionaryMission.MissionaryMission(AIMain, AIUnit, Location)",7
net.sf.freecol.server.ai.mission.MissionaryMission.doMission(LogBuilder),3
"net.sf.freecol.server.ai.mission.MissionaryMission.extractTarget(AIUnit, PathNode)",8
"net.sf.freecol.server.ai.mission.MissionaryMission.findMissionTarget(AIUnit, int, boolean)",9
net.sf.freecol.server.ai.mission.MissionaryMission.findTarget(),3
"net.sf.freecol.server.ai.mission.MissionaryMission.findTargetPath(AIUnit, int, boolean)",8
net.sf.freecol.server.ai.mission.MissionaryMission.getBaseTransportPriority(),3
"net.sf.freecol.server.ai.mission.MissionaryMission.getGoalDecider(AIUnit, boolean)",7
net.sf.freecol.server.ai.mission.MissionaryMission.getTarget(),3
net.sf.freecol.server.ai.mission.MissionaryMission.getXMLTagName(),3
"net.sf.freecol.server.ai.mission.MissionaryMission.invalidColonyReason(AIUnit, Colony)",7
"net.sf.freecol.server.ai.mission.MissionaryMission.invalidIndianSettlementReason(AIUnit, IndianSettlement)",8
net.sf.freecol.server.ai.mission.MissionaryMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.MissionaryMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.MissionaryMission.invalidReason(),3
net.sf.freecol.server.ai.mission.MissionaryMission.invalidUnitReason(AIUnit),6
net.sf.freecol.server.ai.mission.MissionaryMission.prepare(AIUnit),7
net.sf.freecol.server.ai.mission.MissionaryMission.readAttributes(FreeColXMLReader),3
"net.sf.freecol.server.ai.mission.MissionaryMission.scorePath(AIUnit, PathNode)",8
net.sf.freecol.server.ai.mission.MissionaryMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.MissionaryMission.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.mission.PioneeringMission.PioneeringMission(AIMain, AIUnit, FreeColXMLReader)",10
"net.sf.freecol.server.ai.mission.PioneeringMission.PioneeringMission(AIMain, AIUnit, Location)",10
net.sf.freecol.server.ai.mission.PioneeringMission.abandonTileImprovementPlan(),3
net.sf.freecol.server.ai.mission.PioneeringMission.dispose(),3
net.sf.freecol.server.ai.mission.PioneeringMission.doMission(LogBuilder),3
"net.sf.freecol.server.ai.mission.PioneeringMission.extractTarget(AIUnit, PathNode)",7
"net.sf.freecol.server.ai.mission.PioneeringMission.findMissionTarget(AIUnit, int, boolean)",9
net.sf.freecol.server.ai.mission.PioneeringMission.findTarget(),3
"net.sf.freecol.server.ai.mission.PioneeringMission.findTargetPath(AIUnit, int, boolean)",8
net.sf.freecol.server.ai.mission.PioneeringMission.getBaseTransportPriority(),3
"net.sf.freecol.server.ai.mission.PioneeringMission.getBestMissionPlan(AIUnit, Tile)",9
net.sf.freecol.server.ai.mission.PioneeringMission.getBestPioneeringColony(AIUnit),6
net.sf.freecol.server.ai.mission.PioneeringMission.getBestPlan(Tile),6
"net.sf.freecol.server.ai.mission.PioneeringMission.getGoalDecider(AIUnit, boolean)",8
"net.sf.freecol.server.ai.mission.PioneeringMission.getPlan(AIUnit, Tile)",7
net.sf.freecol.server.ai.mission.PioneeringMission.getTarget(),3
net.sf.freecol.server.ai.mission.PioneeringMission.getTileImprovementPlan(),5
net.sf.freecol.server.ai.mission.PioneeringMission.getXMLTagName(),3
net.sf.freecol.server.ai.mission.PioneeringMission.hasMissionTools(AIUnit),6
net.sf.freecol.server.ai.mission.PioneeringMission.hasTools(),5
"net.sf.freecol.server.ai.mission.PioneeringMission.invalidColonyReason(AIUnit, Colony)",8
net.sf.freecol.server.ai.mission.PioneeringMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.PioneeringMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.PioneeringMission.invalidReason(),3
"net.sf.freecol.server.ai.mission.PioneeringMission.invalidTileReason(AIUnit, Tile)",8
net.sf.freecol.server.ai.mission.PioneeringMission.invalidUnitReason(AIUnit),7
"net.sf.freecol.server.ai.mission.PioneeringMission.lbFail(LogBuilder, boolean, Object...)",3
net.sf.freecol.server.ai.mission.PioneeringMission.prepare(AIUnit),7
net.sf.freecol.server.ai.mission.PioneeringMission.readAttributes(FreeColXMLReader),3
"net.sf.freecol.server.ai.mission.PioneeringMission.scorePath(AIUnit, PathNode)",8
net.sf.freecol.server.ai.mission.PioneeringMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.PioneeringMission.setTileImprovementPlan(TileImprovementPlan),6
net.sf.freecol.server.ai.mission.PioneeringMission.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.server.ai.mission.PioneeringMissionTest.tearDown(),0
net.sf.freecol.server.ai.mission.PioneeringMissionTest.testImprovementNoLongerValid(),0
"net.sf.freecol.server.ai.mission.PrivateerMission.PrivateerMission(AIMain, AIUnit, FreeColXMLReader)",10
"net.sf.freecol.server.ai.mission.PrivateerMission.PrivateerMission(AIMain, AIUnit, Location)",7
net.sf.freecol.server.ai.mission.PrivateerMission.doMission(LogBuilder),3
"net.sf.freecol.server.ai.mission.PrivateerMission.extractTarget(AIUnit, PathNode)",8
"net.sf.freecol.server.ai.mission.PrivateerMission.findMissionTarget(AIUnit, int, boolean)",8
net.sf.freecol.server.ai.mission.PrivateerMission.findTarget(),3
"net.sf.freecol.server.ai.mission.PrivateerMission.findTargetPath(AIUnit, int, boolean)",8
"net.sf.freecol.server.ai.mission.PrivateerMission.getGoalDecider(AIUnit, boolean)",7
net.sf.freecol.server.ai.mission.PrivateerMission.getTarget(),3
net.sf.freecol.server.ai.mission.PrivateerMission.getTransportDestination(),3
net.sf.freecol.server.ai.mission.PrivateerMission.getXMLTagName(),3
"net.sf.freecol.server.ai.mission.PrivateerMission.invalidAttackReason(AIUnit, Unit)",8
net.sf.freecol.server.ai.mission.PrivateerMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.PrivateerMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.PrivateerMission.invalidReason(),3
"net.sf.freecol.server.ai.mission.PrivateerMission.invalidSettlementReason(AIUnit, Settlement)",8
net.sf.freecol.server.ai.mission.PrivateerMission.invalidUnitReason(AIUnit),7
net.sf.freecol.server.ai.mission.PrivateerMission.readAttributes(FreeColXMLReader),3
"net.sf.freecol.server.ai.mission.PrivateerMission.scorePath(AIUnit, PathNode)",7
"net.sf.freecol.server.ai.mission.PrivateerMission.scoreUnit(AIUnit, Unit)",7
net.sf.freecol.server.ai.mission.PrivateerMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.PrivateerMission.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.server.ai.mission.PrivateerMissionTest.setupPrivateerTestGame(),0
net.sf.freecol.server.ai.mission.PrivateerMissionTest.setupPrivateerTestMap(Game),0
net.sf.freecol.server.ai.mission.PrivateerMissionTest.tearDown(),0
net.sf.freecol.server.ai.mission.PrivateerMissionTest.testIsMissionValid(),3
"net.sf.freecol.server.ai.mission.ScoutingMission.ScoutingMission(AIMain, AIUnit, FreeColXMLReader)",9
"net.sf.freecol.server.ai.mission.ScoutingMission.ScoutingMission(AIMain, AIUnit, Location)",7
net.sf.freecol.server.ai.mission.ScoutingMission.canScoutNatives(AIUnit),6
net.sf.freecol.server.ai.mission.ScoutingMission.doMission(LogBuilder),3
"net.sf.freecol.server.ai.mission.ScoutingMission.extractTarget(AIUnit, PathNode)",8
"net.sf.freecol.server.ai.mission.ScoutingMission.findMissionTarget(AIUnit, int, boolean)",9
net.sf.freecol.server.ai.mission.ScoutingMission.findTarget(),3
"net.sf.freecol.server.ai.mission.ScoutingMission.findTargetPath(AIUnit, int, boolean)",8
net.sf.freecol.server.ai.mission.ScoutingMission.getBaseTransportPriority(),3
"net.sf.freecol.server.ai.mission.ScoutingMission.getGoalDecider(AIUnit, boolean)",8
net.sf.freecol.server.ai.mission.ScoutingMission.getTarget(),3
net.sf.freecol.server.ai.mission.ScoutingMission.getXMLTagName(),3
"net.sf.freecol.server.ai.mission.ScoutingMission.invalidColonyReason(AIUnit, Colony)",7
"net.sf.freecol.server.ai.mission.ScoutingMission.invalidIndianSettlementReason(AIUnit, IndianSettlement)",7
net.sf.freecol.server.ai.mission.ScoutingMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.ScoutingMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.ScoutingMission.invalidReason(),3
"net.sf.freecol.server.ai.mission.ScoutingMission.invalidSettlementReason(AIUnit, Settlement)",8
"net.sf.freecol.server.ai.mission.ScoutingMission.invalidTileReason(AIUnit, Tile)",7
net.sf.freecol.server.ai.mission.ScoutingMission.invalidUnitReason(AIUnit),7
net.sf.freecol.server.ai.mission.ScoutingMission.prepare(AIUnit),8
net.sf.freecol.server.ai.mission.ScoutingMission.readAttributes(FreeColXMLReader),3
"net.sf.freecol.server.ai.mission.ScoutingMission.scorePath(AIUnit, PathNode)",8
net.sf.freecol.server.ai.mission.ScoutingMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.ScoutingMission.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.server.ai.mission.ScoutingMissionTest.tearDown(),0
net.sf.freecol.server.ai.mission.ScoutingMissionTest.testHorsesLost(),0
"net.sf.freecol.server.ai.mission.TransportMission.TransportMission(AIMain, AIUnit)",6
"net.sf.freecol.server.ai.mission.TransportMission.TransportMission(AIMain, AIUnit, FreeColXMLReader)",9
"net.sf.freecol.server.ai.mission.TransportMission.addCargo(Cargo, int, LogBuilder)",8
net.sf.freecol.server.ai.mission.TransportMission.checkCargoes(LogBuilder),8
net.sf.freecol.server.ai.mission.TransportMission.clearCargoes(),5
net.sf.freecol.server.ai.mission.TransportMission.destinationCapacity(),6
net.sf.freecol.server.ai.mission.TransportMission.destinationCount(),5
net.sf.freecol.server.ai.mission.TransportMission.dispose(),3
net.sf.freecol.server.ai.mission.TransportMission.doMission(LogBuilder),3
net.sf.freecol.server.ai.mission.TransportMission.doTransport(LogBuilder),6
net.sf.freecol.server.ai.mission.TransportMission.dropTransportable(TransportableAIObject),5
"net.sf.freecol.server.ai.mission.TransportMission.dumpCargo(Cargo, LogBuilder)",8
"net.sf.freecol.server.ai.mission.TransportMission.dumpTransportable(TransportableAIObject, LogBuilder)",8
net.sf.freecol.server.ai.mission.TransportMission.findTarget(),3
"net.sf.freecol.server.ai.mission.TransportMission.forceCollection(AIUnit, LogBuilder)",9
net.sf.freecol.server.ai.mission.TransportMission.getBestCargo(Unit),7
net.sf.freecol.server.ai.mission.TransportMission.getTarget(),3
net.sf.freecol.server.ai.mission.TransportMission.getTransportDestination(),3
net.sf.freecol.server.ai.mission.TransportMission.getTransportTarget(TransportableAIObject),9
net.sf.freecol.server.ai.mission.TransportMission.getTransportTurns(TransportableAIObject),10
net.sf.freecol.server.ai.mission.TransportMission.getXMLTagName(),3
net.sf.freecol.server.ai.mission.TransportMission.invalidCargoReason(Cargo),12
net.sf.freecol.server.ai.mission.TransportMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.TransportMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.TransportMission.invalidReason(),3
net.sf.freecol.server.ai.mission.TransportMission.invalidUnitReason(AIUnit),7
net.sf.freecol.server.ai.mission.TransportMission.isCarrying(TransportableAIObject),7
net.sf.freecol.server.ai.mission.TransportMission.isEmpty(),5
net.sf.freecol.server.ai.mission.TransportMission.isTransporting(TransportableAIObject),6
"net.sf.freecol.server.ai.mission.TransportMission.makeCargo(TransportableAIObject, LogBuilder)",13
net.sf.freecol.server.ai.mission.TransportMission.optimizeCargoes(LogBuilder),9
"net.sf.freecol.server.ai.mission.TransportMission.queueCargo(Cargo, boolean, LogBuilder)",13
net.sf.freecol.server.ai.mission.TransportMission.queueEasilyTransportedCargo(Unit),9
"net.sf.freecol.server.ai.mission.TransportMission.queueTransportable(TransportableAIObject, boolean, LogBuilder)",10
net.sf.freecol.server.ai.mission.TransportMission.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.mission.TransportMission.readChild(FreeColXMLReader),3
net.sf.freecol.server.ai.mission.TransportMission.readChildren(FreeColXMLReader),3
net.sf.freecol.server.ai.mission.TransportMission.removeCargo(Cargo),5
net.sf.freecol.server.ai.mission.TransportMission.removeTransportable(TransportableAIObject),7
"net.sf.freecol.server.ai.mission.TransportMission.requeueCargo(Cargo, LogBuilder)",7
"net.sf.freecol.server.ai.mission.TransportMission.requeueTransportable(TransportableAIObject, LogBuilder)",7
"net.sf.freecol.server.ai.mission.TransportMission.scoreCargoOrder(Location, List<Cargo>)",14
net.sf.freecol.server.ai.mission.TransportMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.TransportMission.shouldAttack(Unit),9
net.sf.freecol.server.ai.mission.TransportMission.spaceAvailable(Cargo),6
net.sf.freecol.server.ai.mission.TransportMission.spaceAvailable(TransportableAIObject),6
"net.sf.freecol.server.ai.mission.TransportMission.suppressEuropeanTrade(GoodsType, LogBuilder)",7
"net.sf.freecol.server.ai.mission.TransportMission.tAdd(Cargo, int)",7
net.sf.freecol.server.ai.mission.TransportMission.tClear(),5
net.sf.freecol.server.ai.mission.TransportMission.tCopy(),5
net.sf.freecol.server.ai.mission.TransportMission.tFind(TransportableAIObject),7
net.sf.freecol.server.ai.mission.TransportMission.tFirst(),5
net.sf.freecol.server.ai.mission.TransportMission.tRemove(Cargo),6
net.sf.freecol.server.ai.mission.TransportMission.tRetarget(),3
"net.sf.freecol.server.ai.mission.TransportMission.tSet(List<Cargo>, boolean)",7
net.sf.freecol.server.ai.mission.TransportMission.tSize(),5
net.sf.freecol.server.ai.mission.TransportMission.tSpace(),4
net.sf.freecol.server.ai.mission.TransportMission.takeTransportable(TransportableAIObject),6
net.sf.freecol.server.ai.mission.TransportMission.toFullString(),5
"net.sf.freecol.server.ai.mission.TransportMission.tryCargo(Cargo, LogBuilder)",12
net.sf.freecol.server.ai.mission.TransportMission.unwrapCargoes(List<Cargo>),6
net.sf.freecol.server.ai.mission.TransportMission.wrapCargoes(),6
net.sf.freecol.server.ai.mission.TransportMission.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.server.ai.mission.TransportMission.writeChildren(FreeColXMLWriter),3
net.sf.freecol.server.ai.mission.TransportMissionTest.tearDown(),0
net.sf.freecol.server.ai.mission.TransportMissionTest.testGetDefaultDestination(),0
net.sf.freecol.server.ai.mission.TransportMissionTest.testGetNextStopAlreadyAtDestination(),0
net.sf.freecol.server.ai.mission.TransportMissionTest.testGetNextStopIsColony(),0
net.sf.freecol.server.ai.mission.TransportMissionTest.testGetNextStopIsEurope(),0
net.sf.freecol.server.ai.mission.TransportMissionTest.testTransportMissionInvalidAfterCombatLost(),0
net.sf.freecol.server.ai.mission.TransportMissionTest.testWagonTrain(),0
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.UnitSeekAndDestroyMission(AIMain, AIUnit, FreeColXMLReader)",10
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.UnitSeekAndDestroyMission(AIMain, AIUnit, Location)",8
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.doMission(LogBuilder),3
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.extractTarget(AIUnit, PathNode)",7
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.findMissionTarget(AIUnit, int, boolean, boolean)",8
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.findTarget(),3
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.findTargetPath(AIUnit, int, boolean, boolean)",8
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.getBaseTransportPriority(),3
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.getGoalDecider(AIUnit, boolean, boolean)",8
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.getTarget(),3
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.getTransportDestination(),3
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.getXMLTagName(),3
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidReason(),3
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidSettlementReason(AIUnit, Settlement)",9
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidTargetReason(AIUnit, Unit)",9
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidUnitReason(AIUnit),7
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.readAttributes(FreeColXMLReader),3
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.scorePath(AIUnit, PathNode, boolean, boolean)",8
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.scoreSettlementPath(AIUnit, PathNode, Settlement)",14
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.scoreUnitPath(AIUnit, PathNode, Unit)",8
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMissionTest.tearDown(),0
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMissionTest.testCapturedUnitsLoseMission(),0
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMissionTest.testDoNotPursueUnitsInColonies(),0
"net.sf.freecol.server.ai.mission.UnitWanderHostileMission.UnitWanderHostileMission(AIMain, AIUnit)",6
"net.sf.freecol.server.ai.mission.UnitWanderHostileMission.UnitWanderHostileMission(AIMain, AIUnit, FreeColXMLReader)",10
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.doMission(LogBuilder),3
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.findTarget(),3
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.getTarget(),3
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.getXMLTagName(),3
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.invalidMissionReason(AIUnit),6
"net.sf.freecol.server.ai.mission.UnitWanderHostileMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.invalidReason(),3
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.invalidUnitReason(AIUnit),7
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.isOneTime(),3
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.setTarget(Location),3
"net.sf.freecol.server.ai.mission.UnitWanderMission.UnitWanderMission(AIMain, AIUnit)",6
"net.sf.freecol.server.ai.mission.UnitWanderMission.UnitWanderMission(AIMain, AIUnit, FreeColXMLReader)",10
net.sf.freecol.server.ai.mission.UnitWanderMission.doMission(LogBuilder),3
net.sf.freecol.server.ai.mission.UnitWanderMission.findTarget(),3
net.sf.freecol.server.ai.mission.UnitWanderMission.getTarget(),3
net.sf.freecol.server.ai.mission.UnitWanderMission.getXMLTagName(),3
net.sf.freecol.server.ai.mission.UnitWanderMission.invalidReason(),3
net.sf.freecol.server.ai.mission.UnitWanderMission.isOneTime(),3
net.sf.freecol.server.ai.mission.UnitWanderMission.setTarget(Location),3
"net.sf.freecol.server.ai.mission.WishRealizationMission.WishRealizationMission(AIMain, AIUnit, FreeColXMLReader)",10
"net.sf.freecol.server.ai.mission.WishRealizationMission.WishRealizationMission(AIMain, AIUnit, Wish)",8
net.sf.freecol.server.ai.mission.WishRealizationMission.dispose(),3
net.sf.freecol.server.ai.mission.WishRealizationMission.doMission(LogBuilder),3
net.sf.freecol.server.ai.mission.WishRealizationMission.findTarget(),3
net.sf.freecol.server.ai.mission.WishRealizationMission.getBaseTransportPriority(),3
net.sf.freecol.server.ai.mission.WishRealizationMission.getTarget(),3
net.sf.freecol.server.ai.mission.WishRealizationMission.getWish(),5
net.sf.freecol.server.ai.mission.WishRealizationMission.getXMLTagName(),3
"net.sf.freecol.server.ai.mission.WishRealizationMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.WishRealizationMission.invalidReason(),3
net.sf.freecol.server.ai.mission.WishRealizationMission.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.mission.WishRealizationMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.WishRealizationMission.writeAttributes(FreeColXMLWriter),3
"net.sf.freecol.server.ai.mission.WorkInsideColonyMission.WorkInsideColonyMission(AIMain, AIUnit, AIColony)",8
"net.sf.freecol.server.ai.mission.WorkInsideColonyMission.WorkInsideColonyMission(AIMain, AIUnit, FreeColXMLReader)",10
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.doMission(LogBuilder),3
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.findTarget(),3
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.getAIColony(),5
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.getBaseTransportPriority(),3
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.getTarget(),3
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.getXMLTagName(),3
"net.sf.freecol.server.ai.mission.WorkInsideColonyMission.invalidMissionReason(AIUnit, Location)",7
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.invalidReason(),3
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.readAttributes(FreeColXMLReader),3
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.setTarget(Location),3
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.writeAttributes(FreeColXMLWriter),3
net.sf.freecol.server.control.AllTests.suite(),0
net.sf.freecol.server.control.Controller.Controller(FreeColServer),5
net.sf.freecol.server.control.Controller.shutdown(),3
net.sf.freecol.server.control.FreeColServerHolder.FreeColServerHolder(FreeColServer),5
net.sf.freecol.server.control.FreeColServerHolder.getFreeColServer(),5
net.sf.freecol.server.control.FreeColServerHolder.getGame(),5
net.sf.freecol.server.control.InGameController.InGameController(FreeColServer),5
"net.sf.freecol.server.control.InGameController.abandonSettlement(ServerPlayer, Settlement)",7
"net.sf.freecol.server.control.InGameController.addFoundingFather(Player, FoundingFather)",7
"net.sf.freecol.server.control.InGameController.askLearnSkill(ServerPlayer, ServerUnit, IndianSettlement)",8
"net.sf.freecol.server.control.InGameController.assignTeacher(ServerPlayer, Unit, Unit)",8
"net.sf.freecol.server.control.InGameController.assignTradeRoute(ServerPlayer, Unit, TradeRoute)",8
"net.sf.freecol.server.control.InGameController.buildSettlement(ServerPlayer, Unit, String)",10
"net.sf.freecol.server.control.InGameController.buyGoods(ServerPlayer, GoodsType, int, Unit)",9
"net.sf.freecol.server.control.InGameController.cashInTreasureTrain(ServerPlayer, Unit)",7
"net.sf.freecol.server.control.InGameController.changeStance(Player, Stance, Player, boolean)",9
"net.sf.freecol.server.control.InGameController.changeState(ServerPlayer, Unit, UnitState)",8
"net.sf.freecol.server.control.InGameController.changeWorkImprovementType(ServerPlayer, Unit, TileImprovementType)",8
"net.sf.freecol.server.control.InGameController.changeWorkType(ServerPlayer, Unit, GoodsType)",8
"net.sf.freecol.server.control.InGameController.chat(ServerPlayer, String, boolean)",8
"net.sf.freecol.server.control.InGameController.chooseFoundingFather(ServerPlayer, FoundingFather)",7
"net.sf.freecol.server.control.InGameController.claimLand(ServerPlayer, Tile, Settlement, int)",10
"net.sf.freecol.server.control.InGameController.clearSpeciality(ServerPlayer, Unit)",10
"net.sf.freecol.server.control.InGameController.combat(ServerPlayer, FreeColGameObject, FreeColGameObject, List<CombatEffectType>)",9
net.sf.freecol.server.control.InGameController.continuePlaying(ServerPlayer),6
net.sf.freecol.server.control.InGameController.createREFPlayer(ServerPlayer),11
"net.sf.freecol.server.control.InGameController.csBuy(ServerUnit, Goods, int, ServerIndianSettlement, ChangeSet)",9
"net.sf.freecol.server.control.InGameController.csGift(ServerUnit, Goods, int, ServerIndianSettlement, ChangeSet)",9
"net.sf.freecol.server.control.InGameController.csGiveIndependence(ServerPlayer, Player, ChangeSet)",9
"net.sf.freecol.server.control.InGameController.csLaunchREF(ServerPlayer, boolean, ChangeSet)",7
"net.sf.freecol.server.control.InGameController.csMonarchAction(ServerPlayer, MonarchAction, ChangeSet)",11
"net.sf.freecol.server.control.InGameController.csSell(ServerUnit, Goods, int, ServerIndianSettlement, ChangeSet)",9
"net.sf.freecol.server.control.InGameController.debugApplyDisaster(ServerColony, Disaster)",7
"net.sf.freecol.server.control.InGameController.debugChangeOwner(ServerColony, ServerPlayer)",6
"net.sf.freecol.server.control.InGameController.debugChangeOwner(ServerUnit, ServerPlayer)",6
"net.sf.freecol.server.control.InGameController.declareIndependence(ServerPlayer, String, String)",8
"net.sf.freecol.server.control.InGameController.declineMounds(ServerPlayer, Tile)",7
"net.sf.freecol.server.control.InGameController.deleteTradeRoute(ServerPlayer, TradeRoute)",8
"net.sf.freecol.server.control.InGameController.deliverGiftToSettlement(ServerPlayer, ServerUnit, Settlement, Goods)",10
"net.sf.freecol.server.control.InGameController.demandTribute(ServerPlayer, ServerUnit, IndianSettlement)",10
"net.sf.freecol.server.control.InGameController.denounceMission(ServerPlayer, ServerUnit, IndianSettlement)",9
"net.sf.freecol.server.control.InGameController.diplomacy(ServerPlayer, Colony, Unit, DiplomaticTrade)",9
"net.sf.freecol.server.control.InGameController.diplomacy(ServerPlayer, Unit, Colony, DiplomaticTrade)",9
"net.sf.freecol.server.control.InGameController.disbandUnit(ServerPlayer, Unit)",7
net.sf.freecol.server.control.InGameController.disconnect(ServerPlayer),6
"net.sf.freecol.server.control.InGameController.disembarkUnit(ServerPlayer, ServerUnit)",8
"net.sf.freecol.server.control.InGameController.embarkUnit(ServerPlayer, ServerUnit, Unit)",9
"net.sf.freecol.server.control.InGameController.emigrate(ServerPlayer, int, MigrationType)",8
net.sf.freecol.server.control.InGameController.endTurn(ServerPlayer),8
net.sf.freecol.server.control.InGameController.enterRevengeMode(ServerPlayer),6
"net.sf.freecol.server.control.InGameController.equipForRole(ServerPlayer, Unit, Role, int)",12
"net.sf.freecol.server.control.InGameController.establishMission(ServerPlayer, ServerUnit, IndianSettlement)",8
"net.sf.freecol.server.control.InGameController.europeanFirstContact(ServerPlayer, Unit, Colony, Unit, Colony, DiplomaticTrade)",11
net.sf.freecol.server.control.InGameController.gameState(),5
"net.sf.freecol.server.control.InGameController.getHighScores(ServerPlayer, String)",7
net.sf.freecol.server.control.InGameController.getSkippedTurns(),5
net.sf.freecol.server.control.InGameController.getTimeout(),5
"net.sf.freecol.server.control.InGameController.incite(ServerPlayer, ServerUnit, IndianSettlement, Player, int)",10
"net.sf.freecol.server.control.InGameController.indianDemand(ServerPlayer, Unit, Colony, GoodsType, int, IndianDemandAction)",12
"net.sf.freecol.server.control.InGameController.joinColony(ServerPlayer, Unit, Colony)",8
"net.sf.freecol.server.control.InGameController.learnFromIndianSettlement(ServerPlayer, ServerUnit, IndianSettlement)",8
"net.sf.freecol.server.control.InGameController.loadGoods(ServerPlayer, Location, GoodsType, int, Unit)",10
"net.sf.freecol.server.control.InGameController.lootCargo(ServerPlayer, Unit, String, List<Goods>)",13
"net.sf.freecol.server.control.InGameController.monarchAction(ServerPlayer, MonarchAction, boolean)",8
"net.sf.freecol.server.control.InGameController.move(ServerPlayer, ServerUnit, Tile)",8
"net.sf.freecol.server.control.InGameController.moveTo(ServerPlayer, Unit, Location)",8
"net.sf.freecol.server.control.InGameController.nationSummary(ServerPlayer, Player)",7
"net.sf.freecol.server.control.InGameController.nativeFirstContact(ServerPlayer, Player, Tile, boolean)",13
"net.sf.freecol.server.control.InGameController.nativeGift(ServerPlayer, Unit, Colony)",8
"net.sf.freecol.server.control.InGameController.nativeTrade(ServerPlayer, NativeTradeAction, NativeTrade)",8
net.sf.freecol.server.control.InGameController.newTradeRoute(ServerPlayer),6
"net.sf.freecol.server.control.InGameController.payArrears(ServerPlayer, GoodsType)",7
"net.sf.freecol.server.control.InGameController.payForBuilding(ServerPlayer, Colony)",8
"net.sf.freecol.server.control.InGameController.putOutsideColony(ServerPlayer, Unit)",7
"net.sf.freecol.server.control.InGameController.rearrangeColony(ServerPlayer, Colony, List<Arrangement>)",8
"net.sf.freecol.server.control.InGameController.renameObject(ServerPlayer, Nameable, String)",8
net.sf.freecol.server.control.InGameController.retire(ServerPlayer),6
"net.sf.freecol.server.control.InGameController.scoutIndianSettlement(ServerPlayer, ServerUnit, IndianSettlement)",9
"net.sf.freecol.server.control.InGameController.scoutSpeakToChief(ServerPlayer, ServerUnit, IndianSettlement)",8
"net.sf.freecol.server.control.InGameController.sellGoods(ServerPlayer, GoodsType, int, Unit)",9
"net.sf.freecol.server.control.InGameController.setBuildQueue(ServerPlayer, Colony, List<BuildableType>)",8
"net.sf.freecol.server.control.InGameController.setCurrentStop(ServerPlayer, Unit, int)",8
"net.sf.freecol.server.control.InGameController.setDestination(ServerPlayer, Unit, Location)",8
"net.sf.freecol.server.control.InGameController.setGoodsLevels(ServerPlayer, Colony, ExportData)",8
"net.sf.freecol.server.control.InGameController.setMonarchAction(ServerPlayer, MonarchAction)",7
"net.sf.freecol.server.control.InGameController.setNewLandName(ServerPlayer, Unit, String)",8
"net.sf.freecol.server.control.InGameController.setNewRegionName(ServerPlayer, Unit, Region, String)",9
net.sf.freecol.server.control.InGameController.setRandom(Random),5
net.sf.freecol.server.control.InGameController.setSkippedTurns(int),5
"net.sf.freecol.server.control.InGameController.spySettlement(ServerPlayer, Unit, Settlement)",8
net.sf.freecol.server.control.InGameController.stepRandom(),5
"net.sf.freecol.server.control.InGameController.trainUnitInEurope(ServerPlayer, UnitType)",7
"net.sf.freecol.server.control.InGameController.unitTemplate(String, List<Unit>)",0
"net.sf.freecol.server.control.InGameController.unloadGoods(ServerPlayer, GoodsType, int, Unit)",9
"net.sf.freecol.server.control.InGameController.updateTradeRoute(ServerPlayer, TradeRoute)",8
"net.sf.freecol.server.control.InGameController.work(ServerPlayer, Unit, WorkLocation)",8
"net.sf.freecol.server.control.InGameControllerTest.setPlayersAt(Stance, Tension)",0
net.sf.freecol.server.control.InGameControllerTest.tearDown(),0
net.sf.freecol.server.control.InGameControllerTest.testAddFatherBuildingEvent(),0
net.sf.freecol.server.control.InGameControllerTest.testAddFatherUnits(),0
net.sf.freecol.server.control.InGameControllerTest.testArtilleryDemotedBySoldier(),0
net.sf.freecol.server.control.InGameControllerTest.testAtackedNavalUnitIsDamaged(),0
net.sf.freecol.server.control.InGameControllerTest.testAttackColonyWithBrave(),0
net.sf.freecol.server.control.InGameControllerTest.testAttackColonyWithVeteran(),0
net.sf.freecol.server.control.InGameControllerTest.testAttrition(),0
net.sf.freecol.server.control.InGameControllerTest.testBuildingBonus(),0
net.sf.freecol.server.control.InGameControllerTest.testCarpenterHouseNationalAdvantage(),0
net.sf.freecol.server.control.InGameControllerTest.testCashInTreasure(),0
net.sf.freecol.server.control.InGameControllerTest.testCeaseFireTreaty(),3
net.sf.freecol.server.control.InGameControllerTest.testClearSpecialty(),0
net.sf.freecol.server.control.InGameControllerTest.testColonistDemotedBySoldier(),0
net.sf.freecol.server.control.InGameControllerTest.testCreateMission(),0
net.sf.freecol.server.control.InGameControllerTest.testDeclarationOfWarFromPeace(),0
net.sf.freecol.server.control.InGameControllerTest.testDoAssignedWorkAmateurAndHardyPioneer(),3
net.sf.freecol.server.control.InGameControllerTest.testDragoonDemotedByBrave(),0
net.sf.freecol.server.control.InGameControllerTest.testDragoonDemotedBySoldier(),0
net.sf.freecol.server.control.InGameControllerTest.testDumpGoods(),0
net.sf.freecol.server.control.InGameControllerTest.testEmbark(),0
net.sf.freecol.server.control.InGameControllerTest.testEquipIndian(),0
net.sf.freecol.server.control.InGameControllerTest.testEquipIndianNotEnoughReqGoods(),0
net.sf.freecol.server.control.InGameControllerTest.testLaSalle(),0
net.sf.freecol.server.control.InGameControllerTest.testLoseColonyDefenceWithRevere(),0
net.sf.freecol.server.control.InGameControllerTest.testPeaceTreatyFromCeaseFireStance(),4
net.sf.freecol.server.control.InGameControllerTest.testPeaceTreatyFromWarStance(),4
net.sf.freecol.server.control.InGameControllerTest.testPioneerDiesNotLosesEquipment(),0
net.sf.freecol.server.control.InGameControllerTest.testPocahontas(),0
net.sf.freecol.server.control.InGameControllerTest.testPromotion(),0
net.sf.freecol.server.control.InGameControllerTest.testScoutDefeatedBySoldier(),0
net.sf.freecol.server.control.InGameControllerTest.testScoutDiesNotLosesEquipment(),0
net.sf.freecol.server.control.InGameControllerTest.testSoldierDemotedBySoldier(),0
net.sf.freecol.server.control.InGameControllerTest.testUnarmedAttack(),0
net.sf.freecol.server.control.InGameControllerTest.testUnitLosesExperienceWithWorkChange(),0
net.sf.freecol.server.control.InGameControllerTest.testUnitTypeChangeOnEnterColony(),3
net.sf.freecol.server.control.InGameControllerTest.testVeteranSoldierDemotedBySoldier(),0
net.sf.freecol.server.control.InGameControllerTest.testWarDeclarationAffectsSettlementAlarm(),0
"net.sf.freecol.server.control.InGameControllerTest.verifyTreatyResults(ServerPlayer, ServerPlayer, Stance, int)",4
"net.sf.freecol.server.control.InGameControllerTest.workLeftFor(UnitType, TileType, TileImprovementType)",0
net.sf.freecol.server.control.PreGameController.PreGameController(FreeColServer),5
"net.sf.freecol.server.control.PreGameController.ready(ServerPlayer, boolean)",7
net.sf.freecol.server.control.PreGameController.requestLaunch(ServerPlayer),6
"net.sf.freecol.server.control.PreGameController.setAvailable(ServerPlayer, Nation, NationState)",8
"net.sf.freecol.server.control.PreGameController.setColor(ServerPlayer, Nation, Color)",8
net.sf.freecol.server.control.PreGameController.setLaunching(boolean),6
"net.sf.freecol.server.control.PreGameController.setNation(ServerPlayer, Nation)",7
"net.sf.freecol.server.control.PreGameController.setNationType(ServerPlayer, NationType)",7
"net.sf.freecol.server.control.PreGameController.updateGameOptions(ServerPlayer, OptionGroup)",7
"net.sf.freecol.server.control.PreGameController.updateMapGeneratorOptions(ServerPlayer, OptionGroup)",8
net.sf.freecol.server.control.PreGameController.vacantPlayers(),5
net.sf.freecol.server.control.ServerInputHandler.ServerInputHandler(FreeColServer),5
"net.sf.freecol.server.control.ServerInputHandler.handle(Connection, Message)",3
net.sf.freecol.server.control.ServerInputHandler.read(Connection),3
net.sf.freecol.server.control.UserConnectionHandler.UserConnectionHandler(FreeColServer),5
"net.sf.freecol.server.control.UserConnectionHandler.handle(Connection, Message)",3
net.sf.freecol.server.control.UserConnectionHandler.read(Connection),3
net.sf.freecol.server.generator.AllTests.suite(),0
net.sf.freecol.server.generator.ColonizationMapLoader.ColonizationMapLoader(File),0
net.sf.freecol.server.generator.ColonizationMapLoader.getHighestLayer(),5
"net.sf.freecol.server.generator.ColonizationMapLoader.loadMap(Game, Layer)",5
net.sf.freecol.server.generator.FreeColMapLoader.FreeColMapLoader(File),8
net.sf.freecol.server.generator.FreeColMapLoader.getHighestLayer(),3
"net.sf.freecol.server.generator.FreeColMapLoader.loadMap(Game, Layer)",3
net.sf.freecol.server.generator.MapGeneratorTest.testImportMap(),3
net.sf.freecol.server.generator.MapGeneratorTest.testIndianCapital(),4
net.sf.freecol.server.generator.MapGeneratorTest.testMapGenerator(),0
net.sf.freecol.server.generator.MapGeneratorTest.testRegions(),0
net.sf.freecol.server.generator.MapGeneratorTest.testSinglePlayerOnSmallMap(),0
net.sf.freecol.server.generator.MapGeneratorTest.testWithNoIndians(),0
net.sf.freecol.server.generator.River.DirectionChange.getNewDirection(Direction),0
"net.sf.freecol.server.generator.River.River(Map, Map<Tile, River>, ServerRegion, Random)",8
"net.sf.freecol.server.generator.River.add(Tile, Direction)",6
net.sf.freecol.server.generator.River.contains(Tile),6
"net.sf.freecol.server.generator.River.createDelta(Tile, Direction, RiverSection)",0
"net.sf.freecol.server.generator.River.delta(Tile, Direction, RiverSection, Direction)",0
net.sf.freecol.server.generator.River.drawToMap(List<RiverSection>),5
net.sf.freecol.server.generator.River.flow(Tile),6
net.sf.freecol.server.generator.River.flowFromSource(Tile),6
net.sf.freecol.server.generator.River.getLastSection(),0
net.sf.freecol.server.generator.River.getLength(),5
net.sf.freecol.server.generator.River.getRegion(),5
net.sf.freecol.server.generator.River.getSections(),0
"net.sf.freecol.server.generator.River.grow(RiverSection, Tile)",6
net.sf.freecol.server.generator.River.isNextToSelf(Tile),6
net.sf.freecol.server.generator.River.isNextToWater(Tile),6
net.sf.freecol.server.generator.River.setRegion(ServerRegion),5
"net.sf.freecol.server.generator.RiverSection.RiverSection(Map<Direction, Integer>)",6
"net.sf.freecol.server.generator.RiverSection.RiverSection(Tile, Direction)",6
net.sf.freecol.server.generator.RiverSection.encodeStyle(),0
net.sf.freecol.server.generator.RiverSection.getBranch(Direction),6
net.sf.freecol.server.generator.RiverSection.getSize(),4
net.sf.freecol.server.generator.RiverSection.getTile(),5
net.sf.freecol.server.generator.RiverSection.grow(),3
"net.sf.freecol.server.generator.RiverSection.growBranch(Direction, int)",6
net.sf.freecol.server.generator.RiverSection.removeBranch(Direction),5
"net.sf.freecol.server.generator.RiverSection.setBranch(Direction, int)",6
net.sf.freecol.server.generator.SimpleMapGenerator.SimpleMapGenerator(Random),6
"net.sf.freecol.server.generator.SimpleMapGenerator.Territory.Territory(Player, ServerRegion)",0
"net.sf.freecol.server.generator.SimpleMapGenerator.Territory.Territory(Player, Tile)",0
net.sf.freecol.server.generator.SimpleMapGenerator.Territory.getCenterTile(Map),0
net.sf.freecol.server.generator.SimpleMapGenerator.Territory.toString(),3
"net.sf.freecol.server.generator.SimpleMapGenerator.createDebugUnits(Map, Player, Tile, LogBuilder)",0
"net.sf.freecol.server.generator.SimpleMapGenerator.createEuropeanUnits(Map, List<Player>, LogBuilder)",10
"net.sf.freecol.server.generator.SimpleMapGenerator.findFreeNeighbouringTile(IndianSettlement, List<Tile>)",7
"net.sf.freecol.server.generator.SimpleMapGenerator.findHistoricalStartingPosition(Player, Map, List<Tile>, List<Tile>)",10
"net.sf.freecol.server.generator.SimpleMapGenerator.findTileFor(Map, int, int, boolean, LogBuilder)",0
"net.sf.freecol.server.generator.SimpleMapGenerator.generateEmptyMap(Game, int, int, LogBuilder)",3
"net.sf.freecol.server.generator.SimpleMapGenerator.generateMap(Game, Map, boolean, LogBuilder)",3
"net.sf.freecol.server.generator.SimpleMapGenerator.generateSkillForLocation(Map, Tile, NationType)",9
net.sf.freecol.server.generator.SimpleMapGenerator.getApproximateLandCount(Game),6
"net.sf.freecol.server.generator.SimpleMapGenerator.getClosestTerritory(Tile, List<Territory>)",7
"net.sf.freecol.server.generator.SimpleMapGenerator.importIndianSettlements(Map, Map, LogBuilder)",8
"net.sf.freecol.server.generator.SimpleMapGenerator.makeLostCityRumours(Map, Map, LogBuilder)",9
"net.sf.freecol.server.generator.SimpleMapGenerator.makeNativeSettlements(Map, Map, LogBuilder)",8
"net.sf.freecol.server.generator.SimpleMapGenerator.placeCapital(Map, Territory, int, List<Tile>, LogBuilder)",11
"net.sf.freecol.server.generator.SimpleMapGenerator.placeIndianSettlement(Player, boolean, Tile, Map, LogBuilder)",12
"net.sf.freecol.server.generator.SimpleMapGenerator.sampleTiles(List<Tile>, int)",8
net.sf.freecol.server.generator.SimpleMapGenerator.suitableForNativeSettlement(Tile),11
net.sf.freecol.server.generator.TerrainGenerator.TerrainGenerator(Random),8
"net.sf.freecol.server.generator.TerrainGenerator.createLakeRegions(Map, LogBuilder)",7
"net.sf.freecol.server.generator.TerrainGenerator.createLandRegions(Map, LogBuilder)",13
"net.sf.freecol.server.generator.TerrainGenerator.createMountains(Map, LogBuilder)",8
net.sf.freecol.server.generator.TerrainGenerator.createResource(Tile),6
"net.sf.freecol.server.generator.TerrainGenerator.createRivers(Map, LogBuilder)",8
net.sf.freecol.server.generator.TerrainGenerator.encodeStyle(Tile),7
"net.sf.freecol.server.generator.TerrainGenerator.generateMap(Game, Map, LandMap, LogBuilder)",9
net.sf.freecol.server.generator.TerrainGenerator.getApproximateLandCount(Game),6
"net.sf.freecol.server.generator.TerrainGenerator.getRandomLandTileType(Game, int)",10
"net.sf.freecol.server.generator.TerrainGenerator.getRandomOceanTileType(Game, int)",7
"net.sf.freecol.server.generator.TerrainGenerator.getRandomTileType(Game, List<TileType>, int)",11
"net.sf.freecol.server.generator.TerrainGenerator.limitToRange(int, int, int)",0
"net.sf.freecol.server.generator.TerrainGenerator.makeLakes(Map, List<Tile>)",7
"net.sf.freecol.server.generator.TerrainGenerator.perhapsAddBonus(Tile, boolean)",7
net.sf.freecol.server.model.AllTests.suite(),0
"net.sf.freecol.server.model.DiplomacySession.DiplomacySession(Unit, Settlement, long)",8
"net.sf.freecol.server.model.DiplomacySession.DiplomacySession(Unit, Unit, long)",7
net.sf.freecol.server.model.DiplomacySession.complete(ChangeSet),3
net.sf.freecol.server.model.DiplomacySession.complete(boolean),3
"net.sf.freecol.server.model.DiplomacySession.complete(boolean, ChangeSet)",9
net.sf.freecol.server.model.DiplomacySession.completeFirstContact(ChangeSet),9
"net.sf.freecol.server.model.DiplomacySession.completeInternal(boolean, ChangeSet)",6
"net.sf.freecol.server.model.DiplomacySession.findContactSession(Player, Player)",7
"net.sf.freecol.server.model.DiplomacySession.findContactSession(Unit, Settlement)",8
"net.sf.freecol.server.model.DiplomacySession.findContactSession(Unit, Unit)",8
net.sf.freecol.server.model.DiplomacySession.getAgreement(),5
net.sf.freecol.server.model.DiplomacySession.getGame(),5
net.sf.freecol.server.model.DiplomacySession.getMessage(Player),7
net.sf.freecol.server.model.DiplomacySession.getOtherPlayer(),5
net.sf.freecol.server.model.DiplomacySession.getOtherPlayer(ServerPlayer),6
net.sf.freecol.server.model.DiplomacySession.getOtherUnit(),5
net.sf.freecol.server.model.DiplomacySession.getOwner(),5
net.sf.freecol.server.model.DiplomacySession.getSettlement(),5
net.sf.freecol.server.model.DiplomacySession.getUnit(),5
"net.sf.freecol.server.model.DiplomacySession.isCompatible(FreeColGameObject, FreeColGameObject)",7
"net.sf.freecol.server.model.DiplomacySession.makeDiplomacySessionKey(Ownable, Ownable)",7
net.sf.freecol.server.model.DiplomacySession.setAgreement(DiplomaticTrade),5
"net.sf.freecol.server.model.LootSession.LootSession(Unit, Unit, List<Goods>)",0
net.sf.freecol.server.model.LootSession.complete(ChangeSet),0
net.sf.freecol.server.model.LootSession.getCapture(),0
"net.sf.freecol.server.model.MonarchSession.MonarchSession(ServerPlayer, MonarchAction, List<AbstractUnit>, int)",0
"net.sf.freecol.server.model.MonarchSession.MonarchSession(ServerPlayer, MonarchAction, int, Goods)",0
net.sf.freecol.server.model.MonarchSession.complete(ChangeSet),0
"net.sf.freecol.server.model.MonarchSession.complete(boolean, ChangeSet)",9
"net.sf.freecol.server.model.MonarchSession.completeInternal(Boolean, ChangeSet)",6
net.sf.freecol.server.model.MonarchSession.getAction(),0
net.sf.freecol.server.model.MonarchSession.getGoods(),0
net.sf.freecol.server.model.MonarchSession.getMercenaries(),0
net.sf.freecol.server.model.MonarchSession.getPrice(),0
net.sf.freecol.server.model.MonarchSession.getTax(),0
"net.sf.freecol.server.model.NativeDemandSession.NativeDemandSession(Unit, Colony, GoodsType, int, long)",9
net.sf.freecol.server.model.NativeDemandSession.complete(ChangeSet),3
net.sf.freecol.server.model.NativeDemandSession.complete(boolean),3
"net.sf.freecol.server.model.NativeDemandSession.complete(boolean, ChangeSet)",9
"net.sf.freecol.server.model.NativeDemandSession.completeInternal(boolean, ChangeSet)",6
net.sf.freecol.server.model.NativeDemandSession.getColonyOwner(),0
net.sf.freecol.server.model.NativeDemandSession.getGame(),5
net.sf.freecol.server.model.NativeDemandSession.getUnitOwner(),0
net.sf.freecol.server.model.NativeDemandSession.toString(),3
net.sf.freecol.server.model.NativeTradeSession.NativeTradeSession(NativeTrade),5
net.sf.freecol.server.model.NativeTradeSession.complete(ChangeSet),3
net.sf.freecol.server.model.NativeTradeSession.getNativeTrade(),5
net.sf.freecol.server.model.NativeTradeSession.openSession(NativeTrade),7
net.sf.freecol.server.model.NativeTradeSession.toString(),3
"net.sf.freecol.server.model.ServerBuilding.ServerBuilding(Game, Colony, BuildingType)",7
"net.sf.freecol.server.model.ServerBuilding.ServerBuilding(Game, String)",6
"net.sf.freecol.server.model.ServerBuilding.csAssignStudent(Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerBuilding.csCheckMissingInput(ProductionInfo, ChangeSet)",9
"net.sf.freecol.server.model.ServerBuilding.csCheckTeach(Unit, ChangeSet)",11
"net.sf.freecol.server.model.ServerBuilding.csNewTurn(Random, LogBuilder, ChangeSet)",7
net.sf.freecol.server.model.ServerBuilding.csRepairUnits(ChangeSet),5
net.sf.freecol.server.model.ServerBuilding.csTeach(ChangeSet),5
"net.sf.freecol.server.model.ServerBuilding.csTrainStudent(Unit, Unit, ChangeSet)",8
"net.sf.freecol.server.model.ServerBuildingTest.getSchoolColony(int, SchoolLevel)",3
"net.sf.freecol.server.model.ServerBuildingTest.getUnitList(Colony, UnitType)",7
net.sf.freecol.server.model.ServerBuildingTest.testCaseTwoTeachersWithDifferentExp(),0
net.sf.freecol.server.model.ServerBuildingTest.testCollege(),0
net.sf.freecol.server.model.ServerBuildingTest.testColonialRegular(),0
net.sf.freecol.server.model.ServerBuildingTest.testConcurrentUpgrade(),0
net.sf.freecol.server.model.ServerBuildingTest.testExpertTeaching(),4
net.sf.freecol.server.model.ServerBuildingTest.testMoveTeacherInside(),5
net.sf.freecol.server.model.ServerBuildingTest.testMoveTeacherOutside(),5
net.sf.freecol.server.model.ServerBuildingTest.testPartTraining(),5
net.sf.freecol.server.model.ServerBuildingTest.testProductionBonus(),0
net.sf.freecol.server.model.ServerBuildingTest.testSingleGuyTwoTeachers(),3
net.sf.freecol.server.model.ServerBuildingTest.testSingleGuyTwoTeachers2(),4
net.sf.freecol.server.model.ServerBuildingTest.testSonsOfLiberty(),3
net.sf.freecol.server.model.ServerBuildingTest.testTeachIndenturedServants(),3
net.sf.freecol.server.model.ServerBuildingTest.testTeachPettyCriminals(),3
net.sf.freecol.server.model.ServerBuildingTest.testTeachPettyCriminalsByMaster(),4
net.sf.freecol.server.model.ServerBuildingTest.testTeacherStoresProgress(),6
net.sf.freecol.server.model.ServerBuildingTest.testTeachingDoublePromotion(),4
net.sf.freecol.server.model.ServerBuildingTest.testTeachingOrder(),4
net.sf.freecol.server.model.ServerBuildingTest.testTrackerBug1616384(),27
net.sf.freecol.server.model.ServerBuildingTest.testTwoTeachersOfSameKind(),4
net.sf.freecol.server.model.ServerBuildingTest.testTwoTeachersSimple(),0
net.sf.freecol.server.model.ServerBuildingTest.testUniversity(),0
"net.sf.freecol.server.model.ServerBuildingTest.trainForTurns(Colony, int)",0
"net.sf.freecol.server.model.ServerColony.ServerColony(Game, Player, String, Tile)",8
"net.sf.freecol.server.model.ServerColony.ServerColony(Game, String)",6
net.sf.freecol.server.model.ServerColony.buildBuilding(Building),6
"net.sf.freecol.server.model.ServerColony.csAddConvert(Unit, ChangeSet)",6
"net.sf.freecol.server.model.ServerColony.csBuildBuilding(BuildQueue<? extends BuildableType>, ChangeSet)",7
"net.sf.freecol.server.model.ServerColony.csBuildUnit(BuildQueue<? extends BuildableType>, Random, ChangeSet)",8
"net.sf.freecol.server.model.ServerColony.csChangeOwner(Player, boolean, String, ChangeSet)",10
"net.sf.freecol.server.model.ServerColony.csEquipForRole(Unit, Role, int, Random, ChangeSet)",10
"net.sf.freecol.server.model.ServerColony.csEvictUsers(Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerColony.csFreeBuilding(BuildingType, ChangeSet)",8
"net.sf.freecol.server.model.ServerColony.csNewTurn(Random, LogBuilder, ChangeSet)",9
"net.sf.freecol.server.model.ServerColony.csNewTurnWarnings(Random, LogBuilder, ChangeSet)",12
"net.sf.freecol.server.model.ServerColony.csNextBuildable(BuildQueue<? extends BuildableType>, ChangeSet)",8
net.sf.freecol.server.model.ServerColony.destroyBuilding(Building),6
"net.sf.freecol.server.model.ServerColony.ejectUnits(WorkLocation, List<Unit>)",12
net.sf.freecol.server.model.ServerColony.neededForBuildableType(GoodsType),7
net.sf.freecol.server.model.ServerColonyTest.testAvoidStarvation(),0
net.sf.freecol.server.model.ServerColonyTest.testBuildingCompletion(),3
net.sf.freecol.server.model.ServerColonyTest.testDeathByStarvation(),0
net.sf.freecol.server.model.ServerColonyTest.testEqualFoodProductionConsumptionCase(),0
net.sf.freecol.server.model.ServerColonyTest.testFoodConsumption(),0
net.sf.freecol.server.model.ServerColonyTest.testInvalidCompletion(),3
net.sf.freecol.server.model.ServerColonyTest.testLibertyAndImmigration(),0
net.sf.freecol.server.model.ServerColonyTest.testNoBuildingMaterialsProductionWhenBuildingNothing(),0
"net.sf.freecol.server.model.ServerColonyTile.ServerColonyTile(Game, Colony, Tile)",8
"net.sf.freecol.server.model.ServerColonyTile.ServerColonyTile(Game, String)",6
"net.sf.freecol.server.model.ServerColonyTile.csNewTurn(Random, LogBuilder, ChangeSet)",7
"net.sf.freecol.server.model.ServerColonyTile.expendResource(Tile, GoodsType, UnitType)",11
"net.sf.freecol.server.model.ServerEurope.ServerEurope(Game, Player)",7
"net.sf.freecol.server.model.ServerEurope.ServerEurope(Game, String)",6
"net.sf.freecol.server.model.ServerEurope.csEquipForRole(Unit, Role, int, Random, ChangeSet)",10
"net.sf.freecol.server.model.ServerEurope.csNewTurn(Random, LogBuilder, ChangeSet)",9
"net.sf.freecol.server.model.ServerEurope.equipForRole(Unit, Role, int)",3
"net.sf.freecol.server.model.ServerEurope.extractRecruitable(int, Random)",11
net.sf.freecol.server.model.ServerEurope.fillRecruitables(Random),5
"net.sf.freecol.server.model.ServerEurope.generateFountainRecruits(int, Random)",9
net.sf.freecol.server.model.ServerEurope.generateRecruitablesList(),5
"net.sf.freecol.server.model.ServerEurope.increasePrice(UnitType, int)",6
net.sf.freecol.server.model.ServerEurope.increaseRecruitmentDifficulty(),3
net.sf.freecol.server.model.ServerEurope.initializeMigration(Random),6
net.sf.freecol.server.model.ServerEurope.replaceRecruits(Random),6
net.sf.freecol.server.model.ServerGame.ServerGame(Specification),7
"net.sf.freecol.server.model.ServerGame.ServerGame(Specification, FreeColXMLReader)",10
"net.sf.freecol.server.model.ServerGame.ServerGame(Specification, Random)",9
"net.sf.freecol.server.model.ServerGame.changeAI(Player, boolean)",6
net.sf.freecol.server.model.ServerGame.checkForWinner(),5
"net.sf.freecol.server.model.ServerGame.csAcceptTrade(DiplomaticTrade, Unit, Settlement, ChangeSet)",13
"net.sf.freecol.server.model.ServerGame.csNewTurn(Random, LogBuilder, ChangeSet)",7
net.sf.freecol.server.model.ServerGame.csNextTurn(ChangeSet),5
"net.sf.freecol.server.model.ServerGame.csSpanishSuccession(ChangeSet, LogBuilder, Event)",12
net.sf.freecol.server.model.ServerGame.equals(Object),3
net.sf.freecol.server.model.ServerGame.establishUnknownEnemy(),5
net.sf.freecol.server.model.ServerGame.getConnectedPlayers(Player...),10
net.sf.freecol.server.model.ServerGame.getNextId(),3
net.sf.freecol.server.model.ServerGame.hashCode(),3
net.sf.freecol.server.model.ServerGame.isNextPlayerInNewTurn(),5
net.sf.freecol.server.model.ServerGame.randomize(Random),5
"net.sf.freecol.server.model.ServerGame.sendTo(Player, ChangeSet)",7
net.sf.freecol.server.model.ServerGame.sendToAll(ChangeSet),5
"net.sf.freecol.server.model.ServerGame.sendToList(List<Player>, ChangeSet)",6
"net.sf.freecol.server.model.ServerGame.sendToOthers(Player, ChangeSet)",6
"net.sf.freecol.server.model.ServerGame.spanishSuccessionReady(Event, List<Player>, LogBuilder)",8
net.sf.freecol.server.model.ServerGame.updatePlayers(List<? extends Player>),5
"net.sf.freecol.server.model.ServerIndianSettlement.ServerIndianSettlement(Game, Player, String, Tile, boolean, UnitType, Unit)",12
"net.sf.freecol.server.model.ServerIndianSettlement.ServerIndianSettlement(Game, Player, Tile, IndianSettlement)",8
"net.sf.freecol.server.model.ServerIndianSettlement.ServerIndianSettlement(Game, String)",6
net.sf.freecol.server.model.ServerIndianSettlement.addUnits(Random),8
net.sf.freecol.server.model.ServerIndianSettlement.addUnits(int),5
"net.sf.freecol.server.model.ServerIndianSettlement.changeAlarm(Player, int)",10
"net.sf.freecol.server.model.ServerIndianSettlement.consumeGoods(GoodsType, int)",6
"net.sf.freecol.server.model.ServerIndianSettlement.csChangeAlarm(Player, int, boolean, ChangeSet)",14
"net.sf.freecol.server.model.ServerIndianSettlement.csChangeMissionary(Unit, ChangeSet)",9
"net.sf.freecol.server.model.ServerIndianSettlement.csCheckTension(Player, Level, ChangeSet)",7
"net.sf.freecol.server.model.ServerIndianSettlement.csEquipForRole(Unit, Role, int, Random, ChangeSet)",10
"net.sf.freecol.server.model.ServerIndianSettlement.csKillMissionary(Boolean, ChangeSet)",7
"net.sf.freecol.server.model.ServerIndianSettlement.csModifyAlarm(Player, int, boolean, ChangeSet)",14
"net.sf.freecol.server.model.ServerIndianSettlement.csNewTurn(Random, LogBuilder, ChangeSet)",7
"net.sf.freecol.server.model.ServerIndianSettlement.csStartTurn(Random, ChangeSet)",6
net.sf.freecol.server.model.ServerIndianSettlement.removeAlarm(Player),8
"net.sf.freecol.server.model.ServerIndianSettlement.setAlarm(Player, Tension)",8
net.sf.freecol.server.model.ServerIndianSettlement.updateMostHated(),9
net.sf.freecol.server.model.ServerIndianSettlementTest.testFoodConsumption(),0
net.sf.freecol.server.model.ServerIndianSettlementTest.testHorseBreeding(),0
net.sf.freecol.server.model.ServerIndianSettlementTest.testHorseBreedingNoFoodAvail(),0
net.sf.freecol.server.model.ServerIndianSettlementTest.testPricing(),0
"net.sf.freecol.server.model.ServerPlayer.ServerPlayer(Game, Connection)",7
"net.sf.freecol.server.model.ServerPlayer.ServerPlayer(Game, String)",6
"net.sf.freecol.server.model.ServerPlayer.ServerPlayer(Game, boolean, Nation)",7
net.sf.freecol.server.model.ServerPlayer.addExtraTrade(AbstractGoods),5
net.sf.freecol.server.model.ServerPlayer.addHistory(HistoryEvent),5
net.sf.freecol.server.model.ServerPlayer.addStanceChange(Player),5
"net.sf.freecol.server.model.ServerPlayer.buyInEurope(Random, GoodsContainer, GoodsType, int)",10
net.sf.freecol.server.model.ServerPlayer.canRecruitFoundingFather(),5
net.sf.freecol.server.model.ServerPlayer.checkForDeath(),5
net.sf.freecol.server.model.ServerPlayer.checkForREFDefeat(),5
net.sf.freecol.server.model.ServerPlayer.checkFoundingFather(),5
net.sf.freecol.server.model.ServerPlayer.collectNewTiles(Collection<Tile>),7
net.sf.freecol.server.model.ServerPlayer.collectNewTiles(Stream<Tile>),7
"net.sf.freecol.server.model.ServerPlayer.collectNewTiles(Tile, int)",8
"net.sf.freecol.server.model.ServerPlayer.createUnits(List<AbstractUnit>, Location, Random)",14
"net.sf.freecol.server.model.ServerPlayer.csAddFoundingFather(FoundingFather, Random, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csAddMercenaries(List<AbstractUnit>, int, Random, ChangeSet)",8
"net.sf.freecol.server.model.ServerPlayer.csApplyDisaster(Random, Colony, Disaster, ChangeSet)",14
"net.sf.freecol.server.model.ServerPlayer.csAutoequipUnit(Unit, Settlement, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csBombardEnemyShips(Random, ChangeSet)",6
"net.sf.freecol.server.model.ServerPlayer.csBurnMissions(Unit, IndianSettlement, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csCaptureAutoEquip(Unit, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csCaptureColony(Unit, ServerColony, Random, ChangeSet)",8
"net.sf.freecol.server.model.ServerPlayer.csCaptureConvert(Unit, IndianSettlement, Random, ChangeSet)",8
"net.sf.freecol.server.model.ServerPlayer.csCaptureEquip(Unit, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csCaptureEquipment(Unit, Unit, Role, ChangeSet)",8
"net.sf.freecol.server.model.ServerPlayer.csCaptureUnit(Unit, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csChangeOwner(Unit, Player, String, Location, ChangeSet)",15
"net.sf.freecol.server.model.ServerPlayer.csChangeStance(Stance, Player, boolean, ChangeSet)",9
"net.sf.freecol.server.model.ServerPlayer.csClaimLand(Tile, Settlement, int, ChangeSet)",9
"net.sf.freecol.server.model.ServerPlayer.csCombat(FreeColGameObject, FreeColGameObject, List<CombatEffectType>, Random, ChangeSet)",9
"net.sf.freecol.server.model.ServerPlayer.csCompleteNativeDemand(ServerPlayer, Unit, Colony, GoodsType, int, IndianDemandAction, ChangeSet)",11
"net.sf.freecol.server.model.ServerPlayer.csContact(Player, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csDamageBuilding(Building, ChangeSet)",10
"net.sf.freecol.server.model.ServerPlayer.csDamageColonyShips(Unit, Colony, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csDamageShip(Unit, Location, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csDamageShipAttack(Unit, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csDamageShipBombard(Settlement, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csDemoteUnit(Unit, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csDestroyColony(Unit, Colony, Random, ChangeSet)",8
"net.sf.freecol.server.model.ServerPlayer.csDestroySettlement(Unit, IndianSettlement, Random, ChangeSet)",8
"net.sf.freecol.server.model.ServerPlayer.csDiplomacy(DiplomacySession, DiplomaticTrade, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csDisposeSettlement(Settlement, ChangeSet)",8
"net.sf.freecol.server.model.ServerPlayer.csEmigrate(int, MigrationType, Random, ChangeSet)",8
net.sf.freecol.server.model.ServerPlayer.csEndTurn(ChangeSet),5
"net.sf.freecol.server.model.ServerPlayer.csEuropeanFirstContact(Unit, Settlement, Unit, ChangeSet)",9
"net.sf.freecol.server.model.ServerPlayer.csEvadeAttack(Unit, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csEvadeBombard(Settlement, Unit, ChangeSet)",7
net.sf.freecol.server.model.ServerPlayer.csFlushMarket(ChangeSet),6
"net.sf.freecol.server.model.ServerPlayer.csFlushMarket(GoodsType, ChangeSet)",7
net.sf.freecol.server.model.ServerPlayer.csKill(ChangeSet),8
"net.sf.freecol.server.model.ServerPlayer.csLootShip(Unit, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csLoseAutoEquip(Unit, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csLoseEquip(Unit, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csLoseLocation(Location, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csMercenaries(int, List<AbstractUnit>, MonarchAction, Random, ChangeSet)",9
"net.sf.freecol.server.model.ServerPlayer.csModifyTension(Player, int, ChangeSet)",9
"net.sf.freecol.server.model.ServerPlayer.csModifyTension(Player, int, Settlement, ChangeSet)",11
"net.sf.freecol.server.model.ServerPlayer.csNativeFirstContact(Player, Tile, ChangeSet)",9
"net.sf.freecol.server.model.ServerPlayer.csNaturalDisasters(Random, ChangeSet, int)",7
"net.sf.freecol.server.model.ServerPlayer.csNewTurn(Random, LogBuilder, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csPayUpkeep(Random, ChangeSet)",6
"net.sf.freecol.server.model.ServerPlayer.csPillageColony(Unit, Colony, Random, ChangeSet)",8
"net.sf.freecol.server.model.ServerPlayer.csPromoteUnit(Unit, ChangeSet)",6
"net.sf.freecol.server.model.ServerPlayer.csRaiseTax(int, Goods, boolean, ChangeSet)",8
"net.sf.freecol.server.model.ServerPlayer.csSeeNewTiles(Collection<? extends Tile>, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csSetTax(int, ChangeSet)",9
"net.sf.freecol.server.model.ServerPlayer.csSinkColonyShips(Unit, Colony, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csSinkShip(Unit, Player, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csSinkShipAttack(Unit, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csSinkShipBombard(Settlement, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csSlaughterUnit(Unit, Unit, ChangeSet)",7
"net.sf.freecol.server.model.ServerPlayer.csStartTurn(Random, ChangeSet)",6
"net.sf.freecol.server.model.ServerPlayer.csWithdraw(ChangeSet, ModelMessage, HistoryEvent)",12
"net.sf.freecol.server.model.ServerPlayer.csYearlyGoodsAdjust(Random, ChangeSet)",10
net.sf.freecol.server.model.ServerPlayer.exploreForSettlement(Settlement),9
net.sf.freecol.server.model.ServerPlayer.exploreForUnit(Unit),8
net.sf.freecol.server.model.ServerPlayer.exploreMap(boolean),6
net.sf.freecol.server.model.ServerPlayer.exploreTile(Tile),9
net.sf.freecol.server.model.ServerPlayer.exploreTiles(Collection<? extends Tile>),8
net.sf.freecol.server.model.ServerPlayer.flushExtraTrades(Random),5
"net.sf.freecol.server.model.ServerPlayer.getBuildingForEffect(Colony, Effect, Random)",0
net.sf.freecol.server.model.ServerPlayer.getConnection(),3
net.sf.freecol.server.model.ServerPlayer.getFreeBuildingTypes(),7
net.sf.freecol.server.model.ServerPlayer.getRandomFoundingFathers(Random),7
net.sf.freecol.server.model.ServerPlayer.getRemainingEmigrants(),0
net.sf.freecol.server.model.ServerPlayer.getSlaughterTension(Unit),6
"net.sf.freecol.server.model.ServerPlayer.getUnitForEffect(Colony, Effect, Random)",0
net.sf.freecol.server.model.ServerPlayer.hasExplored(Tile),8
net.sf.freecol.server.model.ServerPlayer.ignoreMercenaries(ChangeSet),6
"net.sf.freecol.server.model.ServerPlayer.ignoreTax(int, Goods, ChangeSet)",8
"net.sf.freecol.server.model.ServerPlayer.initialize(Game, boolean, Nation)",9
"net.sf.freecol.server.model.ServerPlayer.loadShips(List<Unit>, List<Unit>, Random)",18
net.sf.freecol.server.model.ServerPlayer.makeTeaPartyModifier(),7
net.sf.freecol.server.model.ServerPlayer.newTradeRoute(),5
"net.sf.freecol.server.model.ServerPlayer.propagateToEuropeanMarkets(GoodsType, int, Random)",8
net.sf.freecol.server.model.ServerPlayer.randomizeGame(Random),5
"net.sf.freecol.server.model.ServerPlayer.reassignTiles(Collection<Tile>, Settlement)",11
"net.sf.freecol.server.model.ServerPlayer.sellInEurope(Random, GoodsContainer, GoodsType, int)",10
net.sf.freecol.server.model.ServerPlayer.send(ChangeSet),3
net.sf.freecol.server.model.ServerPlayer.setConnection(Connection),3
net.sf.freecol.server.model.ServerPlayer.setRemainingEmigrants(int),0
net.sf.freecol.server.model.ServerPlayer.toString(),3
net.sf.freecol.server.model.ServerPlayer.updateCurrentFather(FoundingFather),5
net.sf.freecol.server.model.ServerPlayer.updateScore(),17
"net.sf.freecol.server.model.ServerPlayerTest.buyUntilPriceRise(Game, ServerPlayer, GoodsType)",0
"net.sf.freecol.server.model.ServerPlayerTest.sellUntilPriceDrop(Game, ServerPlayer, GoodsType)",4
net.sf.freecol.server.model.ServerPlayerTest.tearDown(),0
net.sf.freecol.server.model.ServerPlayerTest.testBuyingMakesPricesRaise(),0
net.sf.freecol.server.model.ServerPlayerTest.testCheckGameOver1600Threshold(),0
net.sf.freecol.server.model.ServerPlayerTest.testCheckGameOverNoUnits(),0
net.sf.freecol.server.model.ServerPlayerTest.testCheckGameOverUnitsGoingToEurope(),0
net.sf.freecol.server.model.ServerPlayerTest.testCheckGameOverUnitsGoingToNewWorld(),0
net.sf.freecol.server.model.ServerPlayerTest.testCheckNoGameOverEnoughMoney(),0
net.sf.freecol.server.model.ServerPlayerTest.testCheckNoGameOverHasColonistInNewWorld(),0
net.sf.freecol.server.model.ServerPlayerTest.testDutchMarket(),4
net.sf.freecol.server.model.ServerPlayerTest.testHasExploredTile(),0
net.sf.freecol.server.model.ServerPlayerTest.testLoadInColony(),0
net.sf.freecol.server.model.ServerPlayerTest.testLoadInEurope(),0
net.sf.freecol.server.model.ServerPlayerTest.testMarketRecovery(),5
net.sf.freecol.server.model.ServerPlayerTest.testSellingMakesPricesFall(),0
"net.sf.freecol.server.model.ServerRegion.ServerRegion(Game, Region)",6
"net.sf.freecol.server.model.ServerRegion.ServerRegion(Game, RegionType)",6
"net.sf.freecol.server.model.ServerRegion.ServerRegion(Game, String)",6
"net.sf.freecol.server.model.ServerRegion.ServerRegion(Game, String, RegionType, Region)",8
"net.sf.freecol.server.model.ServerRegion.ServerRegion(Map, String, RegionType, Region)",8
net.sf.freecol.server.model.ServerRegion.addTile(Tile),5
net.sf.freecol.server.model.ServerRegion.containsCenter(ServerRegion),6
"net.sf.freecol.server.model.ServerRegion.csDiscover(Player, Unit, Turn, String, ChangeSet)",9
"net.sf.freecol.server.model.ServerRegion.fillOcean(Map, Tile, ServerRegion, Rectangle)",9
net.sf.freecol.server.model.ServerRegion.getBounds(),5
net.sf.freecol.server.model.ServerRegion.getCenter(),5
net.sf.freecol.server.model.ServerRegion.getSize(),5
net.sf.freecol.server.model.ServerRegion.isGeographic(),5
"net.sf.freecol.server.model.ServerRegion.requireFixedRegions(Map, LogBuilder)",7
net.sf.freecol.server.model.ServerRegion.setSize(int),5
net.sf.freecol.server.model.ServerRegion.toString(),3
"net.sf.freecol.server.model.ServerUnit.ServerUnit(Game, Location, Player, UnitType)",11
"net.sf.freecol.server.model.ServerUnit.ServerUnit(Game, Location, Player, UnitType, Role)",12
"net.sf.freecol.server.model.ServerUnit.ServerUnit(Game, Location, Unit)",14
"net.sf.freecol.server.model.ServerUnit.ServerUnit(Game, String)",6
"net.sf.freecol.server.model.ServerUnit.csActivateSentries(Tile, ChangeSet)",6
"net.sf.freecol.server.model.ServerUnit.csCheckDiscoverRegion(Tile, ChangeSet)",6
"net.sf.freecol.server.model.ServerUnit.csEmbark(Unit, ChangeSet)",6
"net.sf.freecol.server.model.ServerUnit.csExploreLostCityRumour(Random, ChangeSet)",7
"net.sf.freecol.server.model.ServerUnit.csImproveTile(Random, ChangeSet)",8
"net.sf.freecol.server.model.ServerUnit.csMove(Tile, Random, ChangeSet)",7
net.sf.freecol.server.model.ServerUnit.csNativeBurialGround(ChangeSet),5
"net.sf.freecol.server.model.ServerUnit.csNewContactCheck(Tile, boolean, ChangeSet)",7
"net.sf.freecol.server.model.ServerUnit.csNewTurn(Random, LogBuilder, ChangeSet)",7
"net.sf.freecol.server.model.ServerUnit.csRemove(See, Location, ChangeSet)",7
net.sf.freecol.server.model.ServerUnit.csRepairUnit(ChangeSet),5
"net.sf.freecol.server.model.ServerUnit.csVisit(ServerPlayer, IndianSettlement, int, ChangeSet)",16
"net.sf.freecol.server.model.ServerUnit.getSlowedBy(Tile, Random)",8
"net.sf.freecol.server.model.ServerUnitTest.hasImprovement(Tile, TileImprovementType)",8
net.sf.freecol.server.model.ServerUnitTest.testColonyProfitFromEnhancement(),0
net.sf.freecol.server.model.ServerUnitTest.testDoAssignedWorkHardyPioneerBuildRoad(),7
net.sf.freecol.server.model.ServerUnitTest.testDoAssignedWorkHardyPioneerPlowPlain(),3
net.sf.freecol.server.model.ServerUnitTest.testExposeResource(),0
net.sf.freecol.server.model.ServerUnitTest.testToggleHorses(),0
net.sf.freecol.server.model.ServerUnitTest.testUnitGetsExperienceThroughWork(),0
net.sf.freecol.server.model.ServerUnitTest.testUnitLumberDelivery(),0
net.sf.freecol.server.model.ServerUnitTest.testUnitPromotionWorkingInWorkTile(),0
net.sf.freecol.server.model.Session.Session(String),6
net.sf.freecol.server.model.Session.clearAll(),3
net.sf.freecol.server.model.Session.complete(ChangeSet),11
net.sf.freecol.server.model.Session.completeAll(ChangeSet),5
net.sf.freecol.server.model.Session.findSession(Predicate<Session>),6
net.sf.freecol.server.model.Session.getKey(),5
net.sf.freecol.server.model.Session.getSession(String),6
net.sf.freecol.server.model.Session.isComplete(),5
"net.sf.freecol.server.model.Session.lookup(Class<T>, FreeColGameObject, FreeColGameObject)",9
"net.sf.freecol.server.model.Session.lookup(Class<T>, String)",8
"net.sf.freecol.server.model.Session.lookup(Class<T>, String, String)",11
"net.sf.freecol.server.model.Session.makeSessionKey(Class, FreeColGameObject, FreeColGameObject)",8
"net.sf.freecol.server.model.Session.makeSessionKey(Class, String, String)",10
net.sf.freecol.server.model.Session.register(),3
"net.sf.freecol.server.model.TimedSession.TimedSession(String, long)",7
net.sf.freecol.server.model.TimedSession.cancel(),3
net.sf.freecol.server.model.TimedSession.complete(ChangeSet),3
net.sf.freecol.server.networking.DummyConnection.DummyConnection(String),5
"net.sf.freecol.server.networking.DummyConnection.askMessage(Message, long)",3
net.sf.freecol.server.networking.DummyConnection.close(),3
net.sf.freecol.server.networking.DummyConnection.getOtherConnection(),5
net.sf.freecol.server.networking.DummyConnection.isAlive(),3
net.sf.freecol.server.networking.DummyConnection.sendMessage(Message),3
net.sf.freecol.server.networking.DummyConnection.setOtherConnection(DummyConnection),5
net.sf.freecol.server.networking.DummyConnection.toString(),3
"net.sf.freecol.server.networking.Server.Server(FreeColServer, String, int)",9
net.sf.freecol.server.networking.Server.addConnection(Connection),5
net.sf.freecol.server.networking.Server.addDummyConnection(Connection),5
net.sf.freecol.server.networking.Server.getConnection(Socket),7
net.sf.freecol.server.networking.Server.getHost(),5
net.sf.freecol.server.networking.Server.getPort(),5
net.sf.freecol.server.networking.Server.removeConnection(Connection),5
net.sf.freecol.server.networking.Server.run(),7
net.sf.freecol.server.networking.Server.sendToAll(Message),5
"net.sf.freecol.server.networking.Server.sendToAll(Message, Connection)",7
net.sf.freecol.server.networking.Server.setCommsLogging(boolean),5
net.sf.freecol.server.networking.Server.setMessageHandlerToAllConnections(MessageHandler),5
net.sf.freecol.server.networking.Server.shutdown(),3
net.sf.freecol.tools.ColonizationMapReader.main(String[]),0
"net.sf.freecol.tools.ColonizationSaveGameReader.Colonist.Colonist(int, int, int)",0
net.sf.freecol.tools.ColonizationSaveGameReader.Colonist.print(),0
net.sf.freecol.tools.ColonizationSaveGameReader.ColonizationSaveGameReader(byte[]),0
"net.sf.freecol.tools.ColonizationSaveGameReader.ColonyData.ColonyData(byte[], int)",0
net.sf.freecol.tools.ColonizationSaveGameReader.ColonyData.print(),0
net.sf.freecol.tools.ColonizationSaveGameReader.GameData.GameData(byte[]),0
net.sf.freecol.tools.ColonizationSaveGameReader.GameData.getNumberOfColonies(),0
net.sf.freecol.tools.ColonizationSaveGameReader.GameData.print(),0
"net.sf.freecol.tools.ColonizationSaveGameReader.PlayerData.PlayerData(byte[], int)",0
net.sf.freecol.tools.ColonizationSaveGameReader.PlayerData.print(),0
"net.sf.freecol.tools.ColonizationSaveGameReader.getString(byte[], int, int)",0
net.sf.freecol.tools.ColonizationSaveGameReader.main(String[]),0
net.sf.freecol.tools.ColonizationSaveGameReader.run(),0
net.sf.freecol.tools.DesktopEntry.main(String[]),7
net.sf.freecol.tools.FSGConverter.FSGConverter(),3
"net.sf.freecol.tools.FSGConverter.convertToXML(File, File)",13
"net.sf.freecol.tools.FSGConverter.convertToXML(InputStream, OutputStream)",15
net.sf.freecol.tools.FSGConverter.getFSGConverter(),4
net.sf.freecol.tools.FSGConverter.main(String[]),5
net.sf.freecol.tools.FSGConverter.printUsage(),3
net.sf.freecol.tools.FlagTest.FlagTest(),0
net.sf.freecol.tools.FlagTest.actionPerformed(ActionEvent),0
"net.sf.freecol.tools.FlagTest.enable(Component[], boolean)",0
net.sf.freecol.tools.FlagTest.getNumbers(int),0
net.sf.freecol.tools.FlagTest.itemStateChanged(ItemEvent),0
net.sf.freecol.tools.FlagTest.main(String[]),0
net.sf.freecol.tools.FlagTest.setColors(),0
"net.sf.freecol.tools.ForestMaker.ImageLocation.ImageLocation(BufferedImage, int, int)",0
net.sf.freecol.tools.ForestMaker.ImageLocation.compareTo(ImageLocation),0
net.sf.freecol.tools.ForestMaker.ImageLocation.equals(Object),3
net.sf.freecol.tools.ForestMaker.ImageLocation.hashCode(),3
net.sf.freecol.tools.ForestMaker.main(String[]),22
net.sf.freecol.tools.GenerateDocumentation.generateDocumentation(String[]),0
net.sf.freecol.tools.GenerateDocumentation.getResource(String),0
net.sf.freecol.tools.GenerateDocumentation.localize(String),0
"net.sf.freecol.tools.GenerateDocumentation.localize(String, String, String)",0
net.sf.freecol.tools.GenerateDocumentation.main(String[]),0
net.sf.freecol.tools.GenerateDocumentation.readResources(),0
net.sf.freecol.tools.InstallerTranslations.main(String[]),0
net.sf.freecol.tools.InstallerTranslations.readFile(File),0
net.sf.freecol.tools.MapConverter.main(String[]),0
net.sf.freecol.tools.MergeTranslations.main(String[]),0
net.sf.freecol.tools.MergeTranslations.readFile(File),0
net.sf.freecol.tools.RiverMaker.branchCount(int[]),0
net.sf.freecol.tools.RiverMaker.getName(int[]),0
net.sf.freecol.tools.RiverMaker.main(String[]),0
net.sf.freecol.tools.RiverMaker.nextBranch(int[]),0
net.sf.freecol.tools.SaveGameValidator.main(String[]),0
net.sf.freecol.tools.Texture2Tile.closerToCorrectAspectWithoutDoublingHorizontally(BufferedImage),0
"net.sf.freecol.tools.Texture2Tile.combineQuarterTiles(BufferedImage, BufferedImage)",0
"net.sf.freecol.tools.Texture2Tile.createImageWithTextureFill(BufferedImage, int, int)",0
net.sf.freecol.tools.Texture2Tile.createNonRotatedResult(BufferedImage),0
"net.sf.freecol.tools.Texture2Tile.createRotatedImage(BufferedImage, int)",10
net.sf.freecol.tools.Texture2Tile.createRotatedResult(BufferedImage),0
"net.sf.freecol.tools.Texture2Tile.extractQuarterTileA(BufferedImage, int, int)",0
"net.sf.freecol.tools.Texture2Tile.extractQuarterTileB(BufferedImage, int, int)",0
"net.sf.freecol.tools.Texture2Tile.imageWithMaskApplied(BufferedImage, String)",0
net.sf.freecol.tools.Texture2Tile.main(String[]),0
net.sf.freecol.tools.Texture2Tile.printUsage(),0
"net.sf.freecol.tools.Texture2Tile.seamlessRescaleTexture(BufferedImage, int, int)",0
"net.sf.freecol.tools.Texture2Tile.seamlessRescaleTextureIfNeeded(BufferedImage, int, int)",0
"net.sf.freecol.tools.Texture2Tile.tileThreeByThreeAndRescaledTo(BufferedImage, int, int)",10
"net.sf.freecol.tools.TranslationReport.isInVariable(ArrayList<String>, String, String, String, int, boolean)",3
net.sf.freecol.tools.TranslationReport.main(String[]),0
net.sf.freecol.tools.TranslationReport.prettyPrint(int),3
net.sf.freecol.tools.TranslationReport.shortenName(String),3
net.sf.freecol.tools.TranslationReport.sort(ArrayList<String>),0
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.IndianSettlementBuilder(Game),0
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.build(),0
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.capital(boolean),0
"net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.getSimpleName(Player, boolean)",0
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.initialBravesInCamp(int),0
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.missionary(Unit),0
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.player(Player),0
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.reset(),0
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.setStartingParams(),0
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.settlementTile(Tile),0
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.skillToTeach(String),0
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.MapBuilder(Game),0
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.build(),0
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.completeWorkingGrid(),0
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.reset(),0
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.setBaseTileType(TileType),0
"net.sf.freecol.util.test.FreeColTestCase.MapBuilder.setDimensions(int, int)",0
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.setExploredByAll(boolean),0
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.setStartingParams(),0
"net.sf.freecol.util.test.FreeColTestCase.MapBuilder.setTileType(int, int, TileType)",0
"net.sf.freecol.util.test.FreeColTestCase.addUnitTypeChange(String, UnitType, UnitType, int, int)",0
"net.sf.freecol.util.test.FreeColTestCase.checkCombat(String, List<CombatEffectType>, CombatEffectType...)",7
"net.sf.freecol.util.test.FreeColTestCase.checkGoods(String, List<AbstractGoods>, AbstractGoods...)",7
net.sf.freecol.util.test.FreeColTestCase.clearWorkLocation(WorkLocation),8
"net.sf.freecol.util.test.FreeColTestCase.fakeAttackResult(CombatEffectType, FreeColGameObject, FreeColGameObject)",4
net.sf.freecol.util.test.FreeColTestCase.getCoastTestMap(TileType),0
"net.sf.freecol.util.test.FreeColTestCase.getCoastTestMap(TileType, boolean)",15
net.sf.freecol.util.test.FreeColTestCase.getGame(),10
"net.sf.freecol.util.test.FreeColTestCase.getServerPlayer(Game, String)",7
net.sf.freecol.util.test.FreeColTestCase.getSpecification(String),0
net.sf.freecol.util.test.FreeColTestCase.getStandardColony(),5
net.sf.freecol.util.test.FreeColTestCase.getStandardColony(int),7
"net.sf.freecol.util.test.FreeColTestCase.getStandardColony(int, int, int)",10
net.sf.freecol.util.test.FreeColTestCase.getStandardGame(),8
net.sf.freecol.util.test.FreeColTestCase.getStandardGame(String),9
net.sf.freecol.util.test.FreeColTestCase.getTestMap(),10
net.sf.freecol.util.test.FreeColTestCase.getTestMap(TileType),12
"net.sf.freecol.util.test.FreeColTestCase.getTestMap(TileType, boolean)",12
net.sf.freecol.util.test.FreeColTestCase.getTestMap(boolean),0
"net.sf.freecol.util.test.FreeColTestCase.nonServerBuildColony(Unit, Colony)",3
"net.sf.freecol.util.test.FreeColTestCase.nonServerJoinColony(Unit, Colony)",3
net.sf.freecol.util.test.FreeColTestCase.setGame(Game),8
"net.sf.freecol.util.test.FreeColTestCase.setProductionBonus(Colony, int)",7
net.sf.freecol.util.test.FreeColTestCase.setUp(),0
net.sf.freecol.util.test.FreeColTestCase.spec(),0
net.sf.freecol.util.test.FreeColTestCase.spec(String),0
net.sf.freecol.util.test.FreeColTestCase.tearDown(),0
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.ColonyBuilder(Game),0
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.addColonist(UnitType),0
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.build(),0
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.colonyName(String),0
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.colonyTile(Tile),0
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.initialColonists(int),0
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.player(Player),0
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.reset(),0
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.setGame(Game),0
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.setStartingParams(),0
net.sf.freecol.util.test.FreeColTestUtils.getColonyBuilder(),0
net.sf.freecol.util.test.FreeColTestUtils.setStudentSelection(boolean),0
net.sf.freecol.util.test.MockMapGenerator.MockMapGenerator(Map),0
"net.sf.freecol.util.test.MockMapGenerator.generateEmptyMap(Game, int, int, LogBuilder)",3
"net.sf.freecol.util.test.MockMapGenerator.generateMap(Game, Map, boolean, LogBuilder)",3
net.sf.freecol.util.test.MockMapGenerator.setMap(Map),0
net.sf.freecol.util.test.MockPseudoRandom.MockPseudoRandom(),0
"net.sf.freecol.util.test.MockPseudoRandom.MockPseudoRandom(List<Integer>, boolean)",0
net.sf.freecol.util.test.MockPseudoRandom.getNext(),0
net.sf.freecol.util.test.MockPseudoRandom.nextDouble(),0
net.sf.freecol.util.test.MockPseudoRandom.nextFloat(),0
net.sf.freecol.util.test.MockPseudoRandom.nextInt(int),0
"net.sf.freecol.util.test.MockPseudoRandom.setNextNumbers(List<Integer>, boolean)",0

Class,Jf,JLOC,Jm
net.sf.freecol.AllTests,"100,00%",3,"0,00%"
net.sf.freecol.FreeCol,"33,33%",412,"97,01%"
net.sf.freecol.FreeCol.LogLevel,"0,00%",1,"0,00%"
net.sf.freecol.client.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.client.ClientOptions,"59,84%",254,"73,91%"
net.sf.freecol.client.ClientTestHelper,"0,00%",0,"0,00%"
net.sf.freecol.client.FreeColClient,"61,90%",343,"96,30%"
net.sf.freecol.client.control.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.client.control.ClientInputHandler,"0,00%",14,"100,00%"
net.sf.freecol.client.control.ConnectController,"50,00%",109,"100,00%"
net.sf.freecol.client.control.FreeColClientHolder,"100,00%",75,"100,00%"
net.sf.freecol.client.control.InGameController,"71,43%",1 297,"99,41%"
net.sf.freecol.client.control.InGameController.MoveMode,"0,00%",4,"0,00%"
net.sf.freecol.client.control.MapEditorController,"66,67%",84,"100,00%"
net.sf.freecol.client.control.MapTransform,"100,00%",29,"100,00%"
net.sf.freecol.client.control.MoveTest,"0,00%",0,"0,00%"
net.sf.freecol.client.control.PreGameController,"0,00%",130,"100,00%"
net.sf.freecol.client.control.SoundController,"66,67%",39,"85,71%"
net.sf.freecol.client.gui.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.Canvas,"77,78%",336,"86,67%"
net.sf.freecol.client.gui.Canvas.ToolBoxFrame,"100,00%",1,"100,00%"
net.sf.freecol.client.gui.CanvasMapEditorMouseListener,"0,00%",36,"100,00%"
net.sf.freecol.client.gui.CanvasMouseListener,"0,00%",23,"100,00%"
net.sf.freecol.client.gui.CanvasMouseMotionListener,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.ChoiceItem,"0,00%",102,"100,00%"
net.sf.freecol.client.gui.FontLibrary,"66,67%",103,"78,57%"
net.sf.freecol.client.gui.FontLibrary.FontType,"0,00%",10,"0,00%"
net.sf.freecol.client.gui.FontTest,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.FrameMotionListener,"0,00%",17,"100,00%"
net.sf.freecol.client.gui.FreeColFrame,"50,00%",18,"28,57%"
net.sf.freecol.client.gui.FullScreenFrameListener,"0,00%",44,"100,00%"
net.sf.freecol.client.gui.GUI,"50,00%",1 420,"97,65%"
net.sf.freecol.client.gui.GUI.ViewMode,"0,00%",1,"0,00%"
net.sf.freecol.client.gui.GrayLayer,"100,00%",32,"100,00%"
net.sf.freecol.client.gui.ImageLibrary,"21,21%",550,"39,77%"
net.sf.freecol.client.gui.ImageLibrary.PathType,"0,00%",12,"33,33%"
net.sf.freecol.client.gui.LoadingSavegameInfo,"0,00%",28,"83,33%"
net.sf.freecol.client.gui.ModifierFormat,"100,00%",1,"0,00%"
net.sf.freecol.client.gui.ScrollThread,"60,00%",21,"50,00%"
net.sf.freecol.client.gui.Scrolling,"60,00%",34,"62,50%"
net.sf.freecol.client.gui.Size,"20,00%",5,"0,00%"
net.sf.freecol.client.gui.SplashScreen,"100,00%",10,"100,00%"
net.sf.freecol.client.gui.SwingGUI,"100,00%",645,"94,95%"
net.sf.freecol.client.gui.SwingGUI.PopupPosition,"20,00%",4,"0,00%"
net.sf.freecol.client.gui.TilePopup,"0,00%",55,"100,00%"
net.sf.freecol.client.gui.Widgets,"66,67%",438,"79,22%"
net.sf.freecol.client.gui.Widgets.DialogCallback,"100,00%",14,"100,00%"
net.sf.freecol.client.gui.WindowedFrameListener,"100,00%",43,"100,00%"
net.sf.freecol.client.gui.action.AboutAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ActionManager,"0,00%",59,"87,50%"
net.sf.freecol.client.gui.action.AssignTradeRouteAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.AttackRangedAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.BuildColonyAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.CenterAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ChangeAction,"0,00%",22,"100,00%"
net.sf.freecol.client.gui.action.ChangeWindowedModeAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ChatAction,"0,00%",16,"100,00%"
net.sf.freecol.client.gui.action.ClearOrdersAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ColopediaAction,"0,00%",12,"100,00%"
net.sf.freecol.client.gui.action.ColopediaAction.PanelType,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.action.ContinueAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.DebugAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.DeclareIndependenceAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.DetermineHighSeasAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.DisbandUnitAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.DisplayBordersAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.DisplayFogOfWarAction,"0,00%",11,"66,67%"
net.sf.freecol.client.gui.action.DisplayGridAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.DisplayTileTextAction,"0,00%",15,"100,00%"
net.sf.freecol.client.gui.action.DisplayTileTextAction.DisplayText,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.action.EndTurnAction,"0,00%",13,"100,00%"
net.sf.freecol.client.gui.action.EuropeAction,"0,00%",15,"100,00%"
net.sf.freecol.client.gui.action.ExecuteGotoOrdersAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.FindSettlementAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.FortifyAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.FreeColAction,"16,67%",155,"88,24%"
net.sf.freecol.client.gui.action.FreeColAction.InnerMenuKeyListener,"0,00%",8,"0,00%"
net.sf.freecol.client.gui.action.GotoAction,"0,00%",16,"100,00%"
net.sf.freecol.client.gui.action.GotoTileAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.ImprovementAction,"0,00%",18,"100,00%"
net.sf.freecol.client.gui.action.LoadAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.MapControlsAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.MapEditorAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.MapboardAction,"100,00%",13,"100,00%"
net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction,"0,00%",17,"60,00%"
net.sf.freecol.client.gui.action.MiniMapToggleViewAction,"0,00%",17,"60,00%"
net.sf.freecol.client.gui.action.MiniMapZoomInAction,"0,00%",20,"100,00%"
net.sf.freecol.client.gui.action.MiniMapZoomOutAction,"0,00%",20,"100,00%"
net.sf.freecol.client.gui.action.MoveAction,"0,00%",19,"100,00%"
net.sf.freecol.client.gui.action.NewAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.NewEmptyMapAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.OpenAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.PreferencesAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.QuitAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReconnectAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.RenameAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportCargoAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportColonyAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportContinentalCongressAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportEducationAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportExplorationAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportForeignAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportHighScoresAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportHistoryAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportIndianAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportLabourAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportMilitaryAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportNavalAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportProductionAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportReligionAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportRequirementsAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportTradeAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ReportTurnAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.RetireAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.SaveAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.SaveAndQuitAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.ScaleMapAction,"0,00%",21,"100,00%"
net.sf.freecol.client.gui.action.SelectableAction,"0,00%",40,"100,00%"
net.sf.freecol.client.gui.action.SentryAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ShowDifficultyAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ShowGameOptionsAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ShowMainAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.ShowMapGeneratorOptionsAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.SkipUnitAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.StartMapAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.TilePopupAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ToggleViewModeAction,"0,00%",12,"100,00%"
net.sf.freecol.client.gui.action.TradeRouteAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.UnitAction,"100,00%",13,"100,00%"
net.sf.freecol.client.gui.action.UnloadAction,"0,00%",22,"80,00%"
net.sf.freecol.client.gui.action.WaitAction,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.action.ZoomInAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.action.ZoomOutAction,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.animation.Animation,"100,00%",39,"100,00%"
net.sf.freecol.client.gui.animation.Animations,"0,00%",31,"100,00%"
net.sf.freecol.client.gui.animation.UnitImageAnimation,"75,00%",42,"100,00%"
net.sf.freecol.client.gui.animation.UnitMoveAnimation,"75,00%",21,"100,00%"
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog,"80,00%",37,"100,00%"
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.CheckBoxRenderer,"0,00%",9,"66,67%"
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.GoodsItem,"0,00%",3,"25,00%"
net.sf.freecol.client.gui.dialog.ChooseFoundingFatherDialog,"0,00%",20,"100,00%"
net.sf.freecol.client.gui.dialog.ClientOptionsDialog,"100,00%",9,"100,00%"
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog,"62,50%",33,"57,14%"
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ColorButton,"0,00%",4,"25,00%"
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.EnumRenderer,"0,00%",4,"50,00%"
net.sf.freecol.client.gui.dialog.DifficultyDialog,"66,67%",41,"71,43%"
net.sf.freecol.client.gui.dialog.DumpCargoDialog,"66,67%",15,"100,00%"
net.sf.freecol.client.gui.dialog.EditOptionDialog,"0,00%",13,"100,00%"
net.sf.freecol.client.gui.dialog.EditSettlementDialog,"85,71%",22,"37,50%"
net.sf.freecol.client.gui.dialog.EmigrationDialog,"100,00%",12,"100,00%"
net.sf.freecol.client.gui.dialog.EndTurnDialog,"50,00%",15,"100,00%"
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitCellRenderer,"100,00%",3,"33,33%"
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitWrapper,"0,00%",9,"50,00%"
net.sf.freecol.client.gui.dialog.FirstContactDialog,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.dialog.Flag,"38,10%",249,"68,75%"
net.sf.freecol.client.gui.dialog.Flag.Alignment,"0,00%",5,"0,00%"
net.sf.freecol.client.gui.dialog.Flag.Background,"87,50%",12,"0,00%"
net.sf.freecol.client.gui.dialog.Flag.Decoration,"0,00%",5,"0,00%"
net.sf.freecol.client.gui.dialog.Flag.UnionPosition,"0,00%",5,"0,00%"
net.sf.freecol.client.gui.dialog.Flag.UnionShape,"0,00%",4,"0,00%"
net.sf.freecol.client.gui.dialog.FreeColChoiceDialog,"100,00%",29,"100,00%"
net.sf.freecol.client.gui.dialog.FreeColConfirmDialog,"100,00%",31,"100,00%"
net.sf.freecol.client.gui.dialog.FreeColDialog,"80,00%",136,"88,46%"
net.sf.freecol.client.gui.dialog.FreeColDialog.DialogType,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.dialog.FreeColInputDialog,"0,00%",42,"100,00%"
net.sf.freecol.client.gui.dialog.FreeColStringInputDialog,"100,00%",21,"100,00%"
net.sf.freecol.client.gui.dialog.GameOptionsDialog,"100,00%",10,"100,00%"
net.sf.freecol.client.gui.dialog.LoadDialog,"100,00%",15,"100,00%"
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog,"0,00%",40,"87,50%"
net.sf.freecol.client.gui.dialog.MapGeneratorOptionsDialog,"0,00%",28,"100,00%"
net.sf.freecol.client.gui.dialog.MapSizeDialog,"0,00%",15,"100,00%"
net.sf.freecol.client.gui.dialog.MonarchDialog,"100,00%",17,"100,00%"
net.sf.freecol.client.gui.dialog.NativeDemandDialog,"100,00%",13,"100,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog,"29,17%",128,"100,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog.ColonyTradeItemPanel,"0,00%",13,"100,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoldTradeItemPanel,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel,"0,00%",15,"100,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel.GoodsBoxRenderer,"100,00%",3,"100,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel.InciteBoxRenderer,"100,00%",3,"100,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog.RemoveAction,"0,00%",3,"50,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel,"0,00%",23,"100,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.StanceBoxRenderer,"100,00%",3,"100,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel,"0,00%",15,"100,00%"
net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel.UnitBoxRenderer,"100,00%",3,"100,00%"
net.sf.freecol.client.gui.dialog.OptionsDialog,"62,50%",90,"93,75%"
net.sf.freecol.client.gui.dialog.Parameters,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.dialog.ParametersDialog,"0,00%",18,"100,00%"
net.sf.freecol.client.gui.dialog.PreCombatDialog,"100,00%",12,"50,00%"
net.sf.freecol.client.gui.dialog.RiverStyleDialog,"0,00%",13,"100,00%"
net.sf.freecol.client.gui.dialog.SaveDialog,"100,00%",19,"100,00%"
net.sf.freecol.client.gui.dialog.ScaleMapSizeDialog,"0,00%",15,"75,00%"
net.sf.freecol.client.gui.dialog.SelectAmountDialog,"60,00%",28,"100,00%"
net.sf.freecol.client.gui.dialog.SelectDestinationDialog,"87,50%",56,"100,00%"
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination,"100,00%",32,"28,57%"
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.LocationRenderer,"0,00%",8,"100,00%"
net.sf.freecol.client.gui.dialog.SelectTributeAmountDialog,"50,00%",20,"100,00%"
net.sf.freecol.client.gui.dialog.VictoryDialog,"100,00%",9,"100,00%"
net.sf.freecol.client.gui.dialog.WarehouseDialog,"0,00%",10,"33,33%"
net.sf.freecol.client.gui.dialog.WarehouseDialog.WarehouseGoodsPanel,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator,"0,00%",31,"66,67%"
net.sf.freecol.client.gui.images.BeachTileAnimationImageCreator,"0,00%",32,"75,00%"
net.sf.freecol.client.gui.images.DeltaAnimationImageCreator,"0,00%",25,"50,00%"
net.sf.freecol.client.gui.images.ImageCreators,"0,00%",4,"0,00%"
net.sf.freecol.client.gui.images.RiverAnimationImageCreator,"0,00%",25,"20,00%"
net.sf.freecol.client.gui.label.AbstractGoodsLabel,"20,00%",81,"100,00%"
net.sf.freecol.client.gui.label.FreeColLabel,"100,00%",24,"100,00%"
net.sf.freecol.client.gui.label.GoodsLabel,"100,00%",27,"100,00%"
net.sf.freecol.client.gui.label.GoodsTypeLabel,"100,00%",33,"85,71%"
net.sf.freecol.client.gui.label.MarketLabel,"100,00%",39,"100,00%"
net.sf.freecol.client.gui.label.ProductionLabel,"83,33%",37,"62,50%"
net.sf.freecol.client.gui.label.UnitLabel,"85,71%",89,"100,00%"
net.sf.freecol.client.gui.label.UnitLabel.UnitAction,"0,00%",1,"0,00%"
net.sf.freecol.client.gui.mapviewer.CanvasMapViewer,"0,00%",9,"12,50%"
net.sf.freecol.client.gui.mapviewer.ChatDisplay,"100,00%",32,"100,00%"
net.sf.freecol.client.gui.mapviewer.GUIMessage,"0,00%",26,"100,00%"
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter,"17,65%",36,"40,00%"
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread,"0,00%",3,"0,00%"
net.sf.freecol.client.gui.mapviewer.MapViewer,"80,00%",264,"71,05%"
net.sf.freecol.client.gui.mapviewer.MapViewer.BorderType,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.mapviewer.MapViewer.TextSpecification,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds,"0,00%",38,"57,14%"
net.sf.freecol.client.gui.mapviewer.MapViewerBounds,"100,00%",188,"60,87%"
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager,"0,00%",123,"80,00%"
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils,"66,67%",6,"0,00%"
net.sf.freecol.client.gui.mapviewer.MapViewerState,"77,78%",83,"65,00%"
net.sf.freecol.client.gui.mapviewer.RoadPainter,"14,29%",16,"100,00%"
net.sf.freecol.client.gui.mapviewer.TerrainCursor,"50,00%",17,"42,86%"
net.sf.freecol.client.gui.mapviewer.TileBounds,"20,00%",13,"16,67%"
net.sf.freecol.client.gui.mapviewer.TileViewer,"58,33%",168,"65,38%"
net.sf.freecol.client.gui.mapviewer.UnitAnimator,"40,00%",40,"85,71%"
net.sf.freecol.client.gui.menu.DebugMenu,"0,00%",11,"66,67%"
net.sf.freecol.client.gui.menu.FreeColMenuBar,"0,00%",59,"81,82%"
net.sf.freecol.client.gui.menu.FreeColMenuTest,"0,00%",13,"25,00%"
net.sf.freecol.client.gui.menu.InGameMenuBar,"0,00%",21,"42,86%"
net.sf.freecol.client.gui.menu.MapEditorMenuBar,"0,00%",20,"40,00%"
net.sf.freecol.client.gui.menu.MenuMouseMotionListener,"0,00%",23,"100,00%"
net.sf.freecol.client.gui.option.AbstractUnitOptionUI,"0,00%",28,"100,00%"
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.AbstractUnitRenderer,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.RoleRenderer,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.option.AudioMixerOptionUI,"0,00%",27,"83,33%"
net.sf.freecol.client.gui.option.BooleanOptionUI,"0,00%",27,"62,50%"
net.sf.freecol.client.gui.option.FileOptionUI,"0,00%",27,"100,00%"
net.sf.freecol.client.gui.option.FreeColActionUI,"0,00%",46,"90,00%"
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel,"0,00%",6,"7,14%"
net.sf.freecol.client.gui.option.IntegerOptionUI,"0,00%",21,"100,00%"
net.sf.freecol.client.gui.option.LanguageOptionUI,"0,00%",22,"100,00%"
net.sf.freecol.client.gui.option.ListOptionUI,"0,00%",30,"66,67%"
net.sf.freecol.client.gui.option.ModOptionUI,"50,00%",31,"100,00%"
net.sf.freecol.client.gui.option.ModOptionUI.BoxRenderer,"0,00%",3,"50,00%"
net.sf.freecol.client.gui.option.ModOptionUI.ModOptionRenderer,"0,00%",3,"50,00%"
net.sf.freecol.client.gui.option.OptionGroupUI,"0,00%",36,"54,55%"
net.sf.freecol.client.gui.option.OptionGroupUI.OptionTree,"0,00%",8,"100,00%"
net.sf.freecol.client.gui.option.OptionUI,"75,00%",39,"46,67%"
net.sf.freecol.client.gui.option.PercentageOptionUI,"100,00%",13,"50,00%"
net.sf.freecol.client.gui.option.RangeOptionUI,"100,00%",18,"100,00%"
net.sf.freecol.client.gui.option.SelectOptionUI,"0,00%",22,"100,00%"
net.sf.freecol.client.gui.option.SliderOptionUI,"0,00%",25,"100,00%"
net.sf.freecol.client.gui.option.StringOptionUI,"0,00%",22,"100,00%"
net.sf.freecol.client.gui.option.TextOptionUI,"0,00%",21,"100,00%"
net.sf.freecol.client.gui.option.UnitTypeOptionUI,"0,00%",22,"100,00%"
net.sf.freecol.client.gui.option.UnitTypeOptionUI.ChoiceRenderer,"100,00%",3,"100,00%"
net.sf.freecol.client.gui.panel.AboutPanel,"80,00%",44,"100,00%"
net.sf.freecol.client.gui.panel.BuildQueuePanel,"66,67%",93,"55,56%"
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueMouseAdapter,"0,00%",3,"50,00%"
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler,"0,00%",20,"100,00%"
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable,"0,00%",22,"100,00%"
net.sf.freecol.client.gui.panel.BuildQueuePanel.DefaultBuildQueueCellRenderer,"0,00%",4,"50,00%"
net.sf.freecol.client.gui.panel.BuildQueuePanel.IndexedBuildable,"0,00%",4,"0,00%"
net.sf.freecol.client.gui.panel.BuildingPanel,"75,00%",50,"91,67%"
net.sf.freecol.client.gui.panel.BuildingPanel.UpkeepLabel,"100,00%",13,"100,00%"
net.sf.freecol.client.gui.panel.CargoPanel,"33,33%",56,"82,35%"
net.sf.freecol.client.gui.panel.ChatPanel,"0,00%",22,"100,00%"
net.sf.freecol.client.gui.panel.ColonyPanel,"9,09%",127,"63,64%"
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel,"100,00%",19,"100,00%"
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel,"100,00%",43,"100,00%"
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyCargoPanel,"100,00%",11,"100,00%"
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel,"100,00%",22,"100,00%"
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel,"100,00%",37,"100,00%"
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel,"0,00%",24,"100,00%"
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel,"100,00%",29,"100,00%"
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel,"100,00%",66,"100,00%"
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel,"100,00%",43,"100,00%"
net.sf.freecol.client.gui.panel.ColorCellEditor,"0,00%",18,"100,00%"
net.sf.freecol.client.gui.panel.ColorCellRenderer,"100,00%",13,"100,00%"
net.sf.freecol.client.gui.panel.ColorChooserPanel,"0,00%",14,"66,67%"
net.sf.freecol.client.gui.panel.ConstructionPanel,"80,00%",54,"100,00%"
net.sf.freecol.client.gui.panel.CornerMapControls,"66,67%",32,"50,00%"
net.sf.freecol.client.gui.panel.CornerMapControls.MiniMapPanelSkin,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.panel.DeclarationPanel,"0,00%",15,"75,00%"
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel,"0,00%",45,"66,67%"
net.sf.freecol.client.gui.panel.DefaultTransferHandler,"40,00%",86,"80,00%"
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragGestureRecognizer,"100,00%",6,"50,00%"
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler,"0,00%",28,"87,50%"
net.sf.freecol.client.gui.panel.DragListener,"85,71%",31,"100,00%"
net.sf.freecol.client.gui.panel.DropListener,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.panel.ErrorPanel,"33,33%",20,"100,00%"
net.sf.freecol.client.gui.panel.EuropePanel,"0,00%",47,"100,00%"
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel,"0,00%",31,"100,00%"
net.sf.freecol.client.gui.panel.EuropePanel.EuropeAction,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.panel.EuropePanel.EuropeButton,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.panel.EuropePanel.EuropeInPortPanel,"100,00%",13,"75,00%"
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel,"100,00%",31,"90,00%"
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel,"100,00%",29,"100,00%"
net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog,"100,00%",23,"100,00%"
net.sf.freecol.client.gui.panel.EventPanel,"0,00%",11,"100,00%"
net.sf.freecol.client.gui.panel.FindSettlementPanel,"66,67%",20,"57,14%"
net.sf.freecol.client.gui.panel.FindSettlementPanel.DisplayListOption,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.panel.FindSettlementPanel.SettlementRenderer,"0,00%",3,"50,00%"
net.sf.freecol.client.gui.panel.FreeColButton,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.panel.FreeColButton.ButtonStyle,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.panel.FreeColImageBorder,"55,56%",79,"46,15%"
net.sf.freecol.client.gui.panel.FreeColPanel,"0,00%",101,"100,00%"
net.sf.freecol.client.gui.panel.FreeColProgressBar,"100,00%",59,"100,00%"
net.sf.freecol.client.gui.panel.GoodsTypePanel,"100,00%",53,"100,00%"
net.sf.freecol.client.gui.panel.ImageSelection,"100,00%",19,"100,00%"
net.sf.freecol.client.gui.panel.InPortPanel,"100,00%",16,"100,00%"
net.sf.freecol.client.gui.panel.IndianSettlementPanel,"0,00%",9,"100,00%"
net.sf.freecol.client.gui.panel.InfoPanel,"92,86%",115,"94,74%"
net.sf.freecol.client.gui.panel.InfoPanel.InfoPanelMode,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.panel.InformationPanel,"100,00%",35,"50,00%"
net.sf.freecol.client.gui.panel.MainPanel,"0,00%",11,"66,67%"
net.sf.freecol.client.gui.panel.MapControls,"36,36%",50,"53,85%"
net.sf.freecol.client.gui.panel.MapEditorTransformPanel,"20,00%",45,"100,00%"
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.LostCityRumourTransform,"100,00%",3,"100,00%"
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.ResourceTransform,"100,00%",8,"100,00%"
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverStyleTransform,"0,00%",3,"25,00%"
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverTransform,"0,00%",3,"50,00%"
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.SettlementTransform,"100,00%",3,"100,00%"
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.TileTypeTransform,"0,00%",3,"33,33%"
net.sf.freecol.client.gui.panel.MigPanel,"0,00%",7,"20,00%"
net.sf.freecol.client.gui.panel.MiniMap,"22,22%",108,"88,00%"
net.sf.freecol.client.gui.panel.MiniMap.MinimapPainterThread,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.panel.MiniMap.PrerenderedMinimap,"50,00%",4,"0,00%"
net.sf.freecol.client.gui.panel.NewPanel,"91,67%",117,"100,00%"
net.sf.freecol.client.gui.panel.NewPanel.NewPanelAction,"0,00%",1,"0,00%"
net.sf.freecol.client.gui.panel.NewUnitPanel,"100,00%",26,"100,00%"
net.sf.freecol.client.gui.panel.PlayersTable,"14,29%",11,"50,00%"
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellEditor,"0,00%",16,"100,00%"
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellRenderer,"100,00%",9,"100,00%"
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellEditor,"0,00%",6,"50,00%"
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellRenderer,"0,00%",6,"100,00%"
net.sf.freecol.client.gui.panel.PlayersTable.HeaderListener,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.panel.PlayersTable.HeaderRenderer,"0,00%",3,"33,33%"
net.sf.freecol.client.gui.panel.PlayersTable.NationCellRenderer,"100,00%",3,"100,00%"
net.sf.freecol.client.gui.panel.PlayersTable.NationStateRenderer,"100,00%",3,"100,00%"
net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellEditor,"0,00%",3,"33,33%"
net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellRenderer,"0,00%",3,"50,00%"
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel,"0,00%",57,"100,00%"
net.sf.freecol.client.gui.panel.PortPanel,"0,00%",55,"100,00%"
net.sf.freecol.client.gui.panel.PurchasePanel,"100,00%",8,"100,00%"
net.sf.freecol.client.gui.panel.QuickActionMenu,"0,00%",92,"59,09%"
net.sf.freecol.client.gui.panel.RecruitPanel,"66,67%",20,"100,00%"
net.sf.freecol.client.gui.panel.ServerListPanel,"0,00%",26,"80,00%"
net.sf.freecol.client.gui.panel.ServerListPanel.ServerListTableCellRenderer,"100,00%",3,"100,00%"
net.sf.freecol.client.gui.panel.ServerListTableModel,"0,00%",33,"85,71%"
net.sf.freecol.client.gui.panel.StartGamePanel,"0,00%",37,"87,50%"
net.sf.freecol.client.gui.panel.StatisticsPanel,"0,00%",10,"33,33%"
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel,"0,00%",26,"100,00%"
net.sf.freecol.client.gui.panel.StatusPanel,"0,00%",14,"100,00%"
net.sf.freecol.client.gui.panel.TilePanel,"0,00%",12,"100,00%"
net.sf.freecol.client.gui.panel.TradeRouteInputPanel,"85,71%",75,"100,00%"
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.AllGoodsTypesPanel,"100,00%",13,"50,00%"
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.DestinationCellRenderer,"100,00%",3,"50,00%"
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopGoodsTypesPanel,"100,00%",9,"50,00%"
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler,"100,00%",18,"83,33%"
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable,"0,00%",9,"60,00%"
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopRenderer,"0,00%",3,"50,00%"
net.sf.freecol.client.gui.panel.TradeRoutePanel,"90,00%",40,"100,00%"
net.sf.freecol.client.gui.panel.TrainPanel,"100,00%",8,"100,00%"
net.sf.freecol.client.gui.panel.UnitButton,"0,00%",18,"50,00%"
net.sf.freecol.client.gui.panel.UnitButton.UnitButtonActionPropertyChangeListener,"0,00%",0,"0,00%"
net.sf.freecol.client.gui.panel.UnitPanel,"66,67%",61,"100,00%"
net.sf.freecol.client.gui.panel.Utility,"40,00%",285,"73,21%"
net.sf.freecol.client.gui.panel.WorkProductionPanel,"0,00%",11,"50,00%"
net.sf.freecol.client.gui.panel.WrapLayout,"100,00%",50,"85,71%"
net.sf.freecol.client.gui.panel.colopedia.BuildingDetailPanel,"100,00%",15,"100,00%"
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel,"66,67%",36,"23,81%"
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel,"0,00%",40,"70,00%"
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeCellRenderer,"0,00%",13,"100,00%"
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem,"0,00%",26,"66,67%"
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel,"0,00%",18,"100,00%"
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.ConceptEditorPane,"100,00%",8,"100,00%"
net.sf.freecol.client.gui.panel.colopedia.FatherDetailPanel,"0,00%",21,"100,00%"
net.sf.freecol.client.gui.panel.colopedia.GoodsDetailPanel,"100,00%",15,"75,00%"
net.sf.freecol.client.gui.panel.colopedia.NationDetailPanel,"100,00%",15,"100,00%"
net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel,"100,00%",27,"100,00%"
net.sf.freecol.client.gui.panel.colopedia.ResourcesDetailPanel,"100,00%",15,"100,00%"
net.sf.freecol.client.gui.panel.colopedia.TerrainDetailPanel,"100,00%",15,"75,00%"
net.sf.freecol.client.gui.panel.colopedia.UnitDetailPanel,"100,00%",16,"100,00%"
net.sf.freecol.client.gui.panel.report.CompactLabourReport,"0,00%",35,"30,00%"
net.sf.freecol.client.gui.panel.report.LabourData,"0,00%",9,"10,00%"
net.sf.freecol.client.gui.panel.report.LabourData.ColonyLocationDataGetter,"100,00%",9,"100,00%"
net.sf.freecol.client.gui.panel.report.LabourData.LocationData,"100,00%",38,"5,26%"
net.sf.freecol.client.gui.panel.report.LabourData.ProductionData,"100,00%",6,"0,00%"
net.sf.freecol.client.gui.panel.report.LabourData.UnitData,"14,29%",9,"6,67%"
net.sf.freecol.client.gui.panel.report.ReportCargoPanel,"100,00%",17,"100,00%"
net.sf.freecol.client.gui.panel.report.ReportClassicColonyPanel,"16,67%",12,"50,00%"
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel,"11,11%",32,"40,00%"
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary,"70,59%",28,"66,67%"
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.GoodsProduction,"25,00%",15,"100,00%"
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.ProductionStatus,"0,00%",1,"0,00%"
net.sf.freecol.client.gui.panel.report.ReportContinentalCongressPanel,"0,00%",8,"100,00%"
net.sf.freecol.client.gui.panel.report.ReportEducationPanel,"100,00%",8,"50,00%"
net.sf.freecol.client.gui.panel.report.ReportExplorationPanel,"100,00%",9,"100,00%"
net.sf.freecol.client.gui.panel.report.ReportForeignAffairPanel,"100,00%",8,"100,00%"
net.sf.freecol.client.gui.panel.report.ReportHighScoresPanel,"100,00%",10,"100,00%"
net.sf.freecol.client.gui.panel.report.ReportHistoryPanel,"100,00%",8,"100,00%"
net.sf.freecol.client.gui.panel.report.ReportIndianPanel,"0,00%",8,"50,00%"
net.sf.freecol.client.gui.panel.report.ReportLabourDetailPanel,"0,00%",12,"50,00%"
net.sf.freecol.client.gui.panel.report.ReportLabourPanel,"100,00%",15,"66,67%"
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.LabourUnitPanel,"0,00%",1,"0,00%"
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.LabourUnitPanelRenderer,"100,00%",4,"100,00%"
net.sf.freecol.client.gui.panel.report.ReportMilitaryPanel,"100,00%",17,"100,00%"
net.sf.freecol.client.gui.panel.report.ReportNavalPanel,"100,00%",17,"100,00%"
net.sf.freecol.client.gui.panel.report.ReportPanel,"20,00%",21,"50,00%"
net.sf.freecol.client.gui.panel.report.ReportProductionPanel,"100,00%",13,"50,00%"
net.sf.freecol.client.gui.panel.report.ReportReligiousPanel,"100,00%",8,"100,00%"
net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel,"75,00%",17,"11,11%"
net.sf.freecol.client.gui.panel.report.ReportTradePanel,"0,00%",11,"25,00%"
net.sf.freecol.client.gui.panel.report.ReportTurnPanel,"75,00%",17,"40,00%"
net.sf.freecol.client.gui.panel.report.ReportUnitPanel,"100,00%",46,"71,43%"
net.sf.freecol.client.gui.plaf.FreeColBrightPanelUI,"0,00%",7,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColButtonUI,"0,00%",4,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColCheckBoxMenuItemUI,"100,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI,"100,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.CheckBoxIcon,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer,"0,00%",40,"100,00%"
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.NormalComponent,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.SelectedComponent,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColComboBoxUI,"100,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColFileChooserUI,"100,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColFormattedTextFieldUI,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColLabelUI,"100,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColListUI,"100,00%",4,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel,"0,00%",34,"100,00%"
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme,"100,00%",21,"87,50%"
net.sf.freecol.client.gui.plaf.FreeColMenuBarUI,"0,00%",4,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColMenuItemUI,"100,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColMenuUI,"0,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI,"0,00%",37,"100,00%"
net.sf.freecol.client.gui.plaf.FreeColPanelUI,"0,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColPopupMenuUI,"0,00%",6,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColRadioButtonMenuItemUI,"100,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI,"100,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.RadioButtonIcon,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColScrollPaneUI,"100,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColSelectedPanelUI,"0,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColSpinnerUI,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColTableHeaderUI,"100,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColTableUI,"100,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColTextAreaUI,"0,00%",4,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColTextFieldUI,"0,00%",4,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColToolTipUI,"0,00%",4,"0,00%"
net.sf.freecol.client.gui.plaf.FreeColTransparentPanelUI,"0,00%",3,"0,00%"
net.sf.freecol.client.gui.plaf.LAFUtilities,"0,00%",15,"100,00%"
net.sf.freecol.client.gui.tooltip.BuildingToolTip,"100,00%",12,"100,00%"
net.sf.freecol.client.gui.tooltip.RebelToolTip,"100,00%",12,"100,00%"
net.sf.freecol.client.gui.video.VideoComponent,"0,00%",19,"50,00%"
net.sf.freecol.client.networking.UserServerAPI,"100,00%",63,"100,00%"
net.sf.freecol.common.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.common.FreeColException,"100,00%",30,"100,00%"
net.sf.freecol.common.FreeColSeed,"66,67%",24,"100,00%"
net.sf.freecol.common.debug.DebugUtils,"0,00%",278,"100,00%"
net.sf.freecol.common.debug.FreeColDebugger,"83,33%",197,"97,14%"
net.sf.freecol.common.debug.FreeColDebugger.DebugMode,"0,00%",1,"0,00%"
net.sf.freecol.common.i18n.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.common.i18n.CLDRTest,"100,00%",0,"0,00%"
net.sf.freecol.common.i18n.DefaultNumberRule,"0,00%",29,"100,00%"
net.sf.freecol.common.i18n.DualNumberRule,"100,00%",7,"100,00%"
net.sf.freecol.common.i18n.Merge,"0,00%",0,"0,00%"
net.sf.freecol.common.i18n.MergeTableCellRenderer,"100,00%",0,"0,00%"
net.sf.freecol.common.i18n.MergeTableModel,"0,00%",0,"0,00%"
net.sf.freecol.common.i18n.MessageMerge,"100,00%",0,"0,00%"
net.sf.freecol.common.i18n.Messages,"33,33%",208,"55,88%"
net.sf.freecol.common.i18n.MessagesTest,"0,00%",0,"0,00%"
net.sf.freecol.common.i18n.NameCache,"40,91%",181,"100,00%"
net.sf.freecol.common.i18n.Number,"0,00%",24,"100,00%"
net.sf.freecol.common.i18n.Number.Category,"0,00%",0,"0,00%"
net.sf.freecol.common.i18n.NumberRules,"30,77%",35,"33,33%"
net.sf.freecol.common.i18n.OtherNumberRule,"100,00%",4,"0,00%"
net.sf.freecol.common.i18n.PluralNumberRule,"100,00%",4,"0,00%"
net.sf.freecol.common.i18n.Relation,"0,00%",39,"80,00%"
net.sf.freecol.common.i18n.Rule,"0,00%",27,"66,67%"
net.sf.freecol.common.i18n.ZeroOneNumberRule,"100,00%",4,"0,00%"
net.sf.freecol.common.io.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.common.io.FreeColDataFile,"60,00%",79,"56,25%"
net.sf.freecol.common.io.FreeColDirectories,"28,07%",491,"91,67%"
net.sf.freecol.common.io.FreeColModFile,"60,00%",71,"100,00%"
net.sf.freecol.common.io.FreeColRules,"50,00%",15,"100,00%"
net.sf.freecol.common.io.FreeColSavegameFile,"100,00%",80,"100,00%"
net.sf.freecol.common.io.FreeColTcFile,"0,00%",18,"100,00%"
net.sf.freecol.common.io.FreeColXMLReader,"83,33%",429,"100,00%"
net.sf.freecol.common.io.FreeColXMLReader.ReadScope,"0,00%",0,"0,00%"
net.sf.freecol.common.io.FreeColXMLWriter,"83,33%",153,"37,74%"
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope,"0,00%",0,"0,00%"
net.sf.freecol.common.io.FreeColXMLWriter.WriteScopeType,"0,00%",1,"0,00%"
net.sf.freecol.common.io.ModTest,"100,00%",0,"0,00%"
net.sf.freecol.common.io.sza.SimpleZippedAnimation,"57,14%",68,"100,00%"
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl,"0,00%",18,"66,67%"
net.sf.freecol.common.logging.DefaultHandler,"100,00%",25,"100,00%"
net.sf.freecol.common.logging.TextFormatter,"100,00%",12,"100,00%"
net.sf.freecol.common.metaserver.MetaServerUtils,"40,00%",71,"100,00%"
net.sf.freecol.common.metaserver.MetaServerUtils.MetaInputHandler,"50,00%",16,"100,00%"
net.sf.freecol.common.metaserver.MetaServerUtils.MetaMessageType,"0,00%",1,"0,00%"
net.sf.freecol.common.metaserver.ServerInfo,"10,00%",91,"100,00%"
net.sf.freecol.common.model.Ability,"97,56%",206,"100,00%"
net.sf.freecol.common.model.AbstractGoods,"100,00%",127,"100,00%"
net.sf.freecol.common.model.AbstractUnit,"40,00%",162,"100,00%"
net.sf.freecol.common.model.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.common.model.BaseCostDeciderTest,"0,00%",26,"75,00%"
net.sf.freecol.common.model.BuildQueue,"100,00%",43,"47,06%"
net.sf.freecol.common.model.BuildQueue.CompletionAction,"100,00%",20,"0,00%"
net.sf.freecol.common.model.BuildableType,"62,50%",140,"89,29%"
net.sf.freecol.common.model.Building,"16,67%",173,"97,62%"
net.sf.freecol.common.model.BuildingTest,"0,00%",7,"4,55%"
net.sf.freecol.common.model.BuildingType,"46,15%",208,"89,19%"
net.sf.freecol.common.model.ClassicTileProductionTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.ClassicTileProductionTest.ProductionTestCombination,"0,00%",0,"0,00%"
net.sf.freecol.common.model.ClassicTileProductionTest.TileImprovementTypeWithMagnitude,"0,00%",0,"0,00%"
net.sf.freecol.common.model.Colony,"46,34%",1 088,"95,11%"
net.sf.freecol.common.model.Colony.ColonyChangeEvent,"0,00%",0,"0,00%"
net.sf.freecol.common.model.Colony.NoBuildReason,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Colony.TileImprovementSuggestion,"100,00%",8,"0,00%"
net.sf.freecol.common.model.ColonyProductionTest,"0,00%",5,"12,50%"
net.sf.freecol.common.model.ColonyTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.ColonyTile,"33,33%",159,"97,14%"
net.sf.freecol.common.model.ColonyTradeItem,"40,00%",59,"87,50%"
net.sf.freecol.common.model.ColonyWas,"0,00%",12,"100,00%"
net.sf.freecol.common.model.CombatModel,"100,00%",117,"100,00%"
net.sf.freecol.common.model.CombatModel.CombatEffectType,"0,00%",0,"0,00%"
net.sf.freecol.common.model.CombatModel.CombatOdds,"0,00%",3,"0,00%"
net.sf.freecol.common.model.CombatModel.CombatResult,"0,00%",0,"0,00%"
net.sf.freecol.common.model.CombatTest,"0,00%",9,"0,00%"
net.sf.freecol.common.model.Constants.ArmedUnitSettlementAction,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Constants.BoycottAction,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Constants.ClaimAction,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Constants.IndianDemandAction,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Constants.IntegrityType,"25,00%",30,"71,43%"
net.sf.freecol.common.model.Constants.MissionaryAction,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Constants.ScoutColonyAction,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Constants.ScoutIndianSettlementAction,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Constants.TradeAction,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Constants.TradeBuyAction,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Constants.TradeSellAction,"0,00%",1,"0,00%"
net.sf.freecol.common.model.DiplomaticTrade,"50,00%",203,"100,00%"
net.sf.freecol.common.model.DiplomaticTrade.TradeContext,"75,00%",10,"33,33%"
net.sf.freecol.common.model.DiplomaticTrade.TradeStatus,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Direction,"6,25%",94,"86,67%"
net.sf.freecol.common.model.Disaster,"50,00%",66,"100,00%"
net.sf.freecol.common.model.Disaster.Effects,"0,00%",1,"0,00%"
net.sf.freecol.common.model.DisasterTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.Effect,"10,00%",47,"100,00%"
net.sf.freecol.common.model.Europe,"37,50%",201,"100,00%"
net.sf.freecol.common.model.Europe.MigrationType,"42,86%",20,"0,00%"
net.sf.freecol.common.model.EuropeTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.EuropeWas,"66,67%",22,"100,00%"
net.sf.freecol.common.model.EuropeanNationType,"20,00%",86,"94,44%"
net.sf.freecol.common.model.Event,"50,00%",86,"100,00%"
net.sf.freecol.common.model.ExportData,"35,71%",101,"100,00%"
net.sf.freecol.common.model.Feature,"54,55%",134,"80,65%"
net.sf.freecol.common.model.FeatureContainer,"60,00%",165,"96,15%"
net.sf.freecol.common.model.Force,"57,14%",105,"100,00%"
net.sf.freecol.common.model.FoundingFather,"36,36%",105,"100,00%"
net.sf.freecol.common.model.FoundingFather.FoundingFatherType,"0,00%",10,"50,00%"
net.sf.freecol.common.model.FoundingFatherTest,"0,00%",4,"0,00%"
net.sf.freecol.common.model.FreeColGameObject,"80,00%",135,"100,00%"
net.sf.freecol.common.model.FreeColObject,"88,89%",624,"84,85%"
net.sf.freecol.common.model.FreeColSpecObject,"100,00%",22,"100,00%"
net.sf.freecol.common.model.FreeColSpecObjectType,"50,00%",107,"72,73%"
net.sf.freecol.common.model.Game,"64,29%",634,"100,00%"
net.sf.freecol.common.model.Game.FcgoState,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Game.LogoutReason,"0,00%",1,"0,00%"
net.sf.freecol.common.model.GameTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.GoldTradeItem,"33,33%",58,"100,00%"
net.sf.freecol.common.model.Goods,"28,57%",109,"100,00%"
net.sf.freecol.common.model.GoodsContainer,"45,45%",242,"100,00%"
net.sf.freecol.common.model.GoodsContainerTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.GoodsLocation,"50,00%",136,"96,30%"
net.sf.freecol.common.model.GoodsTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.GoodsTradeItem,"50,00%",61,"100,00%"
net.sf.freecol.common.model.GoodsType,"47,62%",276,"95,45%"
net.sf.freecol.common.model.HighScore,"51,43%",160,"100,00%"
net.sf.freecol.common.model.HighScore.ScoreLevel,"0,00%",4,"0,00%"
net.sf.freecol.common.model.HighScoreTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.HighSeas,"25,00%",76,"100,00%"
net.sf.freecol.common.model.HighSeasTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.HistoryEvent,"44,44%",81,"100,00%"
net.sf.freecol.common.model.HistoryEvent.HistoryEventType,"0,00%",8,"40,00%"
net.sf.freecol.common.model.HitpointsCombatModel,"0,00%",12,"100,00%"
net.sf.freecol.common.model.InciteTradeItem,"33,33%",55,"100,00%"
net.sf.freecol.common.model.IndianNationType,"40,00%",85,"100,00%"
net.sf.freecol.common.model.IndianSettlement,"55,88%",599,"100,00%"
net.sf.freecol.common.model.IndianSettlement.ContactLevel,"0,00%",1,"0,00%"
net.sf.freecol.common.model.IndianSettlementTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.IndividualFatherTest,"0,00%",5,"0,00%"
net.sf.freecol.common.model.LandMap,"83,33%",138,"100,00%"
net.sf.freecol.common.model.LastSale,"40,00%",63,"100,00%"
net.sf.freecol.common.model.Limit,"33,33%",114,"95,45%"
net.sf.freecol.common.model.Limit.Operator,"0,00%",1,"0,00%"
net.sf.freecol.common.model.LimitTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.LostCityRumour,"22,22%",111,"100,00%"
net.sf.freecol.common.model.LostCityRumour.RumourType,"0,00%",6,"20,00%"
net.sf.freecol.common.model.Map,"57,89%",731,"100,00%"
net.sf.freecol.common.model.Map.CircleIterator,"80,00%",34,"100,00%"
net.sf.freecol.common.model.Map.Layer,"0,00%",4,"0,00%"
net.sf.freecol.common.model.Map.MoveCandidate,"0,00%",50,"100,00%"
net.sf.freecol.common.model.Map.MoveStep,"0,00%",4,"0,00%"
net.sf.freecol.common.model.Map.Position,"50,00%",77,"100,00%"
net.sf.freecol.common.model.MapTest,"0,00%",12,"16,67%"
net.sf.freecol.common.model.Market,"50,00%",262,"100,00%"
net.sf.freecol.common.model.Market.Access,"0,00%",4,"0,00%"
net.sf.freecol.common.model.MarketData,"56,52%",167,"100,00%"
net.sf.freecol.common.model.MarketTest,"100,00%",10,"75,00%"
net.sf.freecol.common.model.MarketWas,"0,00%",28,"100,00%"
net.sf.freecol.common.model.ModelMessage,"10,00%",146,"100,00%"
net.sf.freecol.common.model.ModelMessage.MessageType,"0,00%",14,"33,33%"
net.sf.freecol.common.model.ModelMessageTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.Modifier,"8,33%",217,"100,00%"
net.sf.freecol.common.model.Modifier.ModifierType,"0,00%",0,"0,00%"
net.sf.freecol.common.model.ModifierTest,"0,00%",4,"8,33%"
net.sf.freecol.common.model.Monarch,"55,56%",231,"100,00%"
net.sf.freecol.common.model.Monarch.MonarchAction,"0,00%",6,"14,29%"
net.sf.freecol.common.model.MonarchTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.MovementTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.Nation,"50,00%",100,"100,00%"
net.sf.freecol.common.model.NationOptions,"22,22%",68,"100,00%"
net.sf.freecol.common.model.NationOptions.Advantages,"0,00%",9,"40,00%"
net.sf.freecol.common.model.NationOptions.NationState,"0,00%",12,"40,00%"
net.sf.freecol.common.model.NationSummary,"47,37%",33,"40,00%"
net.sf.freecol.common.model.NationType,"50,00%",92,"100,00%"
net.sf.freecol.common.model.NationType.AggressionLevel,"0,00%",5,"33,33%"
net.sf.freecol.common.model.NationType.SettlementNumber,"0,00%",5,"33,33%"
net.sf.freecol.common.model.NationTypeTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.NativeTrade,"50,00%",223,"100,00%"
net.sf.freecol.common.model.NativeTrade.NativeTradeAction,"11,11%",19,"60,00%"
net.sf.freecol.common.model.NativeTradeItem,"62,50%",85,"100,00%"
net.sf.freecol.common.model.ObjectWas,"100,00%",8,"100,00%"
net.sf.freecol.common.model.Occupation,"0,00%",59,"100,00%"
net.sf.freecol.common.model.Operand,"37,50%",110,"100,00%"
net.sf.freecol.common.model.Operand.OperandType,"0,00%",0,"0,00%"
net.sf.freecol.common.model.Operand.ScopeLevel,"0,00%",0,"0,00%"
net.sf.freecol.common.model.PathNode,"100,00%",181,"100,00%"
net.sf.freecol.common.model.PathfindingTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.Player,"62,50%",1 768,"100,00%"
net.sf.freecol.common.model.Player.ColonyValueCategory,"0,00%",4,"33,33%"
net.sf.freecol.common.model.Player.NoClaimReason,"0,00%",13,"40,00%"
net.sf.freecol.common.model.Player.NoValueType,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Player.PlayerType,"0,00%",1,"0,00%"
net.sf.freecol.common.model.PlayerTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.PlunderType,"50,00%",34,"100,00%"
net.sf.freecol.common.model.ProductionCache,"100,00%",100,"100,00%"
net.sf.freecol.common.model.ProductionInfo,"100,00%",27,"22,22%"
net.sf.freecol.common.model.ProductionMap,"0,00%",6,"16,67%"
net.sf.freecol.common.model.ProductionMap.ProductionTree,"100,00%",10,"11,11%"
net.sf.freecol.common.model.ProductionType,"33,33%",192,"100,00%"
net.sf.freecol.common.model.ProductionTypeTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.RandomRange,"44,44%",64,"100,00%"
net.sf.freecol.common.model.RandomRangeTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.Region,"50,00%",218,"100,00%"
net.sf.freecol.common.model.Region.RegionType,"12,50%",24,"71,43%"
net.sf.freecol.common.model.Resource,"37,50%",118,"100,00%"
net.sf.freecol.common.model.ResourceType,"20,00%",37,"100,00%"
net.sf.freecol.common.model.Role,"35,71%",208,"100,00%"
net.sf.freecol.common.model.Role.RoleChange,"0,00%",1,"0,00%"
net.sf.freecol.common.model.RoleTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.SchoolTest,"0,00%",7,"20,00%"
net.sf.freecol.common.model.SchoolTest.SchoolLevel,"0,00%",0,"0,00%"
net.sf.freecol.common.model.Scope,"36,84%",90,"65,38%"
net.sf.freecol.common.model.ScopeContainer,"100,00%",79,"60,00%"
net.sf.freecol.common.model.ScopeTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.SerializationTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.Settlement,"50,00%",350,"98,41%"
net.sf.freecol.common.model.SettlementTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.SettlementType,"36,11%",144,"100,00%"
net.sf.freecol.common.model.SimpleCombatModel,"50,00%",144,"100,00%"
net.sf.freecol.common.model.SoLTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.Specification,"19,39%",676,"70,83%"
net.sf.freecol.common.model.Specification.AbilityReader,"100,00%",3,"100,00%"
net.sf.freecol.common.model.Specification.ModifierReader,"100,00%",7,"100,00%"
net.sf.freecol.common.model.Specification.OptionReader,"0,00%",8,"50,00%"
net.sf.freecol.common.model.Specification.Source,"100,00%",15,"100,00%"
net.sf.freecol.common.model.Specification.TypeReader,"100,00%",13,"100,00%"
net.sf.freecol.common.model.SpecificationTest,"0,00%",7,"16,67%"
net.sf.freecol.common.model.Stance,"0,00%",53,"63,64%"
net.sf.freecol.common.model.StanceTradeItem,"33,33%",58,"100,00%"
net.sf.freecol.common.model.StringTemplate,"44,44%",237,"83,72%"
net.sf.freecol.common.model.StringTemplate.TemplateType,"0,00%",8,"0,00%"
net.sf.freecol.common.model.Tension,"5,00%",49,"100,00%"
net.sf.freecol.common.model.Tension.Level,"0,00%",8,"20,00%"
net.sf.freecol.common.model.Tile,"47,62%",1 025,"98,15%"
net.sf.freecol.common.model.Tile.IndianSettlementInternals,"100,00%",17,"100,00%"
net.sf.freecol.common.model.TileImprovement,"31,58%",239,"95,45%"
net.sf.freecol.common.model.TileImprovementStyle,"100,00%",44,"100,00%"
net.sf.freecol.common.model.TileImprovementTest,"100,00%",0,"0,00%"
net.sf.freecol.common.model.TileImprovementType,"38,71%",240,"95,12%"
net.sf.freecol.common.model.TileItem,"50,00%",98,"100,00%"
net.sf.freecol.common.model.TileItemContainer,"33,33%",228,"100,00%"
net.sf.freecol.common.model.TileItemContainerTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.TileTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.TileTest.Work,"0,00%",0,"0,00%"
net.sf.freecol.common.model.TileType,"30,43%",222,"85,71%"
net.sf.freecol.common.model.TileType.RangeType,"0,00%",0,"0,00%"
net.sf.freecol.common.model.TileTypeChange,"33,33%",60,"100,00%"
net.sf.freecol.common.model.TradeItem,"60,00%",139,"100,00%"
net.sf.freecol.common.model.TradeRoute,"44,44%",154,"100,00%"
net.sf.freecol.common.model.TradeRouteStop,"33,33%",126,"96,43%"
net.sf.freecol.common.model.TradeRouteTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.Turn,"100,00%",129,"100,00%"
net.sf.freecol.common.model.TypeCountMap,"0,00%",8,"8,33%"
net.sf.freecol.common.model.Unit,"51,43%",1 766,"99,25%"
net.sf.freecol.common.model.Unit.ClosestSettlementGoalDecider,"100,00%",20,"100,00%"
net.sf.freecol.common.model.Unit.MoveType,"6,25%",11,"0,00%"
net.sf.freecol.common.model.Unit.PortMode,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Unit.UnitLabelType,"0,00%",1,"0,00%"
net.sf.freecol.common.model.Unit.UnitState,"0,00%",6,"33,33%"
net.sf.freecol.common.model.UnitChangeType,"88,89%",91,"93,75%"
net.sf.freecol.common.model.UnitChangeTypeTest,"0,00%",0,"0,00%"
net.sf.freecol.common.model.UnitIterator,"100,00%",43,"100,00%"
net.sf.freecol.common.model.UnitLocation,"50,00%",193,"100,00%"
net.sf.freecol.common.model.UnitLocation.NoAddReason,"100,00%",58,"50,00%"
net.sf.freecol.common.model.UnitTest,"0,00%",4,"5,88%"
net.sf.freecol.common.model.UnitTradeItem,"33,33%",58,"100,00%"
net.sf.freecol.common.model.UnitType,"38,98%",333,"95,31%"
net.sf.freecol.common.model.UnitTypeChange,"40,00%",43,"100,00%"
net.sf.freecol.common.model.UnitWas,"0,00%",24,"54,55%"
net.sf.freecol.common.model.WorkLocation,"40,00%",410,"98,41%"
net.sf.freecol.common.model.WorkLocation.Suggestion,"0,00%",16,"25,00%"
net.sf.freecol.common.model.mission.AbstractMission,"50,00%",84,"100,00%"
net.sf.freecol.common.model.mission.CompoundMission,"50,00%",70,"100,00%"
net.sf.freecol.common.model.mission.GoToMission,"40,00%",70,"100,00%"
net.sf.freecol.common.model.mission.ImprovementMission,"33,33%",58,"100,00%"
net.sf.freecol.common.model.mission.Mission.MissionState,"100,00%",13,"0,00%"
net.sf.freecol.common.model.mission.MissionManager,"0,00%",20,"100,00%"
net.sf.freecol.common.model.pathfinding.BaseCostDecider,"100,00%",43,"100,00%"
net.sf.freecol.common.model.pathfinding.CostDeciders,"100,00%",100,"100,00%"
net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidNavalDangerCostDecider,"0,00%",3,"0,00%"
net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidSettlementsAndBlockingUnitsCostDecider,"100,00%",5,"0,00%"
net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidSettlementsCostDecider,"100,00%",4,"0,00%"
net.sf.freecol.common.model.pathfinding.CostDeciders.ServerBaseCostDecider,"100,00%",4,"0,00%"
net.sf.freecol.common.model.pathfinding.CostDeciders.TileCostDecider,"100,00%",5,"0,00%"
net.sf.freecol.common.model.pathfinding.GoalDeciders,"100,00%",89,"100,00%"
net.sf.freecol.common.model.pathfinding.GoalDeciders.MultipleAdjacentDecider,"0,00%",11,"33,33%"
net.sf.freecol.common.model.production.BuildingProductionCalculator,"0,00%",52,"45,45%"
net.sf.freecol.common.model.production.ProductionUtils,"100,00%",20,"50,00%"
net.sf.freecol.common.model.production.TileProductionCalculator,"0,00%",68,"85,71%"
net.sf.freecol.common.model.production.WorkerAssignment,"0,00%",0,"0,00%"
net.sf.freecol.common.networking.AbandonColonyMessage,"0,00%",25,"100,00%"
net.sf.freecol.common.networking.AddPlayerMessage,"50,00%",34,"100,00%"
net.sf.freecol.common.networking.AnimateAttackMessage,"0,00%",65,"100,00%"
net.sf.freecol.common.networking.AnimateMoveMessage,"0,00%",47,"100,00%"
net.sf.freecol.common.networking.AskSkillMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.AssignTeacherMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.AssignTradeRouteMessage,"0,00%",29,"100,00%"
net.sf.freecol.common.networking.AttackMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.AttackRangedMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.AttributeMessage,"66,67%",57,"100,00%"
net.sf.freecol.common.networking.BuildColonyMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.CashInTreasureTrainMessage,"0,00%",25,"100,00%"
net.sf.freecol.common.networking.ChangeSet,"100,00%",273,"100,00%"
net.sf.freecol.common.networking.ChangeSet.AttackChange,"0,00%",54,"100,00%"
net.sf.freecol.common.networking.ChangeSet.AttributeChange,"0,00%",16,"100,00%"
net.sf.freecol.common.networking.ChangeSet.Change,"100,00%",43,"100,00%"
net.sf.freecol.common.networking.ChangeSet.FeatureChange,"0,00%",20,"100,00%"
net.sf.freecol.common.networking.ChangeSet.MessageChange,"0,00%",15,"100,00%"
net.sf.freecol.common.networking.ChangeSet.MoveChange,"0,00%",35,"100,00%"
net.sf.freecol.common.networking.ChangeSet.ObjectChange,"0,00%",21,"100,00%"
net.sf.freecol.common.networking.ChangeSet.PartialObjectChange,"0,00%",16,"100,00%"
net.sf.freecol.common.networking.ChangeSet.PlayerChange,"0,00%",15,"100,00%"
net.sf.freecol.common.networking.ChangeSet.RemoveChange,"0,00%",34,"100,00%"
net.sf.freecol.common.networking.ChangeSet.See,"0,00%",49,"88,89%"
net.sf.freecol.common.networking.ChangeSet.SeeCheck,"0,00%",1,"0,00%"
net.sf.freecol.common.networking.ChangeSet.SpyChange,"0,00%",16,"100,00%"
net.sf.freecol.common.networking.ChangeSet.StanceChange,"0,00%",17,"100,00%"
net.sf.freecol.common.networking.ChangeStateMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.ChangeWorkTypeMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.ChatMessage,"0,00%",50,"100,00%"
net.sf.freecol.common.networking.ChooseFoundingFatherMessage,"0,00%",61,"100,00%"
net.sf.freecol.common.networking.ClaimLandMessage,"0,00%",27,"100,00%"
net.sf.freecol.common.networking.ClearSpecialityMessage,"0,00%",25,"100,00%"
net.sf.freecol.common.networking.CloseMessage,"0,00%",24,"83,33%"
net.sf.freecol.common.networking.Connection,"56,52%",197,"88,57%"
net.sf.freecol.common.networking.ConnectionVerificationMessage,"0,00%",15,"66,67%"
net.sf.freecol.common.networking.ContinueMessage,"0,00%",17,"100,00%"
net.sf.freecol.common.networking.DeclareIndependenceMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.DeclineMoundsMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.DeleteTradeRouteMessage,"0,00%",28,"100,00%"
net.sf.freecol.common.networking.DeliverGiftMessage,"0,00%",55,"100,00%"
net.sf.freecol.common.networking.DemandTributeMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.DiplomacyMessage,"0,00%",72,"100,00%"
net.sf.freecol.common.networking.DisbandUnitMessage,"0,00%",25,"100,00%"
net.sf.freecol.common.networking.DisconnectMessage,"0,00%",22,"100,00%"
net.sf.freecol.common.networking.DisembarkMessage,"0,00%",25,"100,00%"
net.sf.freecol.common.networking.EmbarkMessage,"0,00%",27,"100,00%"
net.sf.freecol.common.networking.EmigrateUnitMessage,"0,00%",24,"100,00%"
net.sf.freecol.common.networking.EndTurnMessage,"0,00%",20,"100,00%"
net.sf.freecol.common.networking.EnterRevengeModeMessage,"0,00%",17,"100,00%"
net.sf.freecol.common.networking.EquipForRoleMessage,"0,00%",27,"100,00%"
net.sf.freecol.common.networking.ErrorMessage,"0,00%",60,"100,00%"
net.sf.freecol.common.networking.FeatureChangeMessage,"0,00%",46,"100,00%"
net.sf.freecol.common.networking.FirstContactMessage,"0,00%",29,"50,00%"
net.sf.freecol.common.networking.FountainOfYouthMessage,"0,00%",29,"100,00%"
net.sf.freecol.common.networking.GameEndedMessage,"0,00%",38,"100,00%"
net.sf.freecol.common.networking.GameStateMessage,"0,00%",32,"100,00%"
net.sf.freecol.common.networking.HighScoresMessage,"0,00%",36,"100,00%"
net.sf.freecol.common.networking.InciteMessage,"0,00%",32,"60,00%"
net.sf.freecol.common.networking.IndianDemandMessage,"0,00%",66,"100,00%"
net.sf.freecol.common.networking.JoinColonyMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.LearnSkillMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.LoadGoodsMessage,"0,00%",27,"100,00%"
net.sf.freecol.common.networking.LoginMessage,"12,50%",67,"58,82%"
net.sf.freecol.common.networking.LogoutMessage,"0,00%",41,"100,00%"
net.sf.freecol.common.networking.LootCargoMessage,"0,00%",45,"100,00%"
net.sf.freecol.common.networking.Message,"75,00%",270,"88,00%"
net.sf.freecol.common.networking.Message.MessagePriority,"0,00%",0,"0,00%"
net.sf.freecol.common.networking.MissionaryMessage,"0,00%",27,"100,00%"
net.sf.freecol.common.networking.MonarchActionMessage,"0,00%",70,"100,00%"
net.sf.freecol.common.networking.MoveMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.MoveToMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.MultipleMessage,"50,00%",45,"100,00%"
net.sf.freecol.common.networking.NationSummaryMessage,"0,00%",40,"100,00%"
net.sf.freecol.common.networking.NativeGiftMessage,"0,00%",28,"100,00%"
net.sf.freecol.common.networking.NativeTradeMessage,"0,00%",37,"77,78%"
net.sf.freecol.common.networking.NetworkReplyObject,"75,00%",42,"100,00%"
net.sf.freecol.common.networking.NewLandNameMessage,"0,00%",40,"100,00%"
net.sf.freecol.common.networking.NewRegionNameMessage,"0,00%",54,"100,00%"
net.sf.freecol.common.networking.NewTradeRouteMessage,"0,00%",36,"100,00%"
net.sf.freecol.common.networking.NewTurnMessage,"0,00%",30,"100,00%"
net.sf.freecol.common.networking.ObjectMessage,"100,00%",38,"100,00%"
net.sf.freecol.common.networking.PartialMessage,"0,00%",33,"100,00%"
net.sf.freecol.common.networking.PayArrearsMessage,"0,00%",25,"100,00%"
net.sf.freecol.common.networking.PayForBuildingMessage,"0,00%",25,"100,00%"
net.sf.freecol.common.networking.PutOutsideColonyMessage,"0,00%",25,"100,00%"
net.sf.freecol.common.networking.QuestionMessage,"0,00%",17,"100,00%"
net.sf.freecol.common.networking.ReadyMessage,"0,00%",36,"100,00%"
net.sf.freecol.common.networking.RearrangeColonyMessage,"0,00%",48,"100,00%"
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement,"0,00%",19,"25,00%"
net.sf.freecol.common.networking.ReceivingThread,"83,33%",77,"100,00%"
net.sf.freecol.common.networking.ReceivingThread.QuestionThread,"100,00%",15,"100,00%"
net.sf.freecol.common.networking.ReceivingThread.UpdateThread,"100,00%",12,"100,00%"
net.sf.freecol.common.networking.ReconnectMessage,"0,00%",19,"100,00%"
net.sf.freecol.common.networking.RegisterServerMessage,"0,00%",15,"100,00%"
net.sf.freecol.common.networking.RemoveMessage,"0,00%",44,"100,00%"
net.sf.freecol.common.networking.RemoveServerMessage,"0,00%",15,"100,00%"
net.sf.freecol.common.networking.RenameMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.ReplyMessage,"0,00%",17,"100,00%"
net.sf.freecol.common.networking.RequestLaunchMessage,"0,00%",16,"100,00%"
net.sf.freecol.common.networking.RetireMessage,"0,00%",16,"100,00%"
net.sf.freecol.common.networking.ScoutIndianSettlementMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage,"0,00%",35,"70,00%"
net.sf.freecol.common.networking.ServerAPI,"0,00%",617,"100,00%"
net.sf.freecol.common.networking.ServerInfoMessage,"0,00%",37,"100,00%"
net.sf.freecol.common.networking.ServerListMessage,"50,00%",35,"100,00%"
net.sf.freecol.common.networking.SetAIMessage,"0,00%",36,"100,00%"
net.sf.freecol.common.networking.SetAvailableMessage,"0,00%",36,"100,00%"
net.sf.freecol.common.networking.SetBuildQueueMessage,"0,00%",44,"100,00%"
net.sf.freecol.common.networking.SetColorMessage,"0,00%",36,"100,00%"
net.sf.freecol.common.networking.SetCurrentPlayerMessage,"0,00%",30,"100,00%"
net.sf.freecol.common.networking.SetCurrentStopMessage,"0,00%",23,"100,00%"
net.sf.freecol.common.networking.SetDeadMessage,"0,00%",30,"100,00%"
net.sf.freecol.common.networking.SetDestinationMessage,"0,00%",23,"100,00%"
net.sf.freecol.common.networking.SetGoodsLevelsMessage,"0,00%",31,"100,00%"
net.sf.freecol.common.networking.SetNationMessage,"0,00%",37,"100,00%"
net.sf.freecol.common.networking.SetNationTypeMessage,"0,00%",37,"100,00%"
net.sf.freecol.common.networking.SetStanceMessage,"0,00%",43,"100,00%"
net.sf.freecol.common.networking.SpySettlementMessage,"0,00%",29,"66,67%"
net.sf.freecol.common.networking.StartGameMessage,"0,00%",19,"100,00%"
net.sf.freecol.common.networking.TrainUnitInEuropeMessage,"0,00%",25,"100,00%"
net.sf.freecol.common.networking.TrivialMessage,"11,11%",68,"100,00%"
net.sf.freecol.common.networking.UnloadGoodsMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.UpdateGameOptionsMessage,"0,00%",29,"100,00%"
net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage,"0,00%",30,"100,00%"
net.sf.freecol.common.networking.UpdateMessage,"50,00%",43,"100,00%"
net.sf.freecol.common.networking.UpdateServerMessage,"0,00%",15,"100,00%"
net.sf.freecol.common.networking.UpdateTradeRouteMessage,"0,00%",27,"100,00%"
net.sf.freecol.common.networking.VacantPlayersMessage,"0,00%",32,"100,00%"
net.sf.freecol.common.networking.WorkMessage,"0,00%",26,"100,00%"
net.sf.freecol.common.networking.WrapperMessage,"50,00%",44,"100,00%"
net.sf.freecol.common.option.AbstractOption,"28,57%",89,"100,00%"
net.sf.freecol.common.option.AbstractUnitOption,"41,67%",75,"85,71%"
net.sf.freecol.common.option.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.common.option.AudioMixerOption,"71,43%",45,"100,00%"
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper,"100,00%",15,"42,86%"
net.sf.freecol.common.option.BooleanOption,"33,33%",37,"100,00%"
net.sf.freecol.common.option.FileOption,"40,00%",47,"100,00%"
net.sf.freecol.common.option.GameOptions,"83,05%",162,"100,00%"
net.sf.freecol.common.option.IntegerOption,"50,00%",99,"100,00%"
net.sf.freecol.common.option.LanguageOption,"66,67%",49,"100,00%"
net.sf.freecol.common.option.LanguageOption.Language,"100,00%",34,"88,89%"
net.sf.freecol.common.option.ListOption,"57,14%",112,"100,00%"
net.sf.freecol.common.option.MapGeneratorOptions,"74,29%",33,"0,00%"
net.sf.freecol.common.option.ModListOption,"0,00%",21,"100,00%"
net.sf.freecol.common.option.ModOption,"33,33%",48,"100,00%"
net.sf.freecol.common.option.OptionGroup,"50,00%",183,"100,00%"
net.sf.freecol.common.option.OptionTest,"100,00%",4,"25,00%"
net.sf.freecol.common.option.PercentageOption,"0,00%",17,"75,00%"
net.sf.freecol.common.option.RangeOption,"0,00%",44,"100,00%"
net.sf.freecol.common.option.SelectOption,"33,33%",83,"100,00%"
net.sf.freecol.common.option.StringOption,"40,00%",57,"100,00%"
net.sf.freecol.common.option.TextOption,"25,00%",36,"100,00%"
net.sf.freecol.common.option.UnitListOption,"0,00%",21,"100,00%"
net.sf.freecol.common.option.UnitTypeOption,"44,44%",76,"100,00%"
net.sf.freecol.common.option.UnitTypeOption.TypeSelector,"0,00%",3,"0,00%"
net.sf.freecol.common.resources.AudioResource,"0,00%",21,"75,00%"
net.sf.freecol.common.resources.ColorResource,"0,00%",29,"66,67%"
net.sf.freecol.common.resources.FAFile,"0,00%",27,"50,00%"
net.sf.freecol.common.resources.FAFile.CREatingInputStream,"0,00%",16,"100,00%"
net.sf.freecol.common.resources.FAFile.FALetter,"0,00%",0,"100,00%"
net.sf.freecol.common.resources.FAFile.FAName,"0,00%",0,"100,00%"
net.sf.freecol.common.resources.FAFileResource,"0,00%",23,"75,00%"
net.sf.freecol.common.resources.FontResource,"0,00%",32,"80,00%"
net.sf.freecol.common.resources.ImageCache,"14,29%",79,"57,14%"
net.sf.freecol.common.resources.ImageResource,"28,57%",80,"52,38%"
net.sf.freecol.common.resources.PropertyList,"0,00%",4,"0,00%"
net.sf.freecol.common.resources.Resource,"100,00%",43,"100,00%"
net.sf.freecol.common.resources.ResourceFactory,"50,00%",16,"100,00%"
net.sf.freecol.common.resources.ResourceManager,"25,00%",204,"80,65%"
net.sf.freecol.common.resources.ResourceMapping,"0,00%",81,"81,25%"
net.sf.freecol.common.resources.ResourceMapping.ResourceType,"0,00%",0,"0,00%"
net.sf.freecol.common.resources.SZAResource,"0,00%",28,"100,00%"
net.sf.freecol.common.resources.StringResource,"0,00%",19,"100,00%"
net.sf.freecol.common.resources.Video,"0,00%",8,"50,00%"
net.sf.freecol.common.resources.VideoResource,"0,00%",22,"100,00%"
net.sf.freecol.common.sound.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.common.sound.OggVorbisDecoderFactory,"100,00%",18,"100,00%"
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream,"0,00%",54,"57,14%"
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream,"0,00%",10,"9,09%"
net.sf.freecol.common.sound.SoundPlayer,"50,00%",81,"100,00%"
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread,"100,00%",36,"100,00%"
net.sf.freecol.common.sound.SoundTest,"0,00%",0,"0,00%"
net.sf.freecol.common.util.CachingFunction,"100,00%",13,"100,00%"
net.sf.freecol.common.util.CollectionUtils,"23,08%",1 443,"98,85%"
net.sf.freecol.common.util.ImageUtils,"100,00%",124,"100,00%"
net.sf.freecol.common.util.Introspector,"100,00%",134,"93,75%"
net.sf.freecol.common.util.Introspector.IntrospectorException,"100,00%",0,"0,00%"
net.sf.freecol.common.util.LogBuilder,"100,00%",81,"100,00%"
net.sf.freecol.common.util.OSUtils,"0,00%",36,"100,00%"
net.sf.freecol.common.util.RandomChoice,"0,00%",3,"0,00%"
net.sf.freecol.common.util.RandomUtils,"100,00%",74,"100,00%"
net.sf.freecol.common.util.RandomUtils.RandomIntCache,"0,00%",0,"0,00%"
net.sf.freecol.common.util.StringUtils,"100,00%",120,"100,00%"
net.sf.freecol.common.util.Utils,"50,00%",136,"100,00%"
net.sf.freecol.common.utils.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.common.utils.UtilsTest,"100,00%",0,"0,00%"
net.sf.freecol.metaserver.MetaRegister,"75,00%",54,"90,00%"
net.sf.freecol.metaserver.MetaServer,"66,67%",55,"100,00%"
net.sf.freecol.metaserver.MetaServerHandler,"66,67%",45,"100,00%"
net.sf.freecol.server.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.server.FreeColServer,"66,67%",464,"100,00%"
net.sf.freecol.server.FreeColServer.ServerState,"0,00%",1,"0,00%"
net.sf.freecol.server.SaveLoadTest,"100,00%",0,"0,00%"
net.sf.freecol.server.ServerTestHelper,"0,00%",13,"13,33%"
net.sf.freecol.server.ai.AIColony,"55,00%",325,"96,43%"
net.sf.freecol.server.ai.AIColonyTest,"0,00%",12,"42,86%"
net.sf.freecol.server.ai.AIGoods,"40,00%",130,"100,00%"
net.sf.freecol.server.ai.AIInGameInputHandler,"66,67%",23,"100,00%"
net.sf.freecol.server.ai.AIMain,"37,50%",200,"100,00%"
net.sf.freecol.server.ai.AIMessage,"100,00%",294,"100,00%"
net.sf.freecol.server.ai.AIObject,"66,67%",93,"100,00%"
net.sf.freecol.server.ai.AIPlayer,"62,50%",275,"100,00%"
net.sf.freecol.server.ai.AIServerAPI,"100,00%",22,"100,00%"
net.sf.freecol.server.ai.AIUnit,"50,00%",236,"85,96%"
net.sf.freecol.server.ai.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.server.ai.Cargo,"36,84%",183,"66,67%"
net.sf.freecol.server.ai.Cargo.CargoMode,"0,00%",1,"0,00%"
net.sf.freecol.server.ai.Cargo.CargoPlan,"57,14%",21,"100,00%"
net.sf.freecol.server.ai.ColonyPlan,"25,81%",237,"100,00%"
net.sf.freecol.server.ai.ColonyPlan.BuildPlan,"0,00%",4,"33,33%"
net.sf.freecol.server.ai.ColonyPlan.ProfileType,"0,00%",7,"33,33%"
net.sf.freecol.server.ai.ColonyPlanTest,"0,00%",19,"37,50%"
net.sf.freecol.server.ai.ContactTest,"0,00%",0,"0,00%"
net.sf.freecol.server.ai.EuropeanAIPlayer,"78,12%",545,"90,24%"
net.sf.freecol.server.ai.GoodsWish,"28,57%",97,"100,00%"
net.sf.freecol.server.ai.MissionAIPlayer,"66,67%",126,"100,00%"
net.sf.freecol.server.ai.MissionAssignmentTest,"0,00%",4,"16,67%"
net.sf.freecol.server.ai.NativeAIPlayer,"16,67%",119,"100,00%"
net.sf.freecol.server.ai.REFAIPlayer,"60,00%",85,"100,00%"
net.sf.freecol.server.ai.REFAIPlayer.REFNavyGoalDecider,"100,00%",18,"100,00%"
net.sf.freecol.server.ai.REFAIPlayer.TargetTuple,"0,00%",7,"50,00%"
net.sf.freecol.server.ai.REFTest,"0,00%",0,"0,00%"
net.sf.freecol.server.ai.StandardAIPlayerTest,"0,00%",0,"0,00%"
net.sf.freecol.server.ai.TensionTest,"0,00%",0,"0,00%"
net.sf.freecol.server.ai.TileImprovementPlan,"37,50%",133,"100,00%"
net.sf.freecol.server.ai.TransportableAIObject,"87,50%",200,"100,00%"
net.sf.freecol.server.ai.ValuedAIObject,"100,00%",49,"100,00%"
net.sf.freecol.server.ai.Wish,"40,00%",90,"100,00%"
net.sf.freecol.server.ai.WorkLocationPlan,"50,00%",50,"100,00%"
net.sf.freecol.server.ai.WorkerWish,"28,57%",81,"100,00%"
net.sf.freecol.server.ai.military.DefensiveMap,"0,00%",46,"90,00%"
net.sf.freecol.server.ai.military.DefensiveMap.SearchNode,"0,00%",0,"0,00%"
net.sf.freecol.server.ai.military.DefensiveZone,"0,00%",13,"15,00%"
net.sf.freecol.server.ai.military.MilitaryCoordinator,"0,00%",15,"6,90%"
net.sf.freecol.server.ai.mission.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.server.ai.mission.BuildColonyMission,"50,00%",134,"100,00%"
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission,"40,00%",146,"100,00%"
net.sf.freecol.server.ai.mission.DefendSettlementMission,"50,00%",116,"100,00%"
net.sf.freecol.server.ai.mission.EscortUnitMission,"33,33%",83,"100,00%"
net.sf.freecol.server.ai.mission.IdleAtSettlementMission,"33,33%",49,"100,00%"
net.sf.freecol.server.ai.mission.IndianBringGiftMission,"42,86%",91,"94,12%"
net.sf.freecol.server.ai.mission.IndianDemandMission,"54,55%",103,"90,48%"
net.sf.freecol.server.ai.mission.Mission,"18,75%",378,"100,00%"
net.sf.freecol.server.ai.mission.MissionaryMission,"40,00%",134,"100,00%"
net.sf.freecol.server.ai.mission.PioneeringMission,"57,14%",203,"100,00%"
net.sf.freecol.server.ai.mission.PioneeringMissionTest,"0,00%",0,"0,00%"
net.sf.freecol.server.ai.mission.PrivateerMission,"40,00%",135,"100,00%"
net.sf.freecol.server.ai.mission.PrivateerMissionTest,"0,00%",3,"25,00%"
net.sf.freecol.server.ai.mission.ScoutingMission,"50,00%",159,"100,00%"
net.sf.freecol.server.ai.mission.ScoutingMissionTest,"0,00%",0,"0,00%"
net.sf.freecol.server.ai.mission.TransportMission,"37,50%",420,"100,00%"
net.sf.freecol.server.ai.mission.TransportMission.CargoResult,"0,00%",0,"0,00%"
net.sf.freecol.server.ai.mission.TransportMissionTest,"0,00%",0,"0,00%"
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission,"33,33%",155,"100,00%"
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMissionTest,"0,00%",0,"0,00%"
net.sf.freecol.server.ai.mission.UnitWanderHostileMission,"33,33%",62,"100,00%"
net.sf.freecol.server.ai.mission.UnitWanderMission,"33,33%",41,"100,00%"
net.sf.freecol.server.ai.mission.WishRealizationMission,"40,00%",65,"100,00%"
net.sf.freecol.server.ai.mission.WorkInsideColonyMission,"40,00%",62,"100,00%"
net.sf.freecol.server.control.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.server.control.Controller,"0,00%",12,"100,00%"
net.sf.freecol.server.control.FreeColServerHolder,"100,00%",20,"100,00%"
net.sf.freecol.server.control.InGameController,"33,33%",738,"98,89%"
net.sf.freecol.server.control.InGameControllerTest,"0,00%",21,"14,63%"
net.sf.freecol.server.control.PreGameController,"50,00%",83,"100,00%"
net.sf.freecol.server.control.ServerInputHandler,"0,00%",14,"100,00%"
net.sf.freecol.server.control.UserConnectionHandler,"0,00%",14,"100,00%"
net.sf.freecol.server.generator.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.server.generator.ColonizationMapLoader,"25,00%",48,"66,67%"
net.sf.freecol.server.generator.FreeColMapLoader,"0,00%",17,"100,00%"
net.sf.freecol.server.generator.MapGeneratorTest,"100,00%",7,"33,33%"
net.sf.freecol.server.generator.River,"80,00%",97,"75,00%"
net.sf.freecol.server.generator.River.DirectionChange,"0,00%",4,"0,00%"
net.sf.freecol.server.generator.RiverSection,"80,00%",68,"90,00%"
net.sf.freecol.server.generator.SimpleMapGenerator,"75,00%",141,"88,89%"
net.sf.freecol.server.generator.SimpleMapGenerator.Territory,"0,00%",3,"25,00%"
net.sf.freecol.server.generator.TerrainGenerator,"37,50%",122,"93,33%"
net.sf.freecol.server.model.AllTests,"100,00%",0,"0,00%"
net.sf.freecol.server.model.DiplomacySession,"80,00%",144,"100,00%"
net.sf.freecol.server.model.LootSession,"50,00%",4,"0,00%"
net.sf.freecol.server.model.MonarchSession,"85,71%",24,"20,00%"
net.sf.freecol.server.model.NativeDemandSession,"0,00%",41,"77,78%"
net.sf.freecol.server.model.NativeTradeSession,"66,67%",28,"100,00%"
net.sf.freecol.server.model.ServerBuilding,"0,00%",68,"100,00%"
net.sf.freecol.server.model.ServerBuildingTest,"0,00%",94,"68,00%"
net.sf.freecol.server.model.ServerBuildingTest.SchoolLevel,"0,00%",0,"0,00%"
net.sf.freecol.server.model.ServerColony,"0,00%",133,"100,00%"
net.sf.freecol.server.model.ServerColonyTest,"0,00%",43,"25,00%"
net.sf.freecol.server.model.ServerColonyTile,"0,00%",35,"100,00%"
net.sf.freecol.server.model.ServerEurope,"0,00%",89,"100,00%"
net.sf.freecol.server.model.ServerGame,"50,00%",172,"100,00%"
net.sf.freecol.server.model.ServerIndianSettlement,"50,00%",159,"100,00%"
net.sf.freecol.server.model.ServerIndianSettlementTest,"0,00%",0,"0,00%"
net.sf.freecol.server.model.ServerPlayer,"28,57%",777,"96,19%"
net.sf.freecol.server.model.ServerPlayer.DeadCheck,"0,00%",0,"0,00%"
net.sf.freecol.server.model.ServerPlayerTest,"0,00%",13,"18,75%"
net.sf.freecol.server.model.ServerRegion,"100,00%",104,"100,00%"
net.sf.freecol.server.model.ServerUnit,"0,00%",141,"100,00%"
net.sf.freecol.server.model.ServerUnitTest,"0,00%",18,"33,33%"
net.sf.freecol.server.model.Session,"75,00%",102,"100,00%"
net.sf.freecol.server.model.TimedSession,"50,00%",26,"100,00%"
net.sf.freecol.server.networking.DummyConnection,"50,00%",34,"100,00%"
net.sf.freecol.server.networking.Server,"88,89%",96,"100,00%"
net.sf.freecol.tools.ColonizationMapReader,"0,00%",33,"0,00%"
net.sf.freecol.tools.ColonizationSaveGameReader,"0,00%",0,"0,00%"
net.sf.freecol.tools.ColonizationSaveGameReader.Colonist,"0,00%",0,"0,00%"
net.sf.freecol.tools.ColonizationSaveGameReader.ColonyData,"0,00%",0,"0,00%"
net.sf.freecol.tools.ColonizationSaveGameReader.GameData,"0,00%",0,"0,00%"
net.sf.freecol.tools.ColonizationSaveGameReader.PlayerData,"0,00%",0,"0,00%"
net.sf.freecol.tools.DesktopEntry,"0,00%",10,"100,00%"
net.sf.freecol.tools.FSGConverter,"50,00%",53,"100,00%"
net.sf.freecol.tools.FlagTest,"0,00%",0,"0,00%"
net.sf.freecol.tools.ForestMaker,"0,00%",25,"100,00%"
net.sf.freecol.tools.ForestMaker.ImageLocation,"0,00%",6,"50,00%"
net.sf.freecol.tools.GenerateDocumentation,"0,00%",3,"0,00%"
net.sf.freecol.tools.InstallerTranslations,"0,00%",3,"0,00%"
net.sf.freecol.tools.MapConverter,"100,00%",3,"0,00%"
net.sf.freecol.tools.MergeTranslations,"100,00%",3,"0,00%"
net.sf.freecol.tools.RiverMaker,"0,00%",0,"0,00%"
net.sf.freecol.tools.SaveGameValidator,"100,00%",3,"0,00%"
net.sf.freecol.tools.Texture2Tile,"0,00%",26,"14,29%"
net.sf.freecol.tools.TranslationReport,"0,00%",12,"60,00%"
net.sf.freecol.tools.TranslationReport.LanguageStatsRecord,"0,00%",0,"100,00%"
net.sf.freecol.util.test.FreeColTestCase,"50,00%",160,"70,37%"
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder,"0,00%",0,"0,00%"
net.sf.freecol.util.test.FreeColTestCase.MapBuilder,"0,00%",0,"0,00%"
net.sf.freecol.util.test.FreeColTestUtils,"0,00%",0,"0,00%"
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder,"0,00%",0,"0,00%"
net.sf.freecol.util.test.MockMapGenerator,"0,00%",6,"50,00%"
net.sf.freecol.util.test.MockPseudoRandom,"0,00%",0,"0,00%"

Interface,Jf,JLOC,Jm
net.sf.freecol.client.gui.DialogHandler,"100,00%",4,"0,00%"
net.sf.freecol.client.gui.animation.Animations.Procedure,"100,00%",4,"0,00%"
net.sf.freecol.client.gui.label.CargoLabel,"100,00%",18,"100,00%"
net.sf.freecol.client.gui.label.Draggable,"100,00%",5,"100,00%"
net.sf.freecol.client.gui.mapviewer.MapViewer.TileRenderingCallback,"100,00%",12,"100,00%"
net.sf.freecol.client.gui.option.OptionUpdater,"100,00%",13,"100,00%"
net.sf.freecol.client.gui.panel.DropTarget,"100,00%",38,"100,00%"
net.sf.freecol.client.gui.panel.MiniMap.TileRenderingCallback,"100,00%",12,"100,00%"
net.sf.freecol.client.gui.panel.colopedia.ColopediaDetailPanel,"100,00%",16,"100,00%"
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.Getter,"100,00%",0,"0,00%"
net.sf.freecol.client.gui.video.VideoListener,"100,00%",6,"100,00%"
net.sf.freecol.common.ObjectWithId,"100,00%",9,"100,00%"
net.sf.freecol.common.i18n.Selector,"100,00%",9,"100,00%"
net.sf.freecol.common.io.sza.AnimationEvent,"100,00%",3,"100,00%"
net.sf.freecol.common.io.sza.ImageAnimationEvent,"100,00%",13,"100,00%"
net.sf.freecol.common.model.BaseProduction,"100,00%",25,"100,00%"
net.sf.freecol.common.model.Constants,"100,00%",47,"100,00%"
net.sf.freecol.common.model.Consumer,"100,00%",44,"100,00%"
net.sf.freecol.common.model.FreeColGameObjectListener,"100,00%",22,"100,00%"
net.sf.freecol.common.model.Locatable,"100,00%",33,"100,00%"
net.sf.freecol.common.model.Location,"0,00%",130,"100,00%"
net.sf.freecol.common.model.Map.SearchHeuristic,"100,00%",3,"0,00%"
net.sf.freecol.common.model.Movable,"100,00%",16,"100,00%"
net.sf.freecol.common.model.Nameable,"100,00%",13,"100,00%"
net.sf.freecol.common.model.Named,"100,00%",11,"100,00%"
net.sf.freecol.common.model.Ownable,"100,00%",16,"100,00%"
net.sf.freecol.common.model.Specification.ChildReader,"100,00%",0,"0,00%"
net.sf.freecol.common.model.TradeLocation,"100,00%",45,"100,00%"
net.sf.freecol.common.model.TransactionListener,"100,00%",18,"100,00%"
net.sf.freecol.common.model.mission.Mission,"100,00%",47,"100,00%"
net.sf.freecol.common.model.pathfinding.CostDecider,"0,00%",29,"100,00%"
net.sf.freecol.common.model.pathfinding.GoalDecider,"100,00%",44,"100,00%"
net.sf.freecol.common.networking.MessageHandler,"100,00%",20,"100,00%"
net.sf.freecol.common.option.Option,"100,00%",50,"100,00%"
net.sf.freecol.common.option.OptionContainer,"100,00%",142,"100,00%"
net.sf.freecol.common.resources.Resource.Cleanable,"100,00%",7,"100,00%"
net.sf.freecol.common.resources.ResourceMapping.PreloadController,"100,00%",0,"0,00%"
net.sf.freecol.server.generator.MapGenerator,"100,00%",21,"100,00%"
net.sf.freecol.server.generator.MapLayerGenerator,"100,00%",15,"100,00%"
net.sf.freecol.server.generator.MapLoader,"100,00%",15,"100,00%"
net.sf.freecol.server.model.TurnTaker,"100,00%",10,"100,00%"

Package,Jc,Jf,JLOC,Jm
net.sf.freecol,"100,00%","31,94%",461,"92,86%"
net.sf.freecol.client,"50,00%","58,94%",751,"86,25%"
net.sf.freecol.client.control,"81,82%","50,00%",1 973,"97,20%"
net.sf.freecol.client.gui,"90,32%","39,35%",4 480,"79,32%"
net.sf.freecol.client.gui.action,"96,47%","1,77%",2 779,"93,28%"
net.sf.freecol.client.gui.animation,"100,00%","75,00%",212,"93,75%"
net.sf.freecol.client.gui.dialog,"73,02%","33,86%",2 178,"77,86%"
net.sf.freecol.client.gui.images,"100,00%","0,00%",117,"37,93%"
net.sf.freecol.client.gui.label,"90,00%","44,12%",527,"93,85%"
net.sf.freecol.client.gui.mapviewer,"84,21%","41,22%",1 236,"58,50%"
net.sf.freecol.client.gui.menu,"100,00%","0,00%",258,"56,76%"
net.sf.freecol.client.gui.option,"76,92%","7,02%",860,"71,11%"
net.sf.freecol.client.gui.panel,"70,69%","35,78%",4 338,"79,53%"
net.sf.freecol.client.gui.panel.colopedia,"93,33%","15,00%",553,"69,74%"
net.sf.freecol.client.gui.panel.report,"84,85%","37,59%",888,"37,97%"
net.sf.freecol.client.gui.plaf,"79,41%","0,00%",747,"22,76%"
net.sf.freecol.client.gui.tooltip,"100,00%",n/a,65,"100,00%"
net.sf.freecol.client.gui.video,"100,00%","0,00%",64,"55,56%"
net.sf.freecol.client.networking,"100,00%","100,00%",88,"100,00%"
net.sf.freecol.common,"75,00%","75,00%",142,"90,91%"
net.sf.freecol.common.debug,"100,00%","55,56%",515,"98,55%"
net.sf.freecol.common.i18n,"55,00%","18,39%",966,"54,69%"
net.sf.freecol.common.io,"61,54%","40,62%",1 520,"74,45%"
net.sf.freecol.common.io.sza,"75,00%","40,00%",159,"88,89%"
net.sf.freecol.common.logging,"100,00%","100,00%",90,"100,00%"
net.sf.freecol.common.metaserver,"100,00%","19,05%",218,"100,00%"
net.sf.freecol.common.model,"74,15%","30,84%",24 893,"86,76%"
net.sf.freecol.common.model.mission,"85,71%","50,00%",460,"100,00%"
net.sf.freecol.common.model.pathfinding,"100,00%","66,67%",434,"82,05%"
net.sf.freecol.common.model.production,"50,00%","0,00%",194,"52,00%"
net.sf.freecol.common.networking,"98,50%","10,43%",7 522,"95,16%"
net.sf.freecol.common.option,"88,89%","65,52%",2 018,"95,27%"
net.sf.freecol.common.resources,"81,82%","13,24%",1 031,"69,63%"
net.sf.freecol.common.sound,"71,43%","24,14%",283,"56,00%"
net.sf.freecol.common.util,"83,33%","30,30%",2 349,"94,01%"
net.sf.freecol.common.utils,"0,00%",n/a,36,"0,00%"
net.sf.freecol.metaserver,"100,00%","69,23%",217,"96,15%"
net.sf.freecol.server,"40,00%","48,65%",565,"75,31%"
net.sf.freecol.server.ai,"77,78%","32,27%",4 262,"89,37%"
net.sf.freecol.server.ai.military,"75,00%","0,00%",128,"22,58%"
net.sf.freecol.server.ai.mission,"72,00%","32,61%",2 976,"95,18%"
net.sf.freecol.server.control,"75,00%","5,13%",1 056,"75,97%"
net.sf.freecol.server.generator,"69,23%","45,45%",763,"78,31%"
net.sf.freecol.server.model,"68,00%","19,29%",2 646,"84,33%"
net.sf.freecol.server.networking,"100,00%","81,82%",174,"100,00%"
net.sf.freecol.tools,"55,00%","0,95%",437,"22,06%"
net.sf.freecol.util.test,"14,29%","5,41%",238,"30,00%"

Module,Jc,Jf,JLOC,Jm
Project,"87,52%","35,76%",76 637,"87,00%"
test,"4,81%","0,25%",2 230,"13,33%"

Project,Jc,Jf,JLOC,Jm
project,"87,19%","31,04%",78 867,"83,11%"

